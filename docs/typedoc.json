{
	"id": 0,
	"name": "cosmicord.js",
	"kind": 1,
	"kindString": "Project",
	"flags": {},
	"originalName": "",
	"children": [
		{
			"id": 1635,
			"name": "PlayerState",
			"kind": 8,
			"kindString": "Enumeration",
			"flags": {},
			"children": [
				{
					"id": 1636,
					"name": "Connected",
					"kind": 16,
					"kindString": "Enumeration Member",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Player.interface.ts",
							"line": 27,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Player.interface.ts#L27"
						}
					],
					"type": {
						"type": "literal",
						"value": "CONNECTED"
					}
				},
				{
					"id": 1637,
					"name": "Connecting",
					"kind": 16,
					"kindString": "Enumeration Member",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Player.interface.ts",
							"line": 28,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Player.interface.ts#L28"
						}
					],
					"type": {
						"type": "literal",
						"value": "CONNECTING"
					}
				},
				{
					"id": 1641,
					"name": "Destroyed",
					"kind": 16,
					"kindString": "Enumeration Member",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Player.interface.ts",
							"line": 32,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Player.interface.ts#L32"
						}
					],
					"type": {
						"type": "literal",
						"value": "DESTROYED"
					}
				},
				{
					"id": 1640,
					"name": "Destroying",
					"kind": 16,
					"kindString": "Enumeration Member",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Player.interface.ts",
							"line": 31,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Player.interface.ts#L31"
						}
					],
					"type": {
						"type": "literal",
						"value": "DESTROYING"
					}
				},
				{
					"id": 1638,
					"name": "Disconnected",
					"kind": 16,
					"kindString": "Enumeration Member",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Player.interface.ts",
							"line": 29,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Player.interface.ts#L29"
						}
					],
					"type": {
						"type": "literal",
						"value": "DISCONNECTED"
					}
				},
				{
					"id": 1639,
					"name": "Disconnecting",
					"kind": 16,
					"kindString": "Enumeration Member",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Player.interface.ts",
							"line": 30,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Player.interface.ts#L30"
						}
					],
					"type": {
						"type": "literal",
						"value": "DISCONNECTING"
					}
				}
			],
			"groups": [
				{
					"title": "Enumeration Members",
					"children": [
						1636,
						1637,
						1641,
						1640,
						1638,
						1639
					]
				}
			],
			"sources": [
				{
					"fileName": "src/interfaces/Player.interface.ts",
					"line": 26,
					"character": 12,
					"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Player.interface.ts#L26"
				}
			]
		},
		{
			"id": 1527,
			"name": "RestLoadResultType",
			"kind": 8,
			"kindString": "Enumeration",
			"flags": {},
			"children": [
				{
					"id": 1532,
					"name": "LoadFailed",
					"kind": 16,
					"kindString": "Enumeration Member",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 233,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L233"
						}
					],
					"type": {
						"type": "literal",
						"value": "LOAD_FAILED"
					}
				},
				{
					"id": 1531,
					"name": "NoMatches",
					"kind": 16,
					"kindString": "Enumeration Member",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 232,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L232"
						}
					],
					"type": {
						"type": "literal",
						"value": "NO_MATCHES"
					}
				},
				{
					"id": 1529,
					"name": "PlaylistLoaded",
					"kind": 16,
					"kindString": "Enumeration Member",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 230,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L230"
						}
					],
					"type": {
						"type": "literal",
						"value": "PLAYLIST_LOADED"
					}
				},
				{
					"id": 1530,
					"name": "SearchResults",
					"kind": 16,
					"kindString": "Enumeration Member",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 231,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L231"
						}
					],
					"type": {
						"type": "literal",
						"value": "SEARCH_RESULT"
					}
				},
				{
					"id": 1528,
					"name": "TrackLoaded",
					"kind": 16,
					"kindString": "Enumeration Member",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 229,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L229"
						}
					],
					"type": {
						"type": "literal",
						"value": "TRACK_LOADED"
					}
				}
			],
			"groups": [
				{
					"title": "Enumeration Members",
					"children": [
						1532,
						1531,
						1529,
						1530,
						1528
					]
				}
			],
			"sources": [
				{
					"fileName": "src/interfaces/Rest.interface.ts",
					"line": 228,
					"character": 12,
					"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L228"
				}
			]
		},
		{
			"id": 1474,
			"name": "RestSeverity",
			"kind": 8,
			"kindString": "Enumeration",
			"flags": {},
			"children": [
				{
					"id": 1475,
					"name": "Common",
					"kind": 16,
					"kindString": "Enumeration Member",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The cause is known and expected, indicates that there is nothing wrong with the library itself"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 40,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L40"
						}
					],
					"type": {
						"type": "literal",
						"value": "COMMON"
					}
				},
				{
					"id": 1477,
					"name": "Fault",
					"kind": 16,
					"kindString": "Enumeration Member",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "If the probable cause is an issue with the library or when there is no way to tell what the cause might be. This is the default level and other levels are used in cases where the thrower has more in-depth knowledge about the error"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 48,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L48"
						}
					],
					"type": {
						"type": "literal",
						"value": "FAULT"
					}
				},
				{
					"id": 1476,
					"name": "Suspicous",
					"kind": 16,
					"kindString": "Enumeration Member",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The cause might not be exactly known, but is possibly caused by outside factors. For example when an outside service responds in a format that we do not expect"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 44,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L44"
						}
					],
					"type": {
						"type": "literal",
						"value": "SUSPICIOUS"
					}
				}
			],
			"groups": [
				{
					"title": "Enumeration Members",
					"children": [
						1475,
						1477,
						1476
					]
				}
			],
			"sources": [
				{
					"fileName": "src/interfaces/Rest.interface.ts",
					"line": 36,
					"character": 12,
					"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L36"
				}
			]
		},
		{
			"id": 1464,
			"name": "SearchFrom",
			"kind": 8,
			"kindString": "Enumeration",
			"flags": {},
			"children": [
				{
					"id": 1466,
					"name": "SoundCloud",
					"kind": 16,
					"kindString": "Enumeration Member",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 5,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L5"
						}
					],
					"type": {
						"type": "literal",
						"value": "scsearch:"
					}
				},
				{
					"id": 1465,
					"name": "YouTube",
					"kind": 16,
					"kindString": "Enumeration Member",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 4,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L4"
						}
					],
					"type": {
						"type": "literal",
						"value": "ytsearch:"
					}
				},
				{
					"id": 1467,
					"name": "YouTubeMusic",
					"kind": 16,
					"kindString": "Enumeration Member",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 6,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L6"
						}
					],
					"type": {
						"type": "literal",
						"value": "ytmsearch:"
					}
				}
			],
			"groups": [
				{
					"title": "Enumeration Members",
					"children": [
						1466,
						1465,
						1467
					]
				}
			],
			"sources": [
				{
					"fileName": "src/interfaces/Rest.interface.ts",
					"line": 3,
					"character": 12,
					"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L3"
				}
			]
		},
		{
			"id": 1666,
			"name": "TrackEndReason",
			"kind": 8,
			"kindString": "Enumeration",
			"flags": {},
			"children": [
				{
					"id": 1671,
					"name": "Cleanup",
					"kind": 16,
					"kindString": "Enumeration Member",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Socket.interface.ts",
							"line": 38,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L38"
						}
					],
					"type": {
						"type": "literal",
						"value": "CLEANUP"
					}
				},
				{
					"id": 1667,
					"name": "Finished",
					"kind": 16,
					"kindString": "Enumeration Member",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Socket.interface.ts",
							"line": 34,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L34"
						}
					],
					"type": {
						"type": "literal",
						"value": "FINISHED"
					}
				},
				{
					"id": 1668,
					"name": "LoadFailed",
					"kind": 16,
					"kindString": "Enumeration Member",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Socket.interface.ts",
							"line": 35,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L35"
						}
					],
					"type": {
						"type": "literal",
						"value": "LOAD_FAILED"
					}
				},
				{
					"id": 1670,
					"name": "Replaced",
					"kind": 16,
					"kindString": "Enumeration Member",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Socket.interface.ts",
							"line": 37,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L37"
						}
					],
					"type": {
						"type": "literal",
						"value": "REPLACED"
					}
				},
				{
					"id": 1669,
					"name": "Stopped",
					"kind": 16,
					"kindString": "Enumeration Member",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Socket.interface.ts",
							"line": 36,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L36"
						}
					],
					"type": {
						"type": "literal",
						"value": "STOPPED"
					}
				}
			],
			"groups": [
				{
					"title": "Enumeration Members",
					"children": [
						1671,
						1667,
						1668,
						1670,
						1669
					]
				}
			],
			"sources": [
				{
					"fileName": "src/interfaces/Socket.interface.ts",
					"line": 33,
					"character": 12,
					"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L33"
				}
			]
		},
		{
			"id": 1654,
			"name": "TrackExceptionSeverity",
			"kind": 8,
			"kindString": "Enumeration",
			"flags": {},
			"children": [
				{
					"id": 1655,
					"name": "Common",
					"kind": 16,
					"kindString": "Enumeration Member",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Socket.interface.ts",
							"line": 18,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L18"
						}
					],
					"type": {
						"type": "literal",
						"value": "COMMON"
					}
				},
				{
					"id": 1657,
					"name": "Fault",
					"kind": 16,
					"kindString": "Enumeration Member",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Socket.interface.ts",
							"line": 20,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L20"
						}
					],
					"type": {
						"type": "literal",
						"value": "FAULT"
					}
				},
				{
					"id": 1656,
					"name": "Suspected",
					"kind": 16,
					"kindString": "Enumeration Member",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Socket.interface.ts",
							"line": 19,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L19"
						}
					],
					"type": {
						"type": "literal",
						"value": "SUSPICIOUS"
					}
				}
			],
			"groups": [
				{
					"title": "Enumeration Members",
					"children": [
						1655,
						1657,
						1656
					]
				}
			],
			"sources": [
				{
					"fileName": "src/interfaces/Socket.interface.ts",
					"line": 17,
					"character": 12,
					"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L17"
				}
			]
		},
		{
			"id": 233,
			"name": "CosmiNode",
			"kind": 128,
			"kindString": "Class",
			"flags": {},
			"children": [
				{
					"id": 274,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {},
					"sources": [
						{
							"fileName": "src/lib/CosmiNode.ts",
							"line": 92,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiNode.ts#L92"
						}
					],
					"signatures": [
						{
							"id": 275,
							"name": "new CosmiNode",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Creates a new node."
									}
								]
							},
							"parameters": [
								{
									"id": 276,
									"name": "manager",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1,
										"name": "Cosmicord"
									}
								},
								{
									"id": 277,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1433,
										"name": "CosmiNodeOptions"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 233,
								"name": "CosmiNode"
							}
						}
					]
				},
				{
					"id": 302,
					"name": "calls",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The amount of calls made to the node."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiNode.ts",
							"line": 68,
							"character": 9,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiNode.ts#L68"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "0"
				},
				{
					"id": 308,
					"name": "clientId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPublic": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The client id of the bot"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiNode.ts",
							"line": 86,
							"character": 9,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiNode.ts#L86"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 300,
					"name": "connected",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Whether the node is connected or not."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiNode.ts",
							"line": 47,
							"character": 9,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiNode.ts#L47"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"defaultValue": "false"
				},
				{
					"id": 291,
					"name": "host",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The host for the node."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiNode.ts",
							"line": 20,
							"character": 9,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiNode.ts#L20"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 295,
					"name": "identifier",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The identifier for the node."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiNode.ts",
							"line": 32,
							"character": 9,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiNode.ts#L32"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"Cosmicord\""
				},
				{
					"id": 309,
					"name": "isReady",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Whether the node is ready or not."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiNode.ts",
							"line": 89,
							"character": 9,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiNode.ts#L89"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"defaultValue": "false"
				},
				{
					"id": 306,
					"name": "manager",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The manager of the node"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiNode.ts",
							"line": 80,
							"character": 9,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiNode.ts#L80"
						}
					],
					"type": {
						"type": "reference",
						"id": 1,
						"name": "Cosmicord"
					}
				},
				{
					"id": 293,
					"name": "password",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The password for the node."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiNode.ts",
							"line": 26,
							"character": 9,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiNode.ts#L26"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"youshallnotpass\""
				},
				{
					"id": 307,
					"name": "players",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Players of the node."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiNode.ts",
							"line": 83,
							"character": 9,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiNode.ts#L83"
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "reference",
								"id": 904,
								"name": "CosmiPlayer"
							}
						],
						"name": "Collection",
						"qualifiedName": "Collection",
						"package": "@discordjs/collection"
					}
				},
				{
					"id": 292,
					"name": "port",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The port for the node."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiNode.ts",
							"line": 23,
							"character": 9,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiNode.ts#L23"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "2333"
				},
				{
					"id": 299,
					"name": "requestTimeout",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The request timeout for the node."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiNode.ts",
							"line": 44,
							"character": 9,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiNode.ts#L44"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "10000"
				},
				{
					"id": 305,
					"name": "rest",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The rest client for the node."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiNode.ts",
							"line": 77,
							"character": 9,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiNode.ts#L77"
						}
					],
					"type": {
						"type": "reference",
						"id": 148,
						"name": "CosmiREST"
					}
				},
				{
					"id": 297,
					"name": "retries",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPrivate": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The amount of retries made for the node."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiNode.ts",
							"line": 38,
							"character": 10,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiNode.ts#L38"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "0"
				},
				{
					"id": 296,
					"name": "retryAmount",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The amount of retries for the node."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiNode.ts",
							"line": 35,
							"character": 9,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiNode.ts#L35"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "5"
				},
				{
					"id": 298,
					"name": "retryDelay",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The delay for the node."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiNode.ts",
							"line": 41,
							"character": 9,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiNode.ts#L41"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "5000"
				},
				{
					"id": 294,
					"name": "secure",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Whether the node is secure or not."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiNode.ts",
							"line": 29,
							"character": 9,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiNode.ts#L29"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"defaultValue": "false"
				},
				{
					"id": 303,
					"name": "socket",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The socket for the node."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiNode.ts",
							"line": 71,
							"character": 9,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiNode.ts#L71"
						}
					],
					"type": {
						"type": "reference",
						"id": 381,
						"name": "CosmiSocket"
					}
				},
				{
					"id": 301,
					"name": "stats",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The stats for the node."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiNode.ts",
							"line": 50,
							"character": 9,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiNode.ts#L50"
						}
					],
					"type": {
						"type": "reference",
						"id": 1442,
						"name": "NodeStats"
					},
					"defaultValue": "..."
				},
				{
					"id": 304,
					"name": "version",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPublic": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The version for the node."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiNode.ts",
							"line": 74,
							"character": 9,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiNode.ts#L74"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 271,
					"name": "captureRejectionSymbol",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isStatic": true,
						"isExternal": true,
						"isReadonly": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 328,
							"character": 24
						}
					],
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"id": 39,
							"name": "captureRejectionSymbol",
							"qualifiedName": "EventEmitter.captureRejectionSymbol",
							"package": "@types/node"
						}
					}
				},
				{
					"id": 272,
					"name": "captureRejections",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "TODO: These should be described using static getter/setter pairs:"
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 333,
							"character": 15
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 273,
					"name": "defaultMaxListeners",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 334,
							"character": 15
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 270,
					"name": "errorMonitor",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isStatic": true,
						"isExternal": true,
						"isReadonly": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "This symbol shall be used to install a listener for only monitoring "
							},
							{
								"kind": "code",
								"text": "`'error'`"
							},
							{
								"kind": "text",
								"text": "\nevents. Listeners installed using this symbol are called before the regular\n"
							},
							{
								"kind": "code",
								"text": "`'error'`"
							},
							{
								"kind": "text",
								"text": " listeners are called.\n\nInstalling a listener using this symbol does not change the behavior once an\n"
							},
							{
								"kind": "code",
								"text": "`'error'`"
							},
							{
								"kind": "text",
								"text": " event is emitted, therefore the process will still crash if no\nregular "
							},
							{
								"kind": "code",
								"text": "`'error'`"
							},
							{
								"kind": "text",
								"text": " listener is installed."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 327,
							"character": 24
						}
					],
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"id": 38,
							"name": "errorMonitor",
							"qualifiedName": "EventEmitter.errorMonitor",
							"package": "@types/node"
						}
					}
				},
				{
					"id": 312,
					"name": "url",
					"kind": 262144,
					"kindString": "Accessor",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiNode.ts",
							"line": 137,
							"character": 13,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiNode.ts#L137"
						}
					],
					"getSignature": {
						"id": 313,
						"name": "url",
						"kind": 524288,
						"kindString": "Get signature",
						"flags": {},
						"comment": {
							"summary": [
								{
									"kind": "text",
									"text": "Get the url for the node."
								}
							]
						},
						"type": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				},
				{
					"id": 320,
					"name": "addListener",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 354,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 321,
							"name": "addListener",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Alias for "
									},
									{
										"kind": "code",
										"text": "`emitter.on(eventName, listener)`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.1.26"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 322,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 323,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 324,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/node/events.d.ts",
													"line": 354,
													"character": 66
												}
											],
											"signatures": [
												{
													"id": 325,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 326,
															"name": "args",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 233,
								"name": "CosmiNode"
							}
						}
					]
				},
				{
					"id": 314,
					"name": "connect",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiNode.ts",
							"line": 142,
							"character": 9,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiNode.ts#L142"
						}
					],
					"signatures": [
						{
							"id": 315,
							"name": "connect",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Connects to the node."
									}
								]
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 310,
					"name": "connectSocket",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiNode.ts",
							"line": 109,
							"character": 9,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiNode.ts#L109"
						}
					],
					"signatures": [
						{
							"id": 311,
							"name": "connectSocket",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Connect to the node with websocket."
									}
								]
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 316,
					"name": "destroy",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiNode.ts",
							"line": 168,
							"character": 9,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiNode.ts#L168"
						}
					],
					"signatures": [
						{
							"id": 317,
							"name": "destroy",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Destroys the node."
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 286,
					"name": "emit",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/lib/CosmiNode.ts",
							"line": 12,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiNode.ts#L12"
						}
					],
					"signatures": [
						{
							"id": 287,
							"name": "emit",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"typeParameter": [
								{
									"id": 288,
									"name": "Key",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "typeOperator",
										"operator": "keyof",
										"target": {
											"type": "reference",
											"id": 1427,
											"name": "NodeEvents"
										}
									}
								}
							],
							"parameters": [
								{
									"id": 289,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 288,
										"name": "Key"
									}
								},
								{
									"id": 290,
									"name": "args",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isRest": true
									},
									"type": {
										"type": "indexedAccess",
										"indexType": {
											"type": "reference",
											"id": 288,
											"name": "Key"
										},
										"objectType": {
											"type": "reference",
											"id": 1427,
											"name": "NodeEvents"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					]
				},
				{
					"id": 379,
					"name": "eventNames",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 669,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 380,
							"name": "eventNames",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns an array listing the events for which the emitter has registered\nlisteners. The values in the array are strings or "
									},
									{
										"kind": "code",
										"text": "`Symbol`"
									},
									{
										"kind": "text",
										"text": "s.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nconst EventEmitter = require('events');\nconst myEE = new EventEmitter();\nmyEE.on('foo', () => {});\nmyEE.on('bar', () => {});\n\nconst sym = Symbol('symbol');\nmyEE.on(sym, () => {});\n\nconsole.log(myEE.eventNames());\n// Prints: [ 'foo', 'bar', Symbol(symbol) ]\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v6.0.0"
											}
										]
									}
								]
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "union",
									"types": [
										{
											"type": "intrinsic",
											"name": "string"
										},
										{
											"type": "intrinsic",
											"name": "symbol"
										}
									]
								}
							}
						}
					]
				},
				{
					"id": 354,
					"name": "getMaxListeners",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 526,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 355,
							"name": "getMaxListeners",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns the current max listener value for the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " which is either\nset by "
									},
									{
										"kind": "code",
										"text": "`emitter.setMaxListeners(n)`"
									},
									{
										"kind": "text",
										"text": " or defaults to "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "defaultMaxListeners",
										"target": 273
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v1.0.0"
											}
										]
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 362,
					"name": "listenerCount",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 616,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 363,
							"name": "listenerCount",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns the number of listeners listening to the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v3.2.0"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 364,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the event being listened for"
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 356,
					"name": "listeners",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 539,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 357,
							"name": "listeners",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns a copy of the array of listeners for the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ".\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nserver.on('connection', (stream) => {\n  console.log('someone connected!');\n});\nconsole.log(util.inspect(server.listeners('connection')));\n// Prints: [ [Function] ]\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.1.26"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 358,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "Function",
									"qualifiedName": "Function",
									"package": "typescript"
								}
							}
						}
					]
				},
				{
					"id": 341,
					"name": "off",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 499,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 342,
							"name": "off",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Alias for "
									},
									{
										"kind": "code",
										"text": "`emitter.removeListener()`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v10.0.0"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 343,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 344,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 345,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/node/events.d.ts",
													"line": 499,
													"character": 58
												}
											],
											"signatures": [
												{
													"id": 346,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 347,
															"name": "args",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 233,
								"name": "CosmiNode"
							}
						}
					]
				},
				{
					"id": 278,
					"name": "on",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/lib/CosmiNode.ts",
							"line": 7,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiNode.ts#L7"
						}
					],
					"signatures": [
						{
							"id": 279,
							"name": "on",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"typeParameter": [
								{
									"id": 280,
									"name": "Key",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "typeOperator",
										"operator": "keyof",
										"target": {
											"type": "reference",
											"id": 1427,
											"name": "NodeEvents"
										}
									}
								}
							],
							"parameters": [
								{
									"id": 281,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 280,
										"name": "Key"
									}
								},
								{
									"id": 282,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 283,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"sources": [
												{
													"fileName": "src/lib/CosmiNode.ts",
													"line": 9,
													"character": 14,
													"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiNode.ts#L9"
												}
											],
											"signatures": [
												{
													"id": 284,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 285,
															"name": "args",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isRest": true
															},
															"type": {
																"type": "indexedAccess",
																"indexType": {
																	"type": "reference",
																	"id": 280,
																	"name": "Key"
																},
																"objectType": {
																	"type": "reference",
																	"id": 1427,
																	"name": "NodeEvents"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 233,
								"name": "CosmiNode"
							}
						}
					]
				},
				{
					"id": 327,
					"name": "once",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 414,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 328,
							"name": "once",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Adds a **one-time**"
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " function for the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ". The\nnext time "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": " is triggered, this listener is removed and then invoked.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nserver.once('connection', (stream) => {\n  console.log('Ah, we have our first user!');\n});\n```"
									},
									{
										"kind": "text",
										"text": "\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained.\n\nBy default, event listeners are invoked in the order they are added. The"
									},
									{
										"kind": "code",
										"text": "`emitter.prependOnceListener()`"
									},
									{
										"kind": "text",
										"text": " method can be used as an alternative to add the\nevent listener to the beginning of the listeners array.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nconst myEE = new EventEmitter();\nmyEE.once('foo', () => console.log('a'));\nmyEE.prependOnceListener('foo', () => console.log('b'));\nmyEE.emit('foo');\n// Prints:\n//   b\n//   a\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.3.0"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 329,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the event."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 330,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The callback function"
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 331,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/node/events.d.ts",
													"line": 414,
													"character": 59
												}
											],
											"signatures": [
												{
													"id": 332,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 333,
															"name": "args",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 233,
								"name": "CosmiNode"
							}
						}
					]
				},
				{
					"id": 365,
					"name": "prependListener",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 634,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 366,
							"name": "prependListener",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Adds the "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " function to the _beginning_ of the listeners array for the\nevent named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ". No checks are made to see if the "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " has\nalready been added. Multiple calls passing the same combination of "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": "and "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " will result in the "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " being added, and called, multiple\ntimes.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nserver.prependListener('connection', (stream) => {\n  console.log('someone connected!');\n});\n```"
									},
									{
										"kind": "text",
										"text": "\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v6.0.0"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 367,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the event."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 368,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The callback function"
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 369,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/node/events.d.ts",
													"line": 634,
													"character": 70
												}
											],
											"signatures": [
												{
													"id": 370,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 371,
															"name": "args",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 233,
								"name": "CosmiNode"
							}
						}
					]
				},
				{
					"id": 372,
					"name": "prependOnceListener",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 650,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 373,
							"name": "prependOnceListener",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Adds a **one-time**"
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " function for the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": " to the _beginning_ of the listeners array. The next time "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": " is triggered, this\nlistener is removed, and then invoked.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nserver.prependOnceListener('connection', (stream) => {\n  console.log('Ah, we have our first user!');\n});\n```"
									},
									{
										"kind": "text",
										"text": "\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v6.0.0"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 374,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the event."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 375,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The callback function"
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 376,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/node/events.d.ts",
													"line": 650,
													"character": 74
												}
											],
											"signatures": [
												{
													"id": 377,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 378,
															"name": "args",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 233,
								"name": "CosmiNode"
							}
						}
					]
				},
				{
					"id": 359,
					"name": "rawListeners",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 569,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 360,
							"name": "rawListeners",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns a copy of the array of listeners for the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ",\nincluding any wrappers (such as those created by "
									},
									{
										"kind": "code",
										"text": "`.once()`"
									},
									{
										"kind": "text",
										"text": ").\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nconst emitter = new EventEmitter();\nemitter.once('log', () => console.log('log once'));\n\n// Returns a new Array with a function `onceWrapper` which has a property\n// `listener` which contains the original listener bound above\nconst listeners = emitter.rawListeners('log');\nconst logFnWrapper = listeners[0];\n\n// Logs \"log once\" to the console and does not unbind the `once` event\nlogFnWrapper.listener();\n\n// Logs \"log once\" to the console and removes the listener\nlogFnWrapper();\n\nemitter.on('log', () => console.log('log persistently'));\n// Will return a new Array with a single function bound by `.on()` above\nconst newListeners = emitter.rawListeners('log');\n\n// Logs \"log persistently\" twice\nnewListeners[0]();\nemitter.emit('log');\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v9.4.0"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 361,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "Function",
									"qualifiedName": "Function",
									"package": "typescript"
								}
							}
						}
					]
				},
				{
					"id": 318,
					"name": "reconnect",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiNode.ts",
							"line": 180,
							"character": 9,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiNode.ts#L180"
						}
					],
					"signatures": [
						{
							"id": 319,
							"name": "reconnect",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Reconnects to the node."
									}
								]
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 348,
					"name": "removeAllListeners",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 510,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 349,
							"name": "removeAllListeners",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Removes all listeners, or those of the specified "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ".\n\nIt is bad practice to remove listeners added elsewhere in the code,\nparticularly when the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " instance was created by some other\ncomponent or module (e.g. sockets or file streams).\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.1.26"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 350,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 233,
								"name": "CosmiNode"
							}
						}
					]
				},
				{
					"id": 334,
					"name": "removeListener",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 494,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 335,
							"name": "removeListener",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Removes the specified "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " from the listener array for the event named"
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ".\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nconst callback = (stream) => {\n  console.log('someone connected!');\n};\nserver.on('connection', callback);\n// ...\nserver.removeListener('connection', callback);\n```"
									},
									{
										"kind": "text",
										"text": "\n\n"
									},
									{
										"kind": "code",
										"text": "`removeListener()`"
									},
									{
										"kind": "text",
										"text": " will remove, at most, one instance of a listener from the\nlistener array. If any single listener has been added multiple times to the\nlistener array for the specified "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ", then "
									},
									{
										"kind": "code",
										"text": "`removeListener()`"
									},
									{
										"kind": "text",
										"text": " must be\ncalled multiple times to remove each instance.\n\nOnce an event is emitted, all listeners attached to it at the\ntime of emitting are called in order. This implies that any"
									},
									{
										"kind": "code",
										"text": "`removeListener()`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`removeAllListeners()`"
									},
									{
										"kind": "text",
										"text": " calls _after_ emitting and _before_ the last listener finishes execution\nwill not remove them from"
									},
									{
										"kind": "code",
										"text": "`emit()`"
									},
									{
										"kind": "text",
										"text": " in progress. Subsequent events behave as expected.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nconst myEmitter = new MyEmitter();\n\nconst callbackA = () => {\n  console.log('A');\n  myEmitter.removeListener('event', callbackB);\n};\n\nconst callbackB = () => {\n  console.log('B');\n};\n\nmyEmitter.on('event', callbackA);\n\nmyEmitter.on('event', callbackB);\n\n// callbackA removes listener callbackB but it will still be called.\n// Internal listener array at time of emit [callbackA, callbackB]\nmyEmitter.emit('event');\n// Prints:\n//   A\n//   B\n\n// callbackB is now removed.\n// Internal listener array [callbackA]\nmyEmitter.emit('event');\n// Prints:\n//   A\n```"
									},
									{
										"kind": "text",
										"text": "\n\nBecause listeners are managed using an internal array, calling this will\nchange the position indices of any listener registered _after_ the listener\nbeing removed. This will not impact the order in which listeners are called,\nbut it means that any copies of the listener array as returned by\nthe "
									},
									{
										"kind": "code",
										"text": "`emitter.listeners()`"
									},
									{
										"kind": "text",
										"text": " method will need to be recreated.\n\nWhen a single function has been added as a handler multiple times for a single\nevent (as in the example below), "
									},
									{
										"kind": "code",
										"text": "`removeListener()`"
									},
									{
										"kind": "text",
										"text": " will remove the most\nrecently added instance. In the example the "
									},
									{
										"kind": "code",
										"text": "`once('ping')`"
									},
									{
										"kind": "text",
										"text": "listener is removed:\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nconst ee = new EventEmitter();\n\nfunction pong() {\n  console.log('pong');\n}\n\nee.on('ping', pong);\nee.once('ping', pong);\nee.removeListener('ping', pong);\n\nee.emit('ping');\nee.emit('ping');\n```"
									},
									{
										"kind": "text",
										"text": "\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.1.26"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 336,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 337,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 338,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/node/events.d.ts",
													"line": 494,
													"character": 69
												}
											],
											"signatures": [
												{
													"id": 339,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 340,
															"name": "args",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 233,
								"name": "CosmiNode"
							}
						}
					]
				},
				{
					"id": 351,
					"name": "setMaxListeners",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 520,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 352,
							"name": "setMaxListeners",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "By default "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": "s will print a warning if more than "
									},
									{
										"kind": "code",
										"text": "`10`"
									},
									{
										"kind": "text",
										"text": " listeners are\nadded for a particular event. This is a useful default that helps finding\nmemory leaks. The "
									},
									{
										"kind": "code",
										"text": "`emitter.setMaxListeners()`"
									},
									{
										"kind": "text",
										"text": " method allows the limit to be\nmodified for this specific "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " instance. The value can be set to"
									},
									{
										"kind": "code",
										"text": "`Infinity`"
									},
									{
										"kind": "text",
										"text": " (or "
									},
									{
										"kind": "code",
										"text": "`0`"
									},
									{
										"kind": "text",
										"text": ") to indicate an unlimited number of listeners.\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.3.5"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 353,
									"name": "n",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 233,
								"name": "CosmiNode"
							}
						}
					]
				},
				{
					"id": 262,
					"name": "getEventListeners",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 299,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 263,
							"name": "getEventListeners",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns a copy of the array of listeners for the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ".\n\nFor "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": "s this behaves exactly the same as calling "
									},
									{
										"kind": "code",
										"text": "`.listeners`"
									},
									{
										"kind": "text",
										"text": " on\nthe emitter.\n\nFor "
									},
									{
										"kind": "code",
										"text": "`EventTarget`"
									},
									{
										"kind": "text",
										"text": "s this is the only way to get the event listeners for the\nevent target. This is useful for debugging and diagnostic purposes.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nconst { getEventListeners, EventEmitter } = require('events');\n\n{\n  const ee = new EventEmitter();\n  const listener = () => console.log('Events are fun');\n  ee.on('foo', listener);\n  getEventListeners(ee, 'foo'); // [listener]\n}\n{\n  const et = new EventTarget();\n  const listener = () => console.log('Events are fun');\n  et.addEventListener('foo', listener);\n  getEventListeners(et, 'foo'); // [listener]\n}\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v15.2.0, v14.17.0"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 264,
									"name": "emitter",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "EventEmitter",
												"qualifiedName": "global.NodeJS.EventEmitter",
												"package": "@types/node"
											},
											{
												"type": "reference",
												"name": "_DOMEventTarget",
												"qualifiedName": "_DOMEventTarget",
												"package": "@types/node"
											}
										]
									}
								},
								{
									"id": 265,
									"name": "name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "Function",
									"qualifiedName": "Function",
									"package": "typescript"
								}
							}
						}
					]
				},
				{
					"id": 258,
					"name": "listenerCount",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 271,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 259,
							"name": "listenerCount",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "A class method that returns the number of listeners for the given "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": "registered on the given "
									},
									{
										"kind": "code",
										"text": "`emitter`"
									},
									{
										"kind": "text",
										"text": ".\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nconst { EventEmitter, listenerCount } = require('events');\nconst myEmitter = new EventEmitter();\nmyEmitter.on('event', () => {});\nmyEmitter.on('event', () => {});\nconsole.log(listenerCount(myEmitter, 'event'));\n// Prints: 2\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.9.12"
											}
										]
									},
									{
										"tag": "@deprecated",
										"content": [
											{
												"kind": "text",
												"text": "Since v3.2.0 - Use "
											},
											{
												"kind": "code",
												"text": "`listenerCount`"
											},
											{
												"kind": "text",
												"text": " instead."
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 260,
									"name": "emitter",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The emitter to query"
											}
										]
									},
									"type": {
										"type": "reference",
										"name": "EventEmitter",
										"qualifiedName": "global.NodeJS.EventEmitter",
										"package": "@types/node"
									}
								},
								{
									"id": 261,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The event name"
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 248,
					"name": "on",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 254,
							"character": 15
						},
						{
							"fileName": "node_modules/discord.js/typings/index.d.ts",
							"line": 229,
							"character": 18
						}
					],
					"signatures": [
						{
							"id": 249,
							"name": "on",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "code",
										"text": "```js\nconst { on, EventEmitter } = require('events');\n\n(async () => {\n  const ee = new EventEmitter();\n\n  // Emit later on\n  process.nextTick(() => {\n    ee.emit('foo', 'bar');\n    ee.emit('foo', 42);\n  });\n\n  for await (const event of on(ee, 'foo')) {\n    // The execution of this inner block is synchronous and it\n    // processes one event at a time (even with await). Do not use\n    // if concurrent execution is required.\n    console.log(event); // prints ['bar'] [42]\n  }\n  // Unreachable here\n})();\n```"
									},
									{
										"kind": "text",
										"text": "\n\nReturns an "
									},
									{
										"kind": "code",
										"text": "`AsyncIterator`"
									},
									{
										"kind": "text",
										"text": " that iterates "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": " events. It will throw\nif the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " emits "
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": ". It removes all listeners when\nexiting the loop. The "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " returned by each iteration is an array\ncomposed of the emitted event arguments.\n\nAn "
									},
									{
										"kind": "code",
										"text": "`AbortSignal`"
									},
									{
										"kind": "text",
										"text": " can be used to cancel waiting on events:\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nconst { on, EventEmitter } = require('events');\nconst ac = new AbortController();\n\n(async () => {\n  const ee = new EventEmitter();\n\n  // Emit later on\n  process.nextTick(() => {\n    ee.emit('foo', 'bar');\n    ee.emit('foo', 42);\n  });\n\n  for await (const event of on(ee, 'foo', { signal: ac.signal })) {\n    // The execution of this inner block is synchronous and it\n    // processes one event at a time (even with await). Do not use\n    // if concurrent execution is required.\n    console.log(event); // prints ['bar'] [42]\n  }\n  // Unreachable here\n})();\n\nprocess.nextTick(() => ac.abort());\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v13.6.0, v12.16.0"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "that iterates "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": " events emitted by the "
											},
											{
												"kind": "code",
												"text": "`emitter`"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 250,
									"name": "emitter",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"name": "EventEmitter",
										"qualifiedName": "global.NodeJS.EventEmitter",
										"package": "@types/node"
									}
								},
								{
									"id": 251,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the event being listened for"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 252,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"name": "StaticEventEmitterOptions",
										"qualifiedName": "StaticEventEmitterOptions",
										"package": "@types/node"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "AsyncIterableIterator",
								"qualifiedName": "AsyncIterableIterator",
								"package": "typescript"
							}
						},
						{
							"id": 253,
							"name": "on",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"typeParameter": [
								{
									"id": 254,
									"name": "E",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"name": "__module",
										"qualifiedName": "EventEmitter",
										"package": "@types/node"
									}
								},
								{
									"id": 255,
									"name": "K",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "typeOperator",
										"operator": "keyof",
										"target": {
											"type": "reference",
											"name": "ClientEvents",
											"qualifiedName": "ClientEvents",
											"package": "discord.js"
										}
									}
								}
							],
							"parameters": [
								{
									"id": 256,
									"name": "eventEmitter",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"id": 22,
										"name": "E",
										"qualifiedName": "E",
										"package": "discord.js"
									}
								},
								{
									"id": 257,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "conditional",
										"checkType": {
											"type": "reference",
											"id": 22,
											"name": "E",
											"qualifiedName": "E",
											"package": "discord.js"
										},
										"extendsType": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "intrinsic",
													"name": "boolean"
												}
											],
											"name": "Client",
											"qualifiedName": "Client",
											"package": "discord.js"
										},
										"trueType": {
											"type": "reference",
											"id": 23,
											"name": "K",
											"qualifiedName": "K",
											"package": "discord.js"
										},
										"falseType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "conditional",
										"checkType": {
											"type": "reference",
											"id": 22,
											"name": "E",
											"qualifiedName": "E",
											"package": "discord.js"
										},
										"extendsType": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "intrinsic",
													"name": "boolean"
												}
											],
											"name": "Client",
											"qualifiedName": "Client",
											"package": "discord.js"
										},
										"trueType": {
											"type": "indexedAccess",
											"indexType": {
												"type": "reference",
												"id": 23,
												"name": "K",
												"qualifiedName": "K",
												"package": "discord.js"
											},
											"objectType": {
												"type": "reference",
												"name": "ClientEvents",
												"qualifiedName": "ClientEvents",
												"package": "discord.js"
											}
										},
										"falseType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								],
								"name": "AsyncIterableIterator",
								"qualifiedName": "AsyncIterableIterator",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 234,
					"name": "once",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 194,
							"character": 15
						},
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 195,
							"character": 15
						},
						{
							"fileName": "node_modules/discord.js/typings/index.d.ts",
							"line": 225,
							"character": 18
						}
					],
					"signatures": [
						{
							"id": 235,
							"name": "once",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Creates a "
									},
									{
										"kind": "code",
										"text": "`Promise`"
									},
									{
										"kind": "text",
										"text": " that is fulfilled when the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " emits the given\nevent or that is rejected if the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " emits "
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": " while waiting.\nThe "
									},
									{
										"kind": "code",
										"text": "`Promise`"
									},
									{
										"kind": "text",
										"text": " will resolve with an array of all the arguments emitted to the\ngiven event.\n\nThis method is intentionally generic and works with the web platform [EventTarget](https://dom.spec.whatwg.org/#interface-eventtarget) interface, which has no special"
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": " event\nsemantics and does not listen to the "
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": " event.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nconst { once, EventEmitter } = require('events');\n\nasync function run() {\n  const ee = new EventEmitter();\n\n  process.nextTick(() => {\n    ee.emit('myevent', 42);\n  });\n\n  const [value] = await once(ee, 'myevent');\n  console.log(value);\n\n  const err = new Error('kaboom');\n  process.nextTick(() => {\n    ee.emit('error', err);\n  });\n\n  try {\n    await once(ee, 'myevent');\n  } catch (err) {\n    console.log('error happened', err);\n  }\n}\n\nrun();\n```"
									},
									{
										"kind": "text",
										"text": "\n\nThe special handling of the "
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": " event is only used when "
									},
									{
										"kind": "code",
										"text": "`events.once()`"
									},
									{
										"kind": "text",
										"text": "is used to wait for another event. If "
									},
									{
										"kind": "code",
										"text": "`events.once()`"
									},
									{
										"kind": "text",
										"text": " is used to wait for the\n'"
									},
									{
										"kind": "code",
										"text": "`error'`"
									},
									{
										"kind": "text",
										"text": " event itself, then it is treated as any other kind of event without\nspecial handling:\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nconst { EventEmitter, once } = require('events');\n\nconst ee = new EventEmitter();\n\nonce(ee, 'error')\n  .then(([err]) => console.log('ok', err.message))\n  .catch((err) => console.log('error', err.message));\n\nee.emit('error', new Error('boom'));\n\n// Prints: ok boom\n```"
									},
									{
										"kind": "text",
										"text": "\n\nAn "
									},
									{
										"kind": "code",
										"text": "`AbortSignal`"
									},
									{
										"kind": "text",
										"text": " can be used to cancel waiting for the event:\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nconst { EventEmitter, once } = require('events');\n\nconst ee = new EventEmitter();\nconst ac = new AbortController();\n\nasync function foo(emitter, event, signal) {\n  try {\n    await once(emitter, event, { signal });\n    console.log('event emitted!');\n  } catch (error) {\n    if (error.name === 'AbortError') {\n      console.error('Waiting for the event was canceled!');\n    } else {\n      console.error('There was an error', error.message);\n    }\n  }\n}\n\nfoo(ee, 'foo', ac.signal);\nac.abort(); // Abort waiting for the event\nee.emit('foo'); // Prints: Waiting for the event was canceled!\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v11.13.0, v10.16.0"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 236,
									"name": "emitter",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"name": "_NodeEventTarget",
										"qualifiedName": "_NodeEventTarget",
										"package": "@types/node"
									}
								},
								{
									"id": 237,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 238,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"name": "StaticEventEmitterOptions",
										"qualifiedName": "StaticEventEmitterOptions",
										"package": "@types/node"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							}
						},
						{
							"id": 239,
							"name": "once",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 240,
									"name": "emitter",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"name": "_DOMEventTarget",
										"qualifiedName": "_DOMEventTarget",
										"package": "@types/node"
									}
								},
								{
									"id": 241,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 242,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"name": "StaticEventEmitterOptions",
										"qualifiedName": "StaticEventEmitterOptions",
										"package": "@types/node"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							}
						},
						{
							"id": 243,
							"name": "once",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Add type overloads for client events."
									}
								]
							},
							"typeParameter": [
								{
									"id": 244,
									"name": "E",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"name": "__module",
										"qualifiedName": "EventEmitter",
										"package": "@types/node"
									}
								},
								{
									"id": 245,
									"name": "K",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "typeOperator",
										"operator": "keyof",
										"target": {
											"type": "reference",
											"name": "ClientEvents",
											"qualifiedName": "ClientEvents",
											"package": "discord.js"
										}
									}
								}
							],
							"parameters": [
								{
									"id": 246,
									"name": "eventEmitter",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"id": 12,
										"name": "E",
										"qualifiedName": "E",
										"package": "discord.js"
									}
								},
								{
									"id": 247,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "conditional",
										"checkType": {
											"type": "reference",
											"id": 12,
											"name": "E",
											"qualifiedName": "E",
											"package": "discord.js"
										},
										"extendsType": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "intrinsic",
													"name": "boolean"
												}
											],
											"name": "Client",
											"qualifiedName": "Client",
											"package": "discord.js"
										},
										"trueType": {
											"type": "reference",
											"id": 13,
											"name": "K",
											"qualifiedName": "K",
											"package": "discord.js"
										},
										"falseType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "conditional",
										"checkType": {
											"type": "reference",
											"id": 12,
											"name": "E",
											"qualifiedName": "E",
											"package": "discord.js"
										},
										"extendsType": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "intrinsic",
													"name": "boolean"
												}
											],
											"name": "Client",
											"qualifiedName": "Client",
											"package": "discord.js"
										},
										"trueType": {
											"type": "indexedAccess",
											"indexType": {
												"type": "reference",
												"id": 13,
												"name": "K",
												"qualifiedName": "K",
												"package": "discord.js"
											},
											"objectType": {
												"type": "reference",
												"name": "ClientEvents",
												"qualifiedName": "ClientEvents",
												"package": "discord.js"
											}
										},
										"falseType": {
											"type": "array",
											"elementType": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 266,
					"name": "setMaxListeners",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 317,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 267,
							"name": "setMaxListeners",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "code",
										"text": "```js\nconst {\n  setMaxListeners,\n  EventEmitter\n} = require('events');\n\nconst target = new EventTarget();\nconst emitter = new EventEmitter();\n\nsetMaxListeners(5, target, emitter);\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v15.4.0"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 268,
									"name": "n",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A non-negative number. The maximum number of listeners per "
											},
											{
												"kind": "code",
												"text": "`EventTarget`"
											},
											{
												"kind": "text",
												"text": " event."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 269,
									"name": "eventTargets",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isRest": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "union",
											"types": [
												{
													"type": "reference",
													"name": "EventEmitter",
													"qualifiedName": "global.NodeJS.EventEmitter",
													"package": "@types/node"
												},
												{
													"type": "reference",
													"name": "_DOMEventTarget",
													"qualifiedName": "_DOMEventTarget",
													"package": "@types/node"
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						274
					]
				},
				{
					"title": "Properties",
					"children": [
						302,
						308,
						300,
						291,
						295,
						309,
						306,
						293,
						307,
						292,
						299,
						305,
						297,
						296,
						298,
						294,
						303,
						301,
						304,
						271,
						272,
						273,
						270
					]
				},
				{
					"title": "Accessors",
					"children": [
						312
					]
				},
				{
					"title": "Methods",
					"children": [
						320,
						314,
						310,
						316,
						286,
						379,
						354,
						362,
						356,
						341,
						278,
						327,
						365,
						372,
						359,
						318,
						348,
						334,
						351,
						262,
						258,
						248,
						234,
						266
					]
				}
			],
			"sources": [
				{
					"fileName": "src/lib/CosmiNode.ts",
					"line": 6,
					"character": 17,
					"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiNode.ts#L6"
				},
				{
					"fileName": "src/lib/CosmiNode.ts",
					"line": 18,
					"character": 13,
					"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiNode.ts#L18"
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "EventEmitter",
					"qualifiedName": "EventEmitter",
					"package": "@types/node"
				}
			]
		},
		{
			"id": 904,
			"name": "CosmiPlayer",
			"kind": 128,
			"kindString": "Class",
			"flags": {},
			"children": [
				{
					"id": 945,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {},
					"sources": [
						{
							"fileName": "src/lib/CosmiPlayer.ts",
							"line": 53,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiPlayer.ts#L53"
						}
					],
					"signatures": [
						{
							"id": 946,
							"name": "new CosmiPlayer",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Creates a new player"
									}
								]
							},
							"parameters": [
								{
									"id": 947,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 233,
										"name": "CosmiNode"
									}
								},
								{
									"id": 948,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1627,
										"name": "CosmiPlayerOptions"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 904,
								"name": "CosmiPlayer"
							},
							"overwrites": {
								"type": "reference",
								"name": "EventEmitter.constructor"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "EventEmitter.constructor"
					}
				},
				{
					"id": 963,
					"name": "filters",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPublic": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Filters for the player."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiPlayer.ts",
							"line": 50,
							"character": 9,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiPlayer.ts#L50"
						}
					],
					"type": {
						"type": "reference",
						"id": 1616,
						"name": "Filters"
					}
				},
				{
					"id": 949,
					"name": "guildId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The guild id of the player."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiPlayer.ts",
							"line": 8,
							"character": 9,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiPlayer.ts#L8"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 951,
					"name": "loop",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Whether the player is playing or not."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiPlayer.ts",
							"line": 14,
							"character": 9,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiPlayer.ts#L14"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"defaultValue": "false"
				},
				{
					"id": 964,
					"name": "node",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiPlayer.ts",
							"line": 53,
							"character": 21,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiPlayer.ts#L53"
						}
					],
					"type": {
						"type": "reference",
						"id": 233,
						"name": "CosmiNode"
					}
				},
				{
					"id": 965,
					"name": "options",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiPlayer.ts",
							"line": 53,
							"character": 45,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiPlayer.ts#L53"
						}
					],
					"type": {
						"type": "reference",
						"id": 1627,
						"name": "CosmiPlayerOptions"
					}
				},
				{
					"id": 950,
					"name": "paused",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Whether the player is paused or not."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiPlayer.ts",
							"line": 11,
							"character": 9,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiPlayer.ts#L11"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"defaultValue": "false"
				},
				{
					"id": 952,
					"name": "playing",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Whether the player is playing or not."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiPlayer.ts",
							"line": 17,
							"character": 9,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiPlayer.ts#L17"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"defaultValue": "false"
				},
				{
					"id": 954,
					"name": "position",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Position of the current track."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiPlayer.ts",
							"line": 23,
							"character": 9,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiPlayer.ts#L23"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "0"
				},
				{
					"id": 953,
					"name": "queue",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Queue for the player."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiPlayer.ts",
							"line": 20,
							"character": 9,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiPlayer.ts#L20"
						}
					],
					"type": {
						"type": "reference",
						"id": 1090,
						"name": "CosmiQueue"
					},
					"defaultValue": "..."
				},
				{
					"id": 960,
					"name": "selfDeaf",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPublic": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Whether the player is self deafened or not."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiPlayer.ts",
							"line": 41,
							"character": 9,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiPlayer.ts#L41"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 959,
					"name": "selfMute",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPublic": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Whether the player is self muted or not."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiPlayer.ts",
							"line": 38,
							"character": 9,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiPlayer.ts#L38"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 956,
					"name": "sessionId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPublic": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Session Id of the player."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiPlayer.ts",
							"line": 29,
							"character": 9,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiPlayer.ts#L29"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 962,
					"name": "state",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "State of the player."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiPlayer.ts",
							"line": 47,
							"character": 9,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiPlayer.ts#L47"
						}
					],
					"type": {
						"type": "reference",
						"id": 1635,
						"name": "PlayerState"
					},
					"defaultValue": "PlayerState.Disconnected"
				},
				{
					"id": 958,
					"name": "textChannel",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPublic": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Text Channel of the player."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiPlayer.ts",
							"line": 35,
							"character": 9,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiPlayer.ts#L35"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 957,
					"name": "voiceChannel",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPublic": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Voice Channel of the player."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiPlayer.ts",
							"line": 32,
							"character": 9,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiPlayer.ts#L32"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 955,
					"name": "voiceState",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Voice State of the player."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiPlayer.ts",
							"line": 26,
							"character": 9,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiPlayer.ts#L26"
						}
					],
					"type": {
						"type": "reference",
						"id": 1761,
						"name": "VoiceState"
					}
				},
				{
					"id": 961,
					"name": "volume",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPublic": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Volume of the player."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiPlayer.ts",
							"line": 44,
							"character": 9,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiPlayer.ts#L44"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 942,
					"name": "captureRejectionSymbol",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isStatic": true,
						"isExternal": true,
						"isReadonly": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 328,
							"character": 24
						}
					],
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"id": 39,
							"name": "captureRejectionSymbol",
							"qualifiedName": "EventEmitter.captureRejectionSymbol",
							"package": "@types/node"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "EventEmitter.captureRejectionSymbol"
					}
				},
				{
					"id": 943,
					"name": "captureRejections",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "TODO: These should be described using static getter/setter pairs:"
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 333,
							"character": 15
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "EventEmitter.captureRejections"
					}
				},
				{
					"id": 944,
					"name": "defaultMaxListeners",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 334,
							"character": 15
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "EventEmitter.defaultMaxListeners"
					}
				},
				{
					"id": 941,
					"name": "errorMonitor",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isStatic": true,
						"isExternal": true,
						"isReadonly": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "This symbol shall be used to install a listener for only monitoring "
							},
							{
								"kind": "code",
								"text": "`'error'`"
							},
							{
								"kind": "text",
								"text": "\nevents. Listeners installed using this symbol are called before the regular\n"
							},
							{
								"kind": "code",
								"text": "`'error'`"
							},
							{
								"kind": "text",
								"text": " listeners are called.\n\nInstalling a listener using this symbol does not change the behavior once an\n"
							},
							{
								"kind": "code",
								"text": "`'error'`"
							},
							{
								"kind": "text",
								"text": " event is emitted, therefore the process will still crash if no\nregular "
							},
							{
								"kind": "code",
								"text": "`'error'`"
							},
							{
								"kind": "text",
								"text": " listener is installed."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 327,
							"character": 24
						}
					],
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"id": 38,
							"name": "errorMonitor",
							"qualifiedName": "EventEmitter.errorMonitor",
							"package": "@types/node"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "EventEmitter.errorMonitor"
					}
				},
				{
					"id": 996,
					"name": "addListener",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 354,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 997,
							"name": "addListener",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Alias for "
									},
									{
										"kind": "code",
										"text": "`emitter.on(eventName, listener)`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.1.26"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 998,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 999,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1000,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/node/events.d.ts",
													"line": 354,
													"character": 66
												}
											],
											"signatures": [
												{
													"id": 1001,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 1002,
															"name": "args",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 904,
								"name": "CosmiPlayer"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "EventEmitter.addListener"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "EventEmitter.addListener"
					}
				},
				{
					"id": 966,
					"name": "connect",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiPlayer.ts",
							"line": 76,
							"character": 15,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiPlayer.ts#L76"
						}
					],
					"signatures": [
						{
							"id": 967,
							"name": "connect",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Connects the player to the voice channel."
									}
								]
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 904,
										"name": "CosmiPlayer"
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 968,
					"name": "destroy",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiPlayer.ts",
							"line": 96,
							"character": 9,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiPlayer.ts#L96"
						}
					],
					"signatures": [
						{
							"id": 969,
							"name": "destroy",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Destroys the player."
									}
								]
							},
							"parameters": [
								{
									"id": 970,
									"name": "disconnect",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "true"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 971,
					"name": "disconnect",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiPlayer.ts",
							"line": 115,
							"character": 9,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiPlayer.ts#L115"
						}
					],
					"signatures": [
						{
							"id": 972,
							"name": "disconnect",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Disconnects the player from the voice channel."
									}
								]
							},
							"type": {
								"type": "reference",
								"id": 904,
								"name": "CosmiPlayer"
							}
						}
					]
				},
				{
					"id": 1045,
					"name": "emit",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 610,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1046,
							"name": "emit",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Synchronously calls each of the listeners registered for the event named"
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ", in the order they were registered, passing the supplied arguments\nto each.\n\nReturns "
									},
									{
										"kind": "code",
										"text": "`true`"
									},
									{
										"kind": "text",
										"text": " if the event had listeners, "
									},
									{
										"kind": "code",
										"text": "`false`"
									},
									{
										"kind": "text",
										"text": " otherwise.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nconst EventEmitter = require('events');\nconst myEmitter = new EventEmitter();\n\n// First listener\nmyEmitter.on('event', function firstListener() {\n  console.log('Helloooo! first listener');\n});\n// Second listener\nmyEmitter.on('event', function secondListener(arg1, arg2) {\n  console.log(`event with parameters ${arg1}, ${arg2} in second listener`);\n});\n// Third listener\nmyEmitter.on('event', function thirdListener(...args) {\n  const parameters = args.join(', ');\n  console.log(`event with parameters ${parameters} in third listener`);\n});\n\nconsole.log(myEmitter.listeners('event'));\n\nmyEmitter.emit('event', 1, 2, 3, 4, 5);\n\n// Prints:\n// [\n//   [Function: firstListener],\n//   [Function: secondListener],\n//   [Function: thirdListener]\n// ]\n// Helloooo! first listener\n// event with parameters 1, 2 in second listener\n// event with parameters 1, 2, 3, 4, 5 in third listener\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.1.26"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1047,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 1048,
									"name": "args",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isRest": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "EventEmitter.emit"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "EventEmitter.emit"
					}
				},
				{
					"id": 1066,
					"name": "eventNames",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 669,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1067,
							"name": "eventNames",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns an array listing the events for which the emitter has registered\nlisteners. The values in the array are strings or "
									},
									{
										"kind": "code",
										"text": "`Symbol`"
									},
									{
										"kind": "text",
										"text": "s.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nconst EventEmitter = require('events');\nconst myEE = new EventEmitter();\nmyEE.on('foo', () => {});\nmyEE.on('bar', () => {});\n\nconst sym = Symbol('symbol');\nmyEE.on(sym, () => {});\n\nconsole.log(myEE.eventNames());\n// Prints: [ 'foo', 'bar', Symbol(symbol) ]\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v6.0.0"
											}
										]
									}
								]
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "union",
									"types": [
										{
											"type": "intrinsic",
											"name": "string"
										},
										{
											"type": "intrinsic",
											"name": "symbol"
										}
									]
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "EventEmitter.eventNames"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "EventEmitter.eventNames"
					}
				},
				{
					"id": 1037,
					"name": "getMaxListeners",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 526,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1038,
							"name": "getMaxListeners",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns the current max listener value for the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " which is either\nset by "
									},
									{
										"kind": "code",
										"text": "`emitter.setMaxListeners(n)`"
									},
									{
										"kind": "text",
										"text": " or defaults to "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "defaultMaxListeners",
										"target": 944
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v1.0.0"
											}
										]
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "EventEmitter.getMaxListeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "EventEmitter.getMaxListeners"
					}
				},
				{
					"id": 1049,
					"name": "listenerCount",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 616,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1050,
							"name": "listenerCount",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns the number of listeners listening to the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v3.2.0"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1051,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the event being listened for"
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "EventEmitter.listenerCount"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "EventEmitter.listenerCount"
					}
				},
				{
					"id": 1039,
					"name": "listeners",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 539,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1040,
							"name": "listeners",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns a copy of the array of listeners for the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ".\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nserver.on('connection', (stream) => {\n  console.log('someone connected!');\n});\nconsole.log(util.inspect(server.listeners('connection')));\n// Prints: [ [Function] ]\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.1.26"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1041,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "Function",
									"qualifiedName": "Function",
									"package": "typescript"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "EventEmitter.listeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "EventEmitter.listeners"
					}
				},
				{
					"id": 1024,
					"name": "off",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 499,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1025,
							"name": "off",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Alias for "
									},
									{
										"kind": "code",
										"text": "`emitter.removeListener()`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v10.0.0"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1026,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 1027,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1028,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/node/events.d.ts",
													"line": 499,
													"character": 58
												}
											],
											"signatures": [
												{
													"id": 1029,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 1030,
															"name": "args",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 904,
								"name": "CosmiPlayer"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "EventEmitter.off"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "EventEmitter.off"
					}
				},
				{
					"id": 1003,
					"name": "on",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 385,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1004,
							"name": "on",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Adds the "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " function to the end of the listeners array for the\nevent named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ". No checks are made to see if the "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " has\nalready been added. Multiple calls passing the same combination of "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": "and "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " will result in the "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " being added, and called, multiple\ntimes.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nserver.on('connection', (stream) => {\n  console.log('someone connected!');\n});\n```"
									},
									{
										"kind": "text",
										"text": "\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained.\n\nBy default, event listeners are invoked in the order they are added. The"
									},
									{
										"kind": "code",
										"text": "`emitter.prependListener()`"
									},
									{
										"kind": "text",
										"text": " method can be used as an alternative to add the\nevent listener to the beginning of the listeners array.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nconst myEE = new EventEmitter();\nmyEE.on('foo', () => console.log('a'));\nmyEE.prependListener('foo', () => console.log('b'));\nmyEE.emit('foo');\n// Prints:\n//   b\n//   a\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.1.101"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1005,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the event."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 1006,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The callback function"
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1007,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/node/events.d.ts",
													"line": 385,
													"character": 57
												}
											],
											"signatures": [
												{
													"id": 1008,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 1009,
															"name": "args",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 904,
								"name": "CosmiPlayer"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "EventEmitter.on"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "EventEmitter.on"
					}
				},
				{
					"id": 1010,
					"name": "once",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 414,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1011,
							"name": "once",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Adds a **one-time**"
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " function for the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ". The\nnext time "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": " is triggered, this listener is removed and then invoked.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nserver.once('connection', (stream) => {\n  console.log('Ah, we have our first user!');\n});\n```"
									},
									{
										"kind": "text",
										"text": "\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained.\n\nBy default, event listeners are invoked in the order they are added. The"
									},
									{
										"kind": "code",
										"text": "`emitter.prependOnceListener()`"
									},
									{
										"kind": "text",
										"text": " method can be used as an alternative to add the\nevent listener to the beginning of the listeners array.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nconst myEE = new EventEmitter();\nmyEE.once('foo', () => console.log('a'));\nmyEE.prependOnceListener('foo', () => console.log('b'));\nmyEE.emit('foo');\n// Prints:\n//   b\n//   a\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.3.0"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1012,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the event."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 1013,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The callback function"
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1014,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/node/events.d.ts",
													"line": 414,
													"character": 59
												}
											],
											"signatures": [
												{
													"id": 1015,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 1016,
															"name": "args",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 904,
								"name": "CosmiPlayer"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "EventEmitter.once"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "EventEmitter.once"
					}
				},
				{
					"id": 973,
					"name": "pause",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiPlayer.ts",
							"line": 137,
							"character": 9,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiPlayer.ts#L137"
						}
					],
					"signatures": [
						{
							"id": 974,
							"name": "pause",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Sets the paused state of the player."
									}
								]
							},
							"parameters": [
								{
									"id": 975,
									"name": "pause",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 904,
								"name": "CosmiPlayer"
							}
						}
					]
				},
				{
					"id": 976,
					"name": "play",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiPlayer.ts",
							"line": 156,
							"character": 15,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiPlayer.ts#L156"
						}
					],
					"signatures": [
						{
							"id": 977,
							"name": "play",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Plays the next track in the queue."
									}
								]
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 904,
										"name": "CosmiPlayer"
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 1052,
					"name": "prependListener",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 634,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1053,
							"name": "prependListener",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Adds the "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " function to the _beginning_ of the listeners array for the\nevent named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ". No checks are made to see if the "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " has\nalready been added. Multiple calls passing the same combination of "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": "and "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " will result in the "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " being added, and called, multiple\ntimes.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nserver.prependListener('connection', (stream) => {\n  console.log('someone connected!');\n});\n```"
									},
									{
										"kind": "text",
										"text": "\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v6.0.0"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1054,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the event."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 1055,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The callback function"
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1056,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/node/events.d.ts",
													"line": 634,
													"character": 70
												}
											],
											"signatures": [
												{
													"id": 1057,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 1058,
															"name": "args",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 904,
								"name": "CosmiPlayer"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "EventEmitter.prependListener"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "EventEmitter.prependListener"
					}
				},
				{
					"id": 1059,
					"name": "prependOnceListener",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 650,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1060,
							"name": "prependOnceListener",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Adds a **one-time**"
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " function for the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": " to the _beginning_ of the listeners array. The next time "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": " is triggered, this\nlistener is removed, and then invoked.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nserver.prependOnceListener('connection', (stream) => {\n  console.log('Ah, we have our first user!');\n});\n```"
									},
									{
										"kind": "text",
										"text": "\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v6.0.0"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1061,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the event."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 1062,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The callback function"
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1063,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/node/events.d.ts",
													"line": 650,
													"character": 74
												}
											],
											"signatures": [
												{
													"id": 1064,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 1065,
															"name": "args",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 904,
								"name": "CosmiPlayer"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "EventEmitter.prependOnceListener"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "EventEmitter.prependOnceListener"
					}
				},
				{
					"id": 1042,
					"name": "rawListeners",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 569,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1043,
							"name": "rawListeners",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns a copy of the array of listeners for the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ",\nincluding any wrappers (such as those created by "
									},
									{
										"kind": "code",
										"text": "`.once()`"
									},
									{
										"kind": "text",
										"text": ").\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nconst emitter = new EventEmitter();\nemitter.once('log', () => console.log('log once'));\n\n// Returns a new Array with a function `onceWrapper` which has a property\n// `listener` which contains the original listener bound above\nconst listeners = emitter.rawListeners('log');\nconst logFnWrapper = listeners[0];\n\n// Logs \"log once\" to the console and does not unbind the `once` event\nlogFnWrapper.listener();\n\n// Logs \"log once\" to the console and removes the listener\nlogFnWrapper();\n\nemitter.on('log', () => console.log('log persistently'));\n// Will return a new Array with a single function bound by `.on()` above\nconst newListeners = emitter.rawListeners('log');\n\n// Logs \"log persistently\" twice\nnewListeners[0]();\nemitter.emit('log');\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v9.4.0"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1044,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "Function",
									"qualifiedName": "Function",
									"package": "typescript"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "EventEmitter.rawListeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "EventEmitter.rawListeners"
					}
				},
				{
					"id": 1031,
					"name": "removeAllListeners",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 510,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1032,
							"name": "removeAllListeners",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Removes all listeners, or those of the specified "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ".\n\nIt is bad practice to remove listeners added elsewhere in the code,\nparticularly when the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " instance was created by some other\ncomponent or module (e.g. sockets or file streams).\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.1.26"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1033,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 904,
								"name": "CosmiPlayer"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "EventEmitter.removeAllListeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "EventEmitter.removeAllListeners"
					}
				},
				{
					"id": 1017,
					"name": "removeListener",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 494,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1018,
							"name": "removeListener",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Removes the specified "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " from the listener array for the event named"
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ".\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nconst callback = (stream) => {\n  console.log('someone connected!');\n};\nserver.on('connection', callback);\n// ...\nserver.removeListener('connection', callback);\n```"
									},
									{
										"kind": "text",
										"text": "\n\n"
									},
									{
										"kind": "code",
										"text": "`removeListener()`"
									},
									{
										"kind": "text",
										"text": " will remove, at most, one instance of a listener from the\nlistener array. If any single listener has been added multiple times to the\nlistener array for the specified "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ", then "
									},
									{
										"kind": "code",
										"text": "`removeListener()`"
									},
									{
										"kind": "text",
										"text": " must be\ncalled multiple times to remove each instance.\n\nOnce an event is emitted, all listeners attached to it at the\ntime of emitting are called in order. This implies that any"
									},
									{
										"kind": "code",
										"text": "`removeListener()`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`removeAllListeners()`"
									},
									{
										"kind": "text",
										"text": " calls _after_ emitting and _before_ the last listener finishes execution\nwill not remove them from"
									},
									{
										"kind": "code",
										"text": "`emit()`"
									},
									{
										"kind": "text",
										"text": " in progress. Subsequent events behave as expected.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nconst myEmitter = new MyEmitter();\n\nconst callbackA = () => {\n  console.log('A');\n  myEmitter.removeListener('event', callbackB);\n};\n\nconst callbackB = () => {\n  console.log('B');\n};\n\nmyEmitter.on('event', callbackA);\n\nmyEmitter.on('event', callbackB);\n\n// callbackA removes listener callbackB but it will still be called.\n// Internal listener array at time of emit [callbackA, callbackB]\nmyEmitter.emit('event');\n// Prints:\n//   A\n//   B\n\n// callbackB is now removed.\n// Internal listener array [callbackA]\nmyEmitter.emit('event');\n// Prints:\n//   A\n```"
									},
									{
										"kind": "text",
										"text": "\n\nBecause listeners are managed using an internal array, calling this will\nchange the position indices of any listener registered _after_ the listener\nbeing removed. This will not impact the order in which listeners are called,\nbut it means that any copies of the listener array as returned by\nthe "
									},
									{
										"kind": "code",
										"text": "`emitter.listeners()`"
									},
									{
										"kind": "text",
										"text": " method will need to be recreated.\n\nWhen a single function has been added as a handler multiple times for a single\nevent (as in the example below), "
									},
									{
										"kind": "code",
										"text": "`removeListener()`"
									},
									{
										"kind": "text",
										"text": " will remove the most\nrecently added instance. In the example the "
									},
									{
										"kind": "code",
										"text": "`once('ping')`"
									},
									{
										"kind": "text",
										"text": "listener is removed:\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nconst ee = new EventEmitter();\n\nfunction pong() {\n  console.log('pong');\n}\n\nee.on('ping', pong);\nee.once('ping', pong);\nee.removeListener('ping', pong);\n\nee.emit('ping');\nee.emit('ping');\n```"
									},
									{
										"kind": "text",
										"text": "\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.1.26"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1019,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 1020,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1021,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/node/events.d.ts",
													"line": 494,
													"character": 69
												}
											],
											"signatures": [
												{
													"id": 1022,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 1023,
															"name": "args",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 904,
								"name": "CosmiPlayer"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "EventEmitter.removeListener"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "EventEmitter.removeListener"
					}
				},
				{
					"id": 993,
					"name": "seek",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiPlayer.ts",
							"line": 243,
							"character": 9,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiPlayer.ts#L243"
						}
					],
					"signatures": [
						{
							"id": 994,
							"name": "seek",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Seeks to the specified position in the current track."
									}
								]
							},
							"parameters": [
								{
									"id": 995,
									"name": "position",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 904,
								"name": "CosmiPlayer"
							}
						}
					]
				},
				{
					"id": 987,
					"name": "setLoop",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiPlayer.ts",
							"line": 217,
							"character": 9,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiPlayer.ts#L217"
						}
					],
					"signatures": [
						{
							"id": 988,
							"name": "setLoop",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Sets the loop state of the player."
									}
								]
							},
							"parameters": [
								{
									"id": 989,
									"name": "loop",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 904,
								"name": "CosmiPlayer"
							}
						}
					]
				},
				{
					"id": 1034,
					"name": "setMaxListeners",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 520,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1035,
							"name": "setMaxListeners",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "By default "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": "s will print a warning if more than "
									},
									{
										"kind": "code",
										"text": "`10`"
									},
									{
										"kind": "text",
										"text": " listeners are\nadded for a particular event. This is a useful default that helps finding\nmemory leaks. The "
									},
									{
										"kind": "code",
										"text": "`emitter.setMaxListeners()`"
									},
									{
										"kind": "text",
										"text": " method allows the limit to be\nmodified for this specific "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " instance. The value can be set to"
									},
									{
										"kind": "code",
										"text": "`Infinity`"
									},
									{
										"kind": "text",
										"text": " (or "
									},
									{
										"kind": "code",
										"text": "`0`"
									},
									{
										"kind": "text",
										"text": ") to indicate an unlimited number of listeners.\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.3.5"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1036,
									"name": "n",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 904,
								"name": "CosmiPlayer"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "EventEmitter.setMaxListeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "EventEmitter.setMaxListeners"
					}
				},
				{
					"id": 981,
					"name": "setTextChannel",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiPlayer.ts",
							"line": 192,
							"character": 9,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiPlayer.ts#L192"
						}
					],
					"signatures": [
						{
							"id": 982,
							"name": "setTextChannel",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Sets the text channel of the player."
									}
								]
							},
							"parameters": [
								{
									"id": 983,
									"name": "channel",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 904,
								"name": "CosmiPlayer"
							}
						}
					]
				},
				{
					"id": 978,
					"name": "setVoiceChannel",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiPlayer.ts",
							"line": 182,
							"character": 9,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiPlayer.ts#L182"
						}
					],
					"signatures": [
						{
							"id": 979,
							"name": "setVoiceChannel",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Sets the voice channel of the player."
									}
								]
							},
							"parameters": [
								{
									"id": 980,
									"name": "channel",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 904,
								"name": "CosmiPlayer"
							}
						}
					]
				},
				{
					"id": 984,
					"name": "setVolume",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiPlayer.ts",
							"line": 201,
							"character": 9,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiPlayer.ts#L201"
						}
					],
					"signatures": [
						{
							"id": 985,
							"name": "setVolume",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Sets the volume of the player."
									}
								]
							},
							"parameters": [
								{
									"id": 986,
									"name": "volume",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 904,
								"name": "CosmiPlayer"
							}
						}
					]
				},
				{
					"id": 990,
					"name": "stop",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiPlayer.ts",
							"line": 227,
							"character": 9,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiPlayer.ts#L227"
						}
					],
					"signatures": [
						{
							"id": 991,
							"name": "stop",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Stops the current track, or skips to the next one."
									}
								]
							},
							"parameters": [
								{
									"id": 992,
									"name": "amount",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 904,
								"name": "CosmiPlayer"
							}
						}
					]
				},
				{
					"id": 933,
					"name": "getEventListeners",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 299,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 934,
							"name": "getEventListeners",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns a copy of the array of listeners for the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ".\n\nFor "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": "s this behaves exactly the same as calling "
									},
									{
										"kind": "code",
										"text": "`.listeners`"
									},
									{
										"kind": "text",
										"text": " on\nthe emitter.\n\nFor "
									},
									{
										"kind": "code",
										"text": "`EventTarget`"
									},
									{
										"kind": "text",
										"text": "s this is the only way to get the event listeners for the\nevent target. This is useful for debugging and diagnostic purposes.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nconst { getEventListeners, EventEmitter } = require('events');\n\n{\n  const ee = new EventEmitter();\n  const listener = () => console.log('Events are fun');\n  ee.on('foo', listener);\n  getEventListeners(ee, 'foo'); // [listener]\n}\n{\n  const et = new EventTarget();\n  const listener = () => console.log('Events are fun');\n  et.addEventListener('foo', listener);\n  getEventListeners(et, 'foo'); // [listener]\n}\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v15.2.0, v14.17.0"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 935,
									"name": "emitter",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "EventEmitter",
												"qualifiedName": "global.NodeJS.EventEmitter",
												"package": "@types/node"
											},
											{
												"type": "reference",
												"name": "_DOMEventTarget",
												"qualifiedName": "_DOMEventTarget",
												"package": "@types/node"
											}
										]
									}
								},
								{
									"id": 936,
									"name": "name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "Function",
									"qualifiedName": "Function",
									"package": "typescript"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "EventEmitter.getEventListeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "EventEmitter.getEventListeners"
					}
				},
				{
					"id": 929,
					"name": "listenerCount",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 271,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 930,
							"name": "listenerCount",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "A class method that returns the number of listeners for the given "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": "registered on the given "
									},
									{
										"kind": "code",
										"text": "`emitter`"
									},
									{
										"kind": "text",
										"text": ".\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nconst { EventEmitter, listenerCount } = require('events');\nconst myEmitter = new EventEmitter();\nmyEmitter.on('event', () => {});\nmyEmitter.on('event', () => {});\nconsole.log(listenerCount(myEmitter, 'event'));\n// Prints: 2\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.9.12"
											}
										]
									},
									{
										"tag": "@deprecated",
										"content": [
											{
												"kind": "text",
												"text": "Since v3.2.0 - Use "
											},
											{
												"kind": "code",
												"text": "`listenerCount`"
											},
											{
												"kind": "text",
												"text": " instead."
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 931,
									"name": "emitter",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The emitter to query"
											}
										]
									},
									"type": {
										"type": "reference",
										"name": "EventEmitter",
										"qualifiedName": "global.NodeJS.EventEmitter",
										"package": "@types/node"
									}
								},
								{
									"id": 932,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The event name"
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "EventEmitter.listenerCount"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "EventEmitter.listenerCount"
					}
				},
				{
					"id": 919,
					"name": "on",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 254,
							"character": 15
						},
						{
							"fileName": "node_modules/discord.js/typings/index.d.ts",
							"line": 229,
							"character": 18
						}
					],
					"signatures": [
						{
							"id": 920,
							"name": "on",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "code",
										"text": "```js\nconst { on, EventEmitter } = require('events');\n\n(async () => {\n  const ee = new EventEmitter();\n\n  // Emit later on\n  process.nextTick(() => {\n    ee.emit('foo', 'bar');\n    ee.emit('foo', 42);\n  });\n\n  for await (const event of on(ee, 'foo')) {\n    // The execution of this inner block is synchronous and it\n    // processes one event at a time (even with await). Do not use\n    // if concurrent execution is required.\n    console.log(event); // prints ['bar'] [42]\n  }\n  // Unreachable here\n})();\n```"
									},
									{
										"kind": "text",
										"text": "\n\nReturns an "
									},
									{
										"kind": "code",
										"text": "`AsyncIterator`"
									},
									{
										"kind": "text",
										"text": " that iterates "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": " events. It will throw\nif the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " emits "
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": ". It removes all listeners when\nexiting the loop. The "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " returned by each iteration is an array\ncomposed of the emitted event arguments.\n\nAn "
									},
									{
										"kind": "code",
										"text": "`AbortSignal`"
									},
									{
										"kind": "text",
										"text": " can be used to cancel waiting on events:\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nconst { on, EventEmitter } = require('events');\nconst ac = new AbortController();\n\n(async () => {\n  const ee = new EventEmitter();\n\n  // Emit later on\n  process.nextTick(() => {\n    ee.emit('foo', 'bar');\n    ee.emit('foo', 42);\n  });\n\n  for await (const event of on(ee, 'foo', { signal: ac.signal })) {\n    // The execution of this inner block is synchronous and it\n    // processes one event at a time (even with await). Do not use\n    // if concurrent execution is required.\n    console.log(event); // prints ['bar'] [42]\n  }\n  // Unreachable here\n})();\n\nprocess.nextTick(() => ac.abort());\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v13.6.0, v12.16.0"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "that iterates "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": " events emitted by the "
											},
											{
												"kind": "code",
												"text": "`emitter`"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 921,
									"name": "emitter",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"name": "EventEmitter",
										"qualifiedName": "global.NodeJS.EventEmitter",
										"package": "@types/node"
									}
								},
								{
									"id": 922,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the event being listened for"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 923,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"name": "StaticEventEmitterOptions",
										"qualifiedName": "StaticEventEmitterOptions",
										"package": "@types/node"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "AsyncIterableIterator",
								"qualifiedName": "AsyncIterableIterator",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "EventEmitter.on"
							}
						},
						{
							"id": 924,
							"name": "on",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"typeParameter": [
								{
									"id": 925,
									"name": "E",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"name": "__module",
										"qualifiedName": "EventEmitter",
										"package": "@types/node"
									}
								},
								{
									"id": 926,
									"name": "K",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "typeOperator",
										"operator": "keyof",
										"target": {
											"type": "reference",
											"name": "ClientEvents",
											"qualifiedName": "ClientEvents",
											"package": "discord.js"
										}
									}
								}
							],
							"parameters": [
								{
									"id": 927,
									"name": "eventEmitter",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"id": 22,
										"name": "E",
										"qualifiedName": "E",
										"package": "discord.js"
									}
								},
								{
									"id": 928,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "conditional",
										"checkType": {
											"type": "reference",
											"id": 22,
											"name": "E",
											"qualifiedName": "E",
											"package": "discord.js"
										},
										"extendsType": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "intrinsic",
													"name": "boolean"
												}
											],
											"name": "Client",
											"qualifiedName": "Client",
											"package": "discord.js"
										},
										"trueType": {
											"type": "reference",
											"id": 23,
											"name": "K",
											"qualifiedName": "K",
											"package": "discord.js"
										},
										"falseType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "conditional",
										"checkType": {
											"type": "reference",
											"id": 22,
											"name": "E",
											"qualifiedName": "E",
											"package": "discord.js"
										},
										"extendsType": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "intrinsic",
													"name": "boolean"
												}
											],
											"name": "Client",
											"qualifiedName": "Client",
											"package": "discord.js"
										},
										"trueType": {
											"type": "indexedAccess",
											"indexType": {
												"type": "reference",
												"id": 23,
												"name": "K",
												"qualifiedName": "K",
												"package": "discord.js"
											},
											"objectType": {
												"type": "reference",
												"name": "ClientEvents",
												"qualifiedName": "ClientEvents",
												"package": "discord.js"
											}
										},
										"falseType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								],
								"name": "AsyncIterableIterator",
								"qualifiedName": "AsyncIterableIterator",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "EventEmitter.on"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "EventEmitter.on"
					}
				},
				{
					"id": 905,
					"name": "once",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 194,
							"character": 15
						},
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 195,
							"character": 15
						},
						{
							"fileName": "node_modules/discord.js/typings/index.d.ts",
							"line": 225,
							"character": 18
						}
					],
					"signatures": [
						{
							"id": 906,
							"name": "once",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Creates a "
									},
									{
										"kind": "code",
										"text": "`Promise`"
									},
									{
										"kind": "text",
										"text": " that is fulfilled when the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " emits the given\nevent or that is rejected if the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " emits "
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": " while waiting.\nThe "
									},
									{
										"kind": "code",
										"text": "`Promise`"
									},
									{
										"kind": "text",
										"text": " will resolve with an array of all the arguments emitted to the\ngiven event.\n\nThis method is intentionally generic and works with the web platform [EventTarget](https://dom.spec.whatwg.org/#interface-eventtarget) interface, which has no special"
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": " event\nsemantics and does not listen to the "
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": " event.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nconst { once, EventEmitter } = require('events');\n\nasync function run() {\n  const ee = new EventEmitter();\n\n  process.nextTick(() => {\n    ee.emit('myevent', 42);\n  });\n\n  const [value] = await once(ee, 'myevent');\n  console.log(value);\n\n  const err = new Error('kaboom');\n  process.nextTick(() => {\n    ee.emit('error', err);\n  });\n\n  try {\n    await once(ee, 'myevent');\n  } catch (err) {\n    console.log('error happened', err);\n  }\n}\n\nrun();\n```"
									},
									{
										"kind": "text",
										"text": "\n\nThe special handling of the "
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": " event is only used when "
									},
									{
										"kind": "code",
										"text": "`events.once()`"
									},
									{
										"kind": "text",
										"text": "is used to wait for another event. If "
									},
									{
										"kind": "code",
										"text": "`events.once()`"
									},
									{
										"kind": "text",
										"text": " is used to wait for the\n'"
									},
									{
										"kind": "code",
										"text": "`error'`"
									},
									{
										"kind": "text",
										"text": " event itself, then it is treated as any other kind of event without\nspecial handling:\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nconst { EventEmitter, once } = require('events');\n\nconst ee = new EventEmitter();\n\nonce(ee, 'error')\n  .then(([err]) => console.log('ok', err.message))\n  .catch((err) => console.log('error', err.message));\n\nee.emit('error', new Error('boom'));\n\n// Prints: ok boom\n```"
									},
									{
										"kind": "text",
										"text": "\n\nAn "
									},
									{
										"kind": "code",
										"text": "`AbortSignal`"
									},
									{
										"kind": "text",
										"text": " can be used to cancel waiting for the event:\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nconst { EventEmitter, once } = require('events');\n\nconst ee = new EventEmitter();\nconst ac = new AbortController();\n\nasync function foo(emitter, event, signal) {\n  try {\n    await once(emitter, event, { signal });\n    console.log('event emitted!');\n  } catch (error) {\n    if (error.name === 'AbortError') {\n      console.error('Waiting for the event was canceled!');\n    } else {\n      console.error('There was an error', error.message);\n    }\n  }\n}\n\nfoo(ee, 'foo', ac.signal);\nac.abort(); // Abort waiting for the event\nee.emit('foo'); // Prints: Waiting for the event was canceled!\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v11.13.0, v10.16.0"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 907,
									"name": "emitter",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"name": "_NodeEventTarget",
										"qualifiedName": "_NodeEventTarget",
										"package": "@types/node"
									}
								},
								{
									"id": 908,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 909,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"name": "StaticEventEmitterOptions",
										"qualifiedName": "StaticEventEmitterOptions",
										"package": "@types/node"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "EventEmitter.once"
							}
						},
						{
							"id": 910,
							"name": "once",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 911,
									"name": "emitter",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"name": "_DOMEventTarget",
										"qualifiedName": "_DOMEventTarget",
										"package": "@types/node"
									}
								},
								{
									"id": 912,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 913,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"name": "StaticEventEmitterOptions",
										"qualifiedName": "StaticEventEmitterOptions",
										"package": "@types/node"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "EventEmitter.once"
							}
						},
						{
							"id": 914,
							"name": "once",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Add type overloads for client events."
									}
								]
							},
							"typeParameter": [
								{
									"id": 915,
									"name": "E",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"name": "__module",
										"qualifiedName": "EventEmitter",
										"package": "@types/node"
									}
								},
								{
									"id": 916,
									"name": "K",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "typeOperator",
										"operator": "keyof",
										"target": {
											"type": "reference",
											"name": "ClientEvents",
											"qualifiedName": "ClientEvents",
											"package": "discord.js"
										}
									}
								}
							],
							"parameters": [
								{
									"id": 917,
									"name": "eventEmitter",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"id": 12,
										"name": "E",
										"qualifiedName": "E",
										"package": "discord.js"
									}
								},
								{
									"id": 918,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "conditional",
										"checkType": {
											"type": "reference",
											"id": 12,
											"name": "E",
											"qualifiedName": "E",
											"package": "discord.js"
										},
										"extendsType": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "intrinsic",
													"name": "boolean"
												}
											],
											"name": "Client",
											"qualifiedName": "Client",
											"package": "discord.js"
										},
										"trueType": {
											"type": "reference",
											"id": 13,
											"name": "K",
											"qualifiedName": "K",
											"package": "discord.js"
										},
										"falseType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "conditional",
										"checkType": {
											"type": "reference",
											"id": 12,
											"name": "E",
											"qualifiedName": "E",
											"package": "discord.js"
										},
										"extendsType": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "intrinsic",
													"name": "boolean"
												}
											],
											"name": "Client",
											"qualifiedName": "Client",
											"package": "discord.js"
										},
										"trueType": {
											"type": "indexedAccess",
											"indexType": {
												"type": "reference",
												"id": 13,
												"name": "K",
												"qualifiedName": "K",
												"package": "discord.js"
											},
											"objectType": {
												"type": "reference",
												"name": "ClientEvents",
												"qualifiedName": "ClientEvents",
												"package": "discord.js"
											}
										},
										"falseType": {
											"type": "array",
											"elementType": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "EventEmitter.once"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "EventEmitter.once"
					}
				},
				{
					"id": 937,
					"name": "setMaxListeners",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 317,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 938,
							"name": "setMaxListeners",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "code",
										"text": "```js\nconst {\n  setMaxListeners,\n  EventEmitter\n} = require('events');\n\nconst target = new EventTarget();\nconst emitter = new EventEmitter();\n\nsetMaxListeners(5, target, emitter);\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v15.4.0"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 939,
									"name": "n",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A non-negative number. The maximum number of listeners per "
											},
											{
												"kind": "code",
												"text": "`EventTarget`"
											},
											{
												"kind": "text",
												"text": " event."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 940,
									"name": "eventTargets",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isRest": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "union",
											"types": [
												{
													"type": "reference",
													"name": "EventEmitter",
													"qualifiedName": "global.NodeJS.EventEmitter",
													"package": "@types/node"
												},
												{
													"type": "reference",
													"name": "_DOMEventTarget",
													"qualifiedName": "_DOMEventTarget",
													"package": "@types/node"
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "EventEmitter.setMaxListeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "EventEmitter.setMaxListeners"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						945
					]
				},
				{
					"title": "Properties",
					"children": [
						963,
						949,
						951,
						964,
						965,
						950,
						952,
						954,
						953,
						960,
						959,
						956,
						962,
						958,
						957,
						955,
						961,
						942,
						943,
						944,
						941
					]
				},
				{
					"title": "Methods",
					"children": [
						996,
						966,
						968,
						971,
						1045,
						1066,
						1037,
						1049,
						1039,
						1024,
						1003,
						1010,
						973,
						976,
						1052,
						1059,
						1042,
						1031,
						1017,
						993,
						987,
						1034,
						981,
						978,
						984,
						990,
						933,
						929,
						919,
						905,
						937
					]
				}
			],
			"sources": [
				{
					"fileName": "src/lib/CosmiPlayer.ts",
					"line": 6,
					"character": 13,
					"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiPlayer.ts#L6"
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "EventEmitter",
					"qualifiedName": "EventEmitter",
					"package": "@types/node"
				}
			]
		},
		{
			"id": 1090,
			"name": "CosmiQueue",
			"kind": 128,
			"kindString": "Class",
			"flags": {},
			"children": [
				{
					"id": 1126,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"line": 1486,
							"character": 4
						},
						{
							"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"line": 1487,
							"character": 4
						},
						{
							"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"line": 1488,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1127,
							"name": "new CosmiQueue",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 1128,
									"name": "arrayLength",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 1090,
								"name": "CosmiQueue"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array<CosmiTrack>.constructor"
							}
						},
						{
							"id": 1129,
							"name": "new CosmiQueue",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 1130,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isRest": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 1068,
											"name": "CosmiTrack"
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 1090,
								"name": "CosmiQueue"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array<CosmiTrack>.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Array<CosmiTrack>.constructor"
					}
				},
				{
					"id": 1390,
					"name": "[unscopables]",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isReadonly": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Is an object whose properties have the value 'true'\nwhen they will be absent when used in a 'with' statement."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts",
							"line": 97,
							"character": 13
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 1391,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {
								"isExternal": true
							},
							"children": [
								{
									"id": 1426,
									"name": "[unscopables]",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExternal": true,
										"isOptional": true,
										"isReadonly": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Is an object whose properties have the value 'true'\nwhen they will be absent when used in a 'with' statement."
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts",
											"line": 97,
											"character": 13
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1392,
									"name": "length",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Gets or sets the length of the array. This is a number one higher than the highest index in the array."
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"line": 1305,
											"character": 4
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1425,
									"name": "[iterator]",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "node_modules/typescript/lib/lib.es2015.iterable.d.ts",
											"line": 58,
											"character": 4
										}
									]
								},
								{
									"id": 1424,
									"name": "at",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "node_modules/typescript/lib/lib.es2022.array.d.ts",
											"line": 24,
											"character": 4
										}
									]
								},
								{
									"id": 1397,
									"name": "concat",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"line": 1329,
											"character": 4
										},
										{
											"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"line": 1335,
											"character": 4
										}
									]
								},
								{
									"id": 1417,
									"name": "copyWithin",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "node_modules/typescript/lib/lib.es2015.core.d.ts",
											"line": 62,
											"character": 4
										}
									]
								},
								{
									"id": 1418,
									"name": "entries",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "node_modules/typescript/lib/lib.es2015.iterable.d.ts",
											"line": 63,
											"character": 4
										}
									]
								},
								{
									"id": 1407,
									"name": "every",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"line": 1412,
											"character": 4
										},
										{
											"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"line": 1421,
											"character": 4
										}
									]
								},
								{
									"id": 1416,
									"name": "fill",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "node_modules/typescript/lib/lib.es2015.core.d.ts",
											"line": 51,
											"character": 4
										}
									]
								},
								{
									"id": 1411,
									"name": "filter",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"line": 1448,
											"character": 4
										},
										{
											"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"line": 1454,
											"character": 4
										}
									]
								},
								{
									"id": 1414,
									"name": "find",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "node_modules/typescript/lib/lib.es2015.core.d.ts",
											"line": 29,
											"character": 4
										},
										{
											"fileName": "node_modules/typescript/lib/lib.es2015.core.d.ts",
											"line": 30,
											"character": 4
										}
									]
								},
								{
									"id": 1415,
									"name": "findIndex",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "node_modules/typescript/lib/lib.es2015.core.d.ts",
											"line": 41,
											"character": 4
										}
									]
								},
								{
									"id": 1423,
									"name": "flat",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "node_modules/typescript/lib/lib.es2019.array.d.ts",
											"line": 79,
											"character": 4
										}
									]
								},
								{
									"id": 1422,
									"name": "flatMap",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "node_modules/typescript/lib/lib.es2019.array.d.ts",
											"line": 68,
											"character": 4
										}
									]
								},
								{
									"id": 1409,
									"name": "forEach",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"line": 1436,
											"character": 4
										}
									]
								},
								{
									"id": 1421,
									"name": "includes",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "node_modules/typescript/lib/lib.es2016.array.include.d.ts",
											"line": 25,
											"character": 4
										}
									]
								},
								{
									"id": 1405,
									"name": "indexOf",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"line": 1397,
											"character": 4
										}
									]
								},
								{
									"id": 1398,
									"name": "join",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"line": 1340,
											"character": 4
										}
									]
								},
								{
									"id": 1419,
									"name": "keys",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "node_modules/typescript/lib/lib.es2015.iterable.d.ts",
											"line": 68,
											"character": 4
										}
									]
								},
								{
									"id": 1406,
									"name": "lastIndexOf",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"line": 1403,
											"character": 4
										}
									]
								},
								{
									"id": 1410,
									"name": "map",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"line": 1442,
											"character": 4
										}
									]
								},
								{
									"id": 1395,
									"name": "pop",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"line": 1318,
											"character": 4
										}
									]
								},
								{
									"id": 1396,
									"name": "push",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"line": 1323,
											"character": 4
										}
									]
								},
								{
									"id": 1412,
									"name": "reduce",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"line": 1460,
											"character": 4
										},
										{
											"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"line": 1461,
											"character": 4
										},
										{
											"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"line": 1467,
											"character": 4
										}
									]
								},
								{
									"id": 1413,
									"name": "reduceRight",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"line": 1473,
											"character": 4
										},
										{
											"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"line": 1474,
											"character": 4
										},
										{
											"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"line": 1480,
											"character": 4
										}
									]
								},
								{
									"id": 1399,
									"name": "reverse",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"line": 1345,
											"character": 4
										}
									]
								},
								{
									"id": 1400,
									"name": "shift",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"line": 1350,
											"character": 4
										}
									]
								},
								{
									"id": 1401,
									"name": "slice",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"line": 1360,
											"character": 4
										}
									]
								},
								{
									"id": 1408,
									"name": "some",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"line": 1430,
											"character": 4
										}
									]
								},
								{
									"id": 1402,
									"name": "sort",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"line": 1371,
											"character": 4
										}
									]
								},
								{
									"id": 1403,
									"name": "splice",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"line": 1378,
											"character": 4
										},
										{
											"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"line": 1386,
											"character": 4
										}
									]
								},
								{
									"id": 1394,
									"name": "toLocaleString",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"line": 1313,
											"character": 4
										}
									]
								},
								{
									"id": 1393,
									"name": "toString",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"line": 1309,
											"character": 4
										}
									]
								},
								{
									"id": 1404,
									"name": "unshift",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"line": 1391,
											"character": 4
										}
									]
								},
								{
									"id": 1420,
									"name": "values",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "node_modules/typescript/lib/lib.es2015.iterable.d.ts",
											"line": 73,
											"character": 4
										}
									]
								}
							],
							"groups": [
								{
									"title": "Properties",
									"children": [
										1426,
										1392
									]
								},
								{
									"title": "Methods",
									"children": [
										1425,
										1424,
										1397,
										1417,
										1418,
										1407,
										1416,
										1411,
										1414,
										1415,
										1423,
										1422,
										1409,
										1421,
										1405,
										1398,
										1419,
										1406,
										1410,
										1395,
										1396,
										1412,
										1413,
										1399,
										1400,
										1401,
										1408,
										1402,
										1403,
										1394,
										1393,
										1404,
										1420
									]
								}
							],
							"sources": [
								{
									"fileName": "node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts",
									"line": 97,
									"character": 35
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Array.__@unscopables@444"
					}
				},
				{
					"id": 1131,
					"name": "current",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPublic": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The current track."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiQueue.ts",
							"line": 5,
							"character": 9,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiQueue.ts#L5"
						}
					],
					"type": {
						"type": "reference",
						"id": 1068,
						"name": "CosmiTrack"
					}
				},
				{
					"id": 1148,
					"name": "length",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Gets or sets the length of the array. This is a number one higher than the highest index in the array."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"line": 1305,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Array.length"
					}
				},
				{
					"id": 1132,
					"name": "previous",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPublic": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The previous track."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiQueue.ts",
							"line": 8,
							"character": 9,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiQueue.ts#L8"
						}
					],
					"type": {
						"type": "reference",
						"id": 1068,
						"name": "CosmiTrack"
					}
				},
				{
					"id": 1125,
					"name": "[species]",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isStatic": true,
						"isExternal": true,
						"isReadonly": true
					},
					"sources": [
						{
							"fileName": "node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts",
							"line": 316,
							"character": 13
						}
					],
					"type": {
						"type": "reference",
						"name": "ArrayConstructor",
						"qualifiedName": "ArrayConstructor",
						"package": "typescript"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Array.__@species@964"
					}
				},
				{
					"id": 1388,
					"name": "[iterator]",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/typescript/lib/lib.es2015.iterable.d.ts",
							"line": 58,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1389,
							"name": "[iterator]",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Iterator"
									}
								]
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 1068,
										"name": "CosmiTrack"
									}
								],
								"name": "IterableIterator",
								"qualifiedName": "IterableIterator",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.__@iterator@442"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Array.__@iterator@442"
					}
				},
				{
					"id": 1139,
					"name": "add",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiQueue.ts",
							"line": 29,
							"character": 9,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiQueue.ts#L29"
						}
					],
					"signatures": [
						{
							"id": 1140,
							"name": "add",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Adds a track to the queue."
									}
								]
							},
							"parameters": [
								{
									"id": 1141,
									"name": "tracks",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 1068,
												"name": "CosmiTrack"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 1068,
													"name": "CosmiTrack"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 1090,
								"name": "CosmiQueue"
							}
						}
					]
				},
				{
					"id": 1385,
					"name": "at",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/typescript/lib/lib.es2022.array.d.ts",
							"line": 24,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1386,
							"name": "at",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns the item located at the specified index."
									}
								]
							},
							"parameters": [
								{
									"id": 1387,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The zero-based index of the desired code unit. A negative index will count back from the last item."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 1068,
								"name": "CosmiTrack"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.at"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Array.at"
					}
				},
				{
					"id": 1135,
					"name": "clear",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiQueue.ts",
							"line": 19,
							"character": 9,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiQueue.ts#L19"
						}
					],
					"signatures": [
						{
							"id": 1136,
							"name": "clear",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Clears the queue."
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 1158,
					"name": "concat",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"line": 1329,
							"character": 4
						},
						{
							"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"line": 1335,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1159,
							"name": "concat",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Combines two or more arrays.\nThis method returns a new array without modifying any existing arrays."
									}
								]
							},
							"parameters": [
								{
									"id": 1160,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isRest": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Additional arrays and/or items to add to the end of the array."
											}
										]
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "reference",
													"id": 1068,
													"name": "CosmiTrack"
												}
											],
											"name": "ConcatArray",
											"qualifiedName": "ConcatArray",
											"package": "typescript"
										}
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 1068,
									"name": "CosmiTrack"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.concat"
							}
						},
						{
							"id": 1161,
							"name": "concat",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Combines two or more arrays.\nThis method returns a new array without modifying any existing arrays."
									}
								]
							},
							"parameters": [
								{
									"id": 1162,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isRest": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Additional arrays and/or items to add to the end of the array."
											}
										]
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "union",
											"types": [
												{
													"type": "reference",
													"id": 1068,
													"name": "CosmiTrack"
												},
												{
													"type": "reference",
													"typeArguments": [
														{
															"type": "reference",
															"id": 1068,
															"name": "CosmiTrack"
														}
													],
													"name": "ConcatArray",
													"qualifiedName": "ConcatArray",
													"package": "typescript"
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 1068,
									"name": "CosmiTrack"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.concat"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Array.concat"
					}
				},
				{
					"id": 1352,
					"name": "copyWithin",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/typescript/lib/lib.es2015.core.d.ts",
							"line": 62,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1353,
							"name": "copyWithin",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns the this object after copying a section of the array identified by start and end\nto the same array starting at position target"
									}
								]
							},
							"parameters": [
								{
									"id": 1354,
									"name": "target",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "If target is negative, it is treated as length+target where length is the\nlength of the array."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1355,
									"name": "start",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "If start is negative, it is treated as length+start. If end is negative, it\nis treated as length+end."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1356,
									"name": "end",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "If not specified, length of the this object is used as its default value."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 1090,
								"name": "CosmiQueue"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.copyWithin"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Array.copyWithin"
					}
				},
				{
					"id": 1133,
					"name": "duration",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiQueue.ts",
							"line": 11,
							"character": 9,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiQueue.ts#L11"
						}
					],
					"signatures": [
						{
							"id": 1134,
							"name": "duration",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The duration of the queue."
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 1357,
					"name": "entries",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/typescript/lib/lib.es2015.iterable.d.ts",
							"line": 63,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1358,
							"name": "entries",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns an iterable of key, value pairs for every entry in the array"
									}
								]
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "tuple",
										"elements": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"id": 1068,
												"name": "CosmiTrack"
											}
										]
									}
								],
								"name": "IterableIterator",
								"qualifiedName": "IterableIterator",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.entries"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Array.entries"
					}
				},
				{
					"id": 1200,
					"name": "every",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"line": 1412,
							"character": 4
						},
						{
							"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"line": 1421,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1201,
							"name": "every",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Determines whether all the members of an array satisfy the specified test."
									}
								]
							},
							"typeParameter": [
								{
									"id": 1202,
									"name": "S",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"id": 1068,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1202,
												"name": "S",
												"qualifiedName": "S",
												"package": "typescript"
											}
										],
										"name": "CosmiTrack"
									}
								}
							],
							"parameters": [
								{
									"id": 1203,
									"name": "predicate",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A function that accepts up to three arguments. The every method calls\nthe predicate function for each element in the array until the predicate returns a value\nwhich is coercible to the Boolean value false, or until the end of the array."
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1204,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
													"line": 1412,
													"character": 34
												}
											],
											"signatures": [
												{
													"id": 1205,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 1206,
															"name": "value",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"id": 1068,
																"name": "CosmiTrack"
															}
														},
														{
															"id": 1207,
															"name": "index",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 1208,
															"name": "array",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "reference",
																	"id": 1068,
																	"name": "CosmiTrack"
																}
															}
														}
													],
													"type": {
														"type": "predicate",
														"name": "value",
														"asserts": false,
														"targetType": {
															"type": "reference",
															"id": 1202,
															"name": "S",
															"qualifiedName": "S",
															"package": "typescript"
														}
													}
												}
											]
										}
									}
								},
								{
									"id": 1209,
									"name": "thisArg",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "An object to which the this keyword can refer in the predicate function.\nIf thisArg is omitted, undefined is used as the this value."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "predicate",
								"name": "this",
								"asserts": false,
								"targetType": {
									"type": "array",
									"elementType": {
										"type": "reference",
										"id": 1202,
										"name": "S",
										"qualifiedName": "S",
										"package": "typescript"
									}
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.every"
							}
						},
						{
							"id": 1210,
							"name": "every",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Determines whether all the members of an array satisfy the specified test."
									}
								]
							},
							"parameters": [
								{
									"id": 1211,
									"name": "predicate",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A function that accepts up to three arguments. The every method calls\nthe predicate function for each element in the array until the predicate returns a value\nwhich is coercible to the Boolean value false, or until the end of the array."
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1212,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
													"line": 1421,
													"character": 21
												}
											],
											"signatures": [
												{
													"id": 1213,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 1214,
															"name": "value",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"id": 1068,
																"name": "CosmiTrack"
															}
														},
														{
															"id": 1215,
															"name": "index",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 1216,
															"name": "array",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "reference",
																	"id": 1068,
																	"name": "CosmiTrack"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "unknown"
													}
												}
											]
										}
									}
								},
								{
									"id": 1217,
									"name": "thisArg",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "An object to which the this keyword can refer in the predicate function.\nIf thisArg is omitted, undefined is used as the this value."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.every"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Array.every"
					}
				},
				{
					"id": 1347,
					"name": "fill",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/typescript/lib/lib.es2015.core.d.ts",
							"line": 51,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1348,
							"name": "fill",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Changes all array elements from "
									},
									{
										"kind": "code",
										"text": "`start`"
									},
									{
										"kind": "text",
										"text": " to "
									},
									{
										"kind": "code",
										"text": "`end`"
									},
									{
										"kind": "text",
										"text": " index to a static "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " and returns the modified array"
									}
								]
							},
							"parameters": [
								{
									"id": 1349,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "value to fill array section with"
											}
										]
									},
									"type": {
										"type": "reference",
										"id": 1068,
										"name": "CosmiTrack"
									}
								},
								{
									"id": 1350,
									"name": "start",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "index to start filling the array at. If start is negative, it is treated as\nlength+start where length is the length of the array."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1351,
									"name": "end",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "index to stop filling the array at. If end is negative, it is treated as\nlength+end."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 1090,
								"name": "CosmiQueue"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.fill"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Array.fill"
					}
				},
				{
					"id": 1246,
					"name": "filter",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"line": 1448,
							"character": 4
						},
						{
							"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"line": 1454,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1247,
							"name": "filter",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns the elements of an array that meet the condition specified in a callback function."
									}
								]
							},
							"typeParameter": [
								{
									"id": 1248,
									"name": "S",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"id": 1068,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1248,
												"name": "S",
												"qualifiedName": "S",
												"package": "typescript"
											}
										],
										"name": "CosmiTrack"
									}
								}
							],
							"parameters": [
								{
									"id": 1249,
									"name": "predicate",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A function that accepts up to three arguments. The filter method calls the predicate function one time for each element in the array."
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1250,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
													"line": 1448,
													"character": 35
												}
											],
											"signatures": [
												{
													"id": 1251,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 1252,
															"name": "value",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"id": 1068,
																"name": "CosmiTrack"
															}
														},
														{
															"id": 1253,
															"name": "index",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 1254,
															"name": "array",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "reference",
																	"id": 1068,
																	"name": "CosmiTrack"
																}
															}
														}
													],
													"type": {
														"type": "predicate",
														"name": "value",
														"asserts": false,
														"targetType": {
															"type": "reference",
															"id": 1248,
															"name": "S",
															"qualifiedName": "S",
															"package": "typescript"
														}
													}
												}
											]
										}
									}
								},
								{
									"id": 1255,
									"name": "thisArg",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "An object to which the this keyword can refer in the predicate function. If thisArg is omitted, undefined is used as the this value."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 1248,
									"name": "S",
									"qualifiedName": "S",
									"package": "typescript"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.filter"
							}
						},
						{
							"id": 1256,
							"name": "filter",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns the elements of an array that meet the condition specified in a callback function."
									}
								]
							},
							"parameters": [
								{
									"id": 1257,
									"name": "predicate",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A function that accepts up to three arguments. The filter method calls the predicate function one time for each element in the array."
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1258,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
													"line": 1454,
													"character": 22
												}
											],
											"signatures": [
												{
													"id": 1259,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 1260,
															"name": "value",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"id": 1068,
																"name": "CosmiTrack"
															}
														},
														{
															"id": 1261,
															"name": "index",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 1262,
															"name": "array",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "reference",
																	"id": 1068,
																	"name": "CosmiTrack"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "unknown"
													}
												}
											]
										}
									}
								},
								{
									"id": 1263,
									"name": "thisArg",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "An object to which the this keyword can refer in the predicate function. If thisArg is omitted, undefined is used as the this value."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 1068,
									"name": "CosmiTrack"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.filter"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Array.filter"
					}
				},
				{
					"id": 1320,
					"name": "find",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/typescript/lib/lib.es2015.core.d.ts",
							"line": 29,
							"character": 4
						},
						{
							"fileName": "node_modules/typescript/lib/lib.es2015.core.d.ts",
							"line": 30,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1321,
							"name": "find",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns the value of the first element in the array where predicate is true, and undefined\notherwise."
									}
								]
							},
							"typeParameter": [
								{
									"id": 1322,
									"name": "S",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"id": 1068,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1322,
												"name": "S",
												"qualifiedName": "S",
												"package": "typescript"
											}
										],
										"name": "CosmiTrack"
									}
								}
							],
							"parameters": [
								{
									"id": 1323,
									"name": "predicate",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "find calls predicate once for each element of the array, in ascending\norder, until it finds one where predicate returns true. If such an element is found, find\nimmediately returns that element value. Otherwise, find returns undefined."
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1324,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/typescript/lib/lib.es2015.core.d.ts",
													"line": 29,
													"character": 33
												}
											],
											"signatures": [
												{
													"id": 1325,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 1326,
															"name": "value",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"id": 1068,
																"name": "CosmiTrack"
															}
														},
														{
															"id": 1327,
															"name": "index",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 1328,
															"name": "obj",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "reference",
																	"id": 1068,
																	"name": "CosmiTrack"
																}
															}
														}
													],
													"type": {
														"type": "predicate",
														"name": "value",
														"asserts": false,
														"targetType": {
															"type": "reference",
															"id": 1322,
															"name": "S",
															"qualifiedName": "S",
															"package": "typescript"
														}
													}
												}
											]
										}
									}
								},
								{
									"id": 1329,
									"name": "thisArg",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "If provided, it will be used as the this value for each invocation of\npredicate. If it is not provided, undefined is used instead."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 1322,
								"name": "S",
								"qualifiedName": "S",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.find"
							}
						},
						{
							"id": 1330,
							"name": "find",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 1331,
									"name": "predicate",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1332,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/typescript/lib/lib.es2015.core.d.ts",
													"line": 30,
													"character": 20
												}
											],
											"signatures": [
												{
													"id": 1333,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 1334,
															"name": "value",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"id": 1068,
																"name": "CosmiTrack"
															}
														},
														{
															"id": 1335,
															"name": "index",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 1336,
															"name": "obj",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "reference",
																	"id": 1068,
																	"name": "CosmiTrack"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "unknown"
													}
												}
											]
										}
									}
								},
								{
									"id": 1337,
									"name": "thisArg",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 1068,
								"name": "CosmiTrack"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.find"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Array.find"
					}
				},
				{
					"id": 1338,
					"name": "findIndex",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/typescript/lib/lib.es2015.core.d.ts",
							"line": 41,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1339,
							"name": "findIndex",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns the index of the first element in the array where predicate is true, and -1\notherwise."
									}
								]
							},
							"parameters": [
								{
									"id": 1340,
									"name": "predicate",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "find calls predicate once for each element of the array, in ascending\norder, until it finds one where predicate returns true. If such an element is found,\nfindIndex immediately returns that element index. Otherwise, findIndex returns -1."
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1341,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/typescript/lib/lib.es2015.core.d.ts",
													"line": 41,
													"character": 25
												}
											],
											"signatures": [
												{
													"id": 1342,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 1343,
															"name": "value",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"id": 1068,
																"name": "CosmiTrack"
															}
														},
														{
															"id": 1344,
															"name": "index",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 1345,
															"name": "obj",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "reference",
																	"id": 1068,
																	"name": "CosmiTrack"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "unknown"
													}
												}
											]
										}
									}
								},
								{
									"id": 1346,
									"name": "thisArg",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "If provided, it will be used as the this value for each invocation of\npredicate. If it is not provided, undefined is used instead."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.findIndex"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Array.findIndex"
					}
				},
				{
					"id": 1379,
					"name": "flat",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/typescript/lib/lib.es2019.array.d.ts",
							"line": 79,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1380,
							"name": "flat",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth."
									}
								]
							},
							"typeParameter": [
								{
									"id": 1381,
									"name": "A",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExternal": true
									}
								},
								{
									"id": 1382,
									"name": "D",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"default": {
										"type": "literal",
										"value": 1
									}
								}
							],
							"parameters": [
								{
									"id": 1383,
									"name": "this",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"id": 1381,
										"name": "A",
										"qualifiedName": "A",
										"package": "typescript"
									}
								},
								{
									"id": 1384,
									"name": "depth",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The maximum recursion depth"
											}
										]
									},
									"type": {
										"type": "reference",
										"id": 1382,
										"name": "D",
										"qualifiedName": "D",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"typeArguments": [
										{
											"type": "reference",
											"id": 1381,
											"name": "A",
											"qualifiedName": "A",
											"package": "typescript"
										},
										{
											"type": "reference",
											"id": 1382,
											"name": "D",
											"qualifiedName": "D",
											"package": "typescript"
										}
									],
									"name": "FlatArray",
									"qualifiedName": "FlatArray",
									"package": "typescript"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.flat"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Array.flat"
					}
				},
				{
					"id": 1367,
					"name": "flatMap",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/typescript/lib/lib.es2019.array.d.ts",
							"line": 68,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1368,
							"name": "flatMap",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Calls a defined callback function on each element of an array. Then, flattens the result into\na new array.\nThis is identical to a map followed by flat with depth 1."
									}
								]
							},
							"typeParameter": [
								{
									"id": 1369,
									"name": "U",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExternal": true
									}
								},
								{
									"id": 1370,
									"name": "This",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExternal": true
									},
									"default": {
										"type": "intrinsic",
										"name": "undefined"
									}
								}
							],
							"parameters": [
								{
									"id": 1371,
									"name": "callback",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A function that accepts up to three arguments. The flatMap method calls the\ncallback function one time for each element in the array."
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1372,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/typescript/lib/lib.es2019.array.d.ts",
													"line": 69,
													"character": 18
												}
											],
											"signatures": [
												{
													"id": 1373,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 1374,
															"name": "this",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"id": 1370,
																"name": "This",
																"qualifiedName": "This",
																"package": "typescript"
															}
														},
														{
															"id": 1375,
															"name": "value",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"id": 1068,
																"name": "CosmiTrack"
															}
														},
														{
															"id": 1376,
															"name": "index",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 1377,
															"name": "array",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "reference",
																	"id": 1068,
																	"name": "CosmiTrack"
																}
															}
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"id": 1369,
																"name": "U",
																"qualifiedName": "U",
																"package": "typescript"
															},
															{
																"type": "typeOperator",
																"operator": "readonly",
																"target": {
																	"type": "array",
																	"elementType": {
																		"type": "reference",
																		"id": 1369,
																		"name": "U",
																		"qualifiedName": "U",
																		"package": "typescript"
																	}
																}
															}
														]
													}
												}
											]
										}
									}
								},
								{
									"id": 1378,
									"name": "thisArg",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "An object to which the this keyword can refer in the callback function. If\nthisArg is omitted, undefined is used as the this value."
											}
										]
									},
									"type": {
										"type": "reference",
										"id": 1370,
										"name": "This",
										"qualifiedName": "This",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 1369,
									"name": "U",
									"qualifiedName": "U",
									"package": "typescript"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.flatMap"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Array.flatMap"
					}
				},
				{
					"id": 1227,
					"name": "forEach",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"line": 1436,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1228,
							"name": "forEach",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Performs the specified action for each element in an array."
									}
								]
							},
							"parameters": [
								{
									"id": 1229,
									"name": "callbackfn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array."
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1230,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
													"line": 1436,
													"character": 24
												}
											],
											"signatures": [
												{
													"id": 1231,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 1232,
															"name": "value",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"id": 1068,
																"name": "CosmiTrack"
															}
														},
														{
															"id": 1233,
															"name": "index",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 1234,
															"name": "array",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "reference",
																	"id": 1068,
																	"name": "CosmiTrack"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 1235,
									"name": "thisArg",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.forEach"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Array.forEach"
					}
				},
				{
					"id": 1363,
					"name": "includes",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/typescript/lib/lib.es2016.array.include.d.ts",
							"line": 25,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1364,
							"name": "includes",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Determines whether an array includes a certain element, returning true or false as appropriate."
									}
								]
							},
							"parameters": [
								{
									"id": 1365,
									"name": "searchElement",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The element to search for."
											}
										]
									},
									"type": {
										"type": "reference",
										"id": 1068,
										"name": "CosmiTrack"
									}
								},
								{
									"id": 1366,
									"name": "fromIndex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The position in this array at which to begin searching for searchElement."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.includes"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Array.includes"
					}
				},
				{
					"id": 1192,
					"name": "indexOf",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"line": 1397,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1193,
							"name": "indexOf",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns the index of the first occurrence of a value in an array, or -1 if it is not present."
									}
								]
							},
							"parameters": [
								{
									"id": 1194,
									"name": "searchElement",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The value to locate in the array."
											}
										]
									},
									"type": {
										"type": "reference",
										"id": 1068,
										"name": "CosmiTrack"
									}
								},
								{
									"id": 1195,
									"name": "fromIndex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.indexOf"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Array.indexOf"
					}
				},
				{
					"id": 1163,
					"name": "join",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"line": 1340,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1164,
							"name": "join",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Adds all the elements of an array into a string, separated by the specified separator string."
									}
								]
							},
							"parameters": [
								{
									"id": 1165,
									"name": "separator",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A string used to separate one element of the array from the next in the resulting string. If omitted, the array elements are separated with a comma."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.join"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Array.join"
					}
				},
				{
					"id": 1359,
					"name": "keys",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/typescript/lib/lib.es2015.iterable.d.ts",
							"line": 68,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1360,
							"name": "keys",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns an iterable of keys in the array"
									}
								]
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "number"
									}
								],
								"name": "IterableIterator",
								"qualifiedName": "IterableIterator",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.keys"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Array.keys"
					}
				},
				{
					"id": 1196,
					"name": "lastIndexOf",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"line": 1403,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1197,
							"name": "lastIndexOf",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns the index of the last occurrence of a specified value in an array, or -1 if it is not present."
									}
								]
							},
							"parameters": [
								{
									"id": 1198,
									"name": "searchElement",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The value to locate in the array."
											}
										]
									},
									"type": {
										"type": "reference",
										"id": 1068,
										"name": "CosmiTrack"
									}
								},
								{
									"id": 1199,
									"name": "fromIndex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The array index at which to begin searching backward. If fromIndex is omitted, the search starts at the last index in the array."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.lastIndexOf"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Array.lastIndexOf"
					}
				},
				{
					"id": 1236,
					"name": "map",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"line": 1442,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1237,
							"name": "map",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Calls a defined callback function on each element of an array, and returns an array that contains the results."
									}
								]
							},
							"typeParameter": [
								{
									"id": 1238,
									"name": "U",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExternal": true
									}
								}
							],
							"parameters": [
								{
									"id": 1239,
									"name": "callbackfn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array."
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1240,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
													"line": 1442,
													"character": 23
												}
											],
											"signatures": [
												{
													"id": 1241,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 1242,
															"name": "value",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"id": 1068,
																"name": "CosmiTrack"
															}
														},
														{
															"id": 1243,
															"name": "index",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 1244,
															"name": "array",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "reference",
																	"id": 1068,
																	"name": "CosmiTrack"
																}
															}
														}
													],
													"type": {
														"type": "reference",
														"id": 1238,
														"name": "U",
														"qualifiedName": "U",
														"package": "typescript"
													}
												}
											]
										}
									}
								},
								{
									"id": 1245,
									"name": "thisArg",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 1238,
									"name": "U",
									"qualifiedName": "U",
									"package": "typescript"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.map"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Array.map"
					}
				},
				{
					"id": 1153,
					"name": "pop",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"line": 1318,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1154,
							"name": "pop",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Removes the last element from an array and returns it.\nIf the array is empty, undefined is returned and the array is not modified."
									}
								]
							},
							"type": {
								"type": "reference",
								"id": 1068,
								"name": "CosmiTrack"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.pop"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Array.pop"
					}
				},
				{
					"id": 1155,
					"name": "push",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"line": 1323,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1156,
							"name": "push",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Appends new elements to the end of an array, and returns the new length of the array."
									}
								]
							},
							"parameters": [
								{
									"id": 1157,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isRest": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "New elements to add to the array."
											}
										]
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 1068,
											"name": "CosmiTrack"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.push"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Array.push"
					}
				},
				{
					"id": 1264,
					"name": "reduce",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"line": 1460,
							"character": 4
						},
						{
							"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"line": 1461,
							"character": 4
						},
						{
							"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"line": 1467,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1265,
							"name": "reduce",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function."
									}
								]
							},
							"parameters": [
								{
									"id": 1266,
									"name": "callbackfn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array."
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1267,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
													"line": 1460,
													"character": 23
												}
											],
											"signatures": [
												{
													"id": 1268,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 1269,
															"name": "previousValue",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"id": 1068,
																"name": "CosmiTrack"
															}
														},
														{
															"id": 1270,
															"name": "currentValue",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"id": 1068,
																"name": "CosmiTrack"
															}
														},
														{
															"id": 1271,
															"name": "currentIndex",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 1272,
															"name": "array",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "reference",
																	"id": 1068,
																	"name": "CosmiTrack"
																}
															}
														}
													],
													"type": {
														"type": "reference",
														"id": 1068,
														"name": "CosmiTrack"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 1068,
								"name": "CosmiTrack"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.reduce"
							}
						},
						{
							"id": 1273,
							"name": "reduce",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 1274,
									"name": "callbackfn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1275,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
													"line": 1461,
													"character": 23
												}
											],
											"signatures": [
												{
													"id": 1276,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 1277,
															"name": "previousValue",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"id": 1068,
																"name": "CosmiTrack"
															}
														},
														{
															"id": 1278,
															"name": "currentValue",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"id": 1068,
																"name": "CosmiTrack"
															}
														},
														{
															"id": 1279,
															"name": "currentIndex",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 1280,
															"name": "array",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "reference",
																	"id": 1068,
																	"name": "CosmiTrack"
																}
															}
														}
													],
													"type": {
														"type": "reference",
														"id": 1068,
														"name": "CosmiTrack"
													}
												}
											]
										}
									}
								},
								{
									"id": 1281,
									"name": "initialValue",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"id": 1068,
										"name": "CosmiTrack"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 1068,
								"name": "CosmiTrack"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.reduce"
							}
						},
						{
							"id": 1282,
							"name": "reduce",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function."
									}
								]
							},
							"typeParameter": [
								{
									"id": 1283,
									"name": "U",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExternal": true
									}
								}
							],
							"parameters": [
								{
									"id": 1284,
									"name": "callbackfn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array."
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1285,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
													"line": 1467,
													"character": 26
												}
											],
											"signatures": [
												{
													"id": 1286,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 1287,
															"name": "previousValue",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"id": 1283,
																"name": "U",
																"qualifiedName": "U",
																"package": "typescript"
															}
														},
														{
															"id": 1288,
															"name": "currentValue",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"id": 1068,
																"name": "CosmiTrack"
															}
														},
														{
															"id": 1289,
															"name": "currentIndex",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 1290,
															"name": "array",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "reference",
																	"id": 1068,
																	"name": "CosmiTrack"
																}
															}
														}
													],
													"type": {
														"type": "reference",
														"id": 1283,
														"name": "U",
														"qualifiedName": "U",
														"package": "typescript"
													}
												}
											]
										}
									}
								},
								{
									"id": 1291,
									"name": "initialValue",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value."
											}
										]
									},
									"type": {
										"type": "reference",
										"id": 1283,
										"name": "U",
										"qualifiedName": "U",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 1283,
								"name": "U",
								"qualifiedName": "U",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.reduce"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Array.reduce"
					}
				},
				{
					"id": 1292,
					"name": "reduceRight",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"line": 1473,
							"character": 4
						},
						{
							"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"line": 1474,
							"character": 4
						},
						{
							"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"line": 1480,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1293,
							"name": "reduceRight",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function."
									}
								]
							},
							"parameters": [
								{
									"id": 1294,
									"name": "callbackfn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array."
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1295,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
													"line": 1473,
													"character": 28
												}
											],
											"signatures": [
												{
													"id": 1296,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 1297,
															"name": "previousValue",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"id": 1068,
																"name": "CosmiTrack"
															}
														},
														{
															"id": 1298,
															"name": "currentValue",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"id": 1068,
																"name": "CosmiTrack"
															}
														},
														{
															"id": 1299,
															"name": "currentIndex",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 1300,
															"name": "array",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "reference",
																	"id": 1068,
																	"name": "CosmiTrack"
																}
															}
														}
													],
													"type": {
														"type": "reference",
														"id": 1068,
														"name": "CosmiTrack"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 1068,
								"name": "CosmiTrack"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.reduceRight"
							}
						},
						{
							"id": 1301,
							"name": "reduceRight",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 1302,
									"name": "callbackfn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1303,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
													"line": 1474,
													"character": 28
												}
											],
											"signatures": [
												{
													"id": 1304,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 1305,
															"name": "previousValue",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"id": 1068,
																"name": "CosmiTrack"
															}
														},
														{
															"id": 1306,
															"name": "currentValue",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"id": 1068,
																"name": "CosmiTrack"
															}
														},
														{
															"id": 1307,
															"name": "currentIndex",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 1308,
															"name": "array",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "reference",
																	"id": 1068,
																	"name": "CosmiTrack"
																}
															}
														}
													],
													"type": {
														"type": "reference",
														"id": 1068,
														"name": "CosmiTrack"
													}
												}
											]
										}
									}
								},
								{
									"id": 1309,
									"name": "initialValue",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"id": 1068,
										"name": "CosmiTrack"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 1068,
								"name": "CosmiTrack"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.reduceRight"
							}
						},
						{
							"id": 1310,
							"name": "reduceRight",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function."
									}
								]
							},
							"typeParameter": [
								{
									"id": 1311,
									"name": "U",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExternal": true
									}
								}
							],
							"parameters": [
								{
									"id": 1312,
									"name": "callbackfn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array."
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1313,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
													"line": 1480,
													"character": 31
												}
											],
											"signatures": [
												{
													"id": 1314,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 1315,
															"name": "previousValue",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"id": 1311,
																"name": "U",
																"qualifiedName": "U",
																"package": "typescript"
															}
														},
														{
															"id": 1316,
															"name": "currentValue",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"id": 1068,
																"name": "CosmiTrack"
															}
														},
														{
															"id": 1317,
															"name": "currentIndex",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 1318,
															"name": "array",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "reference",
																	"id": 1068,
																	"name": "CosmiTrack"
																}
															}
														}
													],
													"type": {
														"type": "reference",
														"id": 1311,
														"name": "U",
														"qualifiedName": "U",
														"package": "typescript"
													}
												}
											]
										}
									}
								},
								{
									"id": 1319,
									"name": "initialValue",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value."
											}
										]
									},
									"type": {
										"type": "reference",
										"id": 1311,
										"name": "U",
										"qualifiedName": "U",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 1311,
								"name": "U",
								"qualifiedName": "U",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.reduceRight"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Array.reduceRight"
					}
				},
				{
					"id": 1142,
					"name": "remove",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiQueue.ts",
							"line": 50,
							"character": 9,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiQueue.ts#L50"
						},
						{
							"fileName": "src/lib/CosmiQueue.ts",
							"line": 53,
							"character": 9,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiQueue.ts#L53"
						},
						{
							"fileName": "src/lib/CosmiQueue.ts",
							"line": 56,
							"character": 9,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiQueue.ts#L56"
						}
					],
					"signatures": [
						{
							"id": 1143,
							"name": "remove",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Removes the track at the specified position."
									}
								]
							},
							"parameters": [
								{
									"id": 1144,
									"name": "position",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 1068,
								"name": "CosmiTrack"
							}
						},
						{
							"id": 1145,
							"name": "remove",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Removes the tracks in the specified range."
									}
								]
							},
							"parameters": [
								{
									"id": 1146,
									"name": "start",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1147,
									"name": "end",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 1068,
									"name": "CosmiTrack"
								}
							}
						}
					]
				},
				{
					"id": 1166,
					"name": "reverse",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"line": 1345,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1167,
							"name": "reverse",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Reverses the elements in an array in place.\nThis method mutates the array and returns a reference to the same array."
									}
								]
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 1068,
									"name": "CosmiTrack"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.reverse"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Array.reverse"
					}
				},
				{
					"id": 1168,
					"name": "shift",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"line": 1350,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1169,
							"name": "shift",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Removes the first element from an array and returns it.\nIf the array is empty, undefined is returned and the array is not modified."
									}
								]
							},
							"type": {
								"type": "reference",
								"id": 1068,
								"name": "CosmiTrack"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.shift"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Array.shift"
					}
				},
				{
					"id": 1137,
					"name": "shuffle",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiQueue.ts",
							"line": 24,
							"character": 9,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiQueue.ts#L24"
						}
					],
					"signatures": [
						{
							"id": 1138,
							"name": "shuffle",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Shuffles the queue."
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 1170,
					"name": "slice",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"line": 1360,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1171,
							"name": "slice",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns a copy of a section of an array.\nFor both start and end, a negative index can be used to indicate an offset from the end of the array.\nFor example, -2 refers to the second to last element of the array."
									}
								]
							},
							"parameters": [
								{
									"id": 1172,
									"name": "start",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The beginning index of the specified portion of the array.\nIf start is undefined, then the slice begins at index 0."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1173,
									"name": "end",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The end index of the specified portion of the array. This is exclusive of the element at the index 'end'.\nIf end is undefined, then the slice extends to the end of the array."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 1068,
									"name": "CosmiTrack"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.slice"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Array.slice"
					}
				},
				{
					"id": 1218,
					"name": "some",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"line": 1430,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1219,
							"name": "some",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Determines whether the specified callback function returns true for any element of an array."
									}
								]
							},
							"parameters": [
								{
									"id": 1220,
									"name": "predicate",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A function that accepts up to three arguments. The some method calls\nthe predicate function for each element in the array until the predicate returns a value\nwhich is coercible to the Boolean value true, or until the end of the array."
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1221,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
													"line": 1430,
													"character": 20
												}
											],
											"signatures": [
												{
													"id": 1222,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 1223,
															"name": "value",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"id": 1068,
																"name": "CosmiTrack"
															}
														},
														{
															"id": 1224,
															"name": "index",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 1225,
															"name": "array",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "reference",
																	"id": 1068,
																	"name": "CosmiTrack"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "unknown"
													}
												}
											]
										}
									}
								},
								{
									"id": 1226,
									"name": "thisArg",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "An object to which the this keyword can refer in the predicate function.\nIf thisArg is omitted, undefined is used as the this value."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.some"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Array.some"
					}
				},
				{
					"id": 1174,
					"name": "sort",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"line": 1371,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1175,
							"name": "sort",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Sorts an array in place.\nThis method mutates the array and returns a reference to the same array."
									}
								]
							},
							"parameters": [
								{
									"id": 1176,
									"name": "compareFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Function used to determine the order of the elements. It is expected to return\na negative value if the first argument is less than the second argument, zero if they're equal, and a positive\nvalue otherwise. If omitted, the elements are sorted in ascending, ASCII character order.\n"
											},
											{
												"kind": "code",
												"text": "```ts\n[11,2,22,1].sort((a, b) => a - b)\n```"
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1177,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
													"line": 1371,
													"character": 21
												}
											],
											"signatures": [
												{
													"id": 1178,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 1179,
															"name": "a",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"id": 1068,
																"name": "CosmiTrack"
															}
														},
														{
															"id": 1180,
															"name": "b",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"id": 1068,
																"name": "CosmiTrack"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 1090,
								"name": "CosmiQueue"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.sort"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Array.sort"
					}
				},
				{
					"id": 1181,
					"name": "splice",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"line": 1378,
							"character": 4
						},
						{
							"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"line": 1386,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1182,
							"name": "splice",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "An array containing the elements that were deleted."
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1183,
									"name": "start",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The zero-based location in the array from which to start removing elements."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1184,
									"name": "deleteCount",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The number of elements to remove."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 1068,
									"name": "CosmiTrack"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.splice"
							}
						},
						{
							"id": 1185,
							"name": "splice",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "An array containing the elements that were deleted."
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1186,
									"name": "start",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The zero-based location in the array from which to start removing elements."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1187,
									"name": "deleteCount",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The number of elements to remove."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1188,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isRest": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Elements to insert into the array in place of the deleted elements."
											}
										]
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 1068,
											"name": "CosmiTrack"
										}
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 1068,
									"name": "CosmiTrack"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.splice"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Array.splice"
					}
				},
				{
					"id": 1151,
					"name": "toLocaleString",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"line": 1313,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1152,
							"name": "toLocaleString",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns a string representation of an array. The elements are converted to string using their toLocaleString methods."
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.toLocaleString"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Array.toLocaleString"
					}
				},
				{
					"id": 1149,
					"name": "toString",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"line": 1309,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1150,
							"name": "toString",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns a string representation of an array."
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.toString"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Array.toString"
					}
				},
				{
					"id": 1189,
					"name": "unshift",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"line": 1391,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1190,
							"name": "unshift",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Inserts new elements at the start of an array, and returns the new length of the array."
									}
								]
							},
							"parameters": [
								{
									"id": 1191,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isRest": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Elements to insert at the start of the array."
											}
										]
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 1068,
											"name": "CosmiTrack"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.unshift"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Array.unshift"
					}
				},
				{
					"id": 1361,
					"name": "values",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/typescript/lib/lib.es2015.iterable.d.ts",
							"line": 73,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1362,
							"name": "values",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns an iterable of values in the array"
									}
								]
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 1068,
										"name": "CosmiTrack"
									}
								],
								"name": "IterableIterator",
								"qualifiedName": "IterableIterator",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.values"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Array.values"
					}
				},
				{
					"id": 1094,
					"name": "from",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/typescript/lib/lib.es2015.core.d.ts",
							"line": 70,
							"character": 4
						},
						{
							"fileName": "node_modules/typescript/lib/lib.es2015.core.d.ts",
							"line": 78,
							"character": 4
						},
						{
							"fileName": "node_modules/typescript/lib/lib.es2015.iterable.d.ts",
							"line": 81,
							"character": 4
						},
						{
							"fileName": "node_modules/typescript/lib/lib.es2015.iterable.d.ts",
							"line": 89,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1095,
							"name": "from",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Creates an array from an array-like object."
									}
								]
							},
							"typeParameter": [
								{
									"id": 1096,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExternal": true
									}
								}
							],
							"parameters": [
								{
									"id": 1097,
									"name": "arrayLike",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "An array-like object to convert to an array."
											}
										]
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 1096,
												"name": "T",
												"qualifiedName": "T",
												"package": "typescript"
											}
										],
										"name": "ArrayLike",
										"qualifiedName": "ArrayLike",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 1096,
									"name": "T",
									"qualifiedName": "T",
									"package": "typescript"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.from"
							}
						},
						{
							"id": 1098,
							"name": "from",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Creates an array from an iterable object."
									}
								]
							},
							"typeParameter": [
								{
									"id": 1099,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExternal": true
									}
								},
								{
									"id": 1100,
									"name": "U",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExternal": true
									}
								}
							],
							"parameters": [
								{
									"id": 1101,
									"name": "arrayLike",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "An array-like object to convert to an array."
											}
										]
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 1099,
												"name": "T",
												"qualifiedName": "T",
												"package": "typescript"
											}
										],
										"name": "ArrayLike",
										"qualifiedName": "ArrayLike",
										"package": "typescript"
									}
								},
								{
									"id": 1102,
									"name": "mapfn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A mapping function to call on every element of the array."
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1103,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/typescript/lib/lib.es2015.core.d.ts",
													"line": 78,
													"character": 47
												}
											],
											"signatures": [
												{
													"id": 1104,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 1105,
															"name": "v",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"id": 1099,
																"name": "T",
																"qualifiedName": "T",
																"package": "typescript"
															}
														},
														{
															"id": 1106,
															"name": "k",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"type": {
														"type": "reference",
														"id": 1100,
														"name": "U",
														"qualifiedName": "U",
														"package": "typescript"
													}
												}
											]
										}
									}
								},
								{
									"id": 1107,
									"name": "thisArg",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Value of 'this' used to invoke the mapfn."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 1100,
									"name": "U",
									"qualifiedName": "U",
									"package": "typescript"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.from"
							}
						},
						{
							"id": 1108,
							"name": "from",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Creates an array from an iterable object."
									}
								]
							},
							"typeParameter": [
								{
									"id": 1109,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExternal": true
									}
								}
							],
							"parameters": [
								{
									"id": 1110,
									"name": "iterable",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "An iterable object to convert to an array."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 1109,
														"name": "T",
														"qualifiedName": "T",
														"package": "typescript"
													}
												],
												"name": "Iterable",
												"qualifiedName": "Iterable",
												"package": "typescript"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 1109,
														"name": "T",
														"qualifiedName": "T",
														"package": "typescript"
													}
												],
												"name": "ArrayLike",
												"qualifiedName": "ArrayLike",
												"package": "typescript"
											}
										]
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 1109,
									"name": "T",
									"qualifiedName": "T",
									"package": "typescript"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.from"
							}
						},
						{
							"id": 1111,
							"name": "from",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Creates an array from an iterable object."
									}
								]
							},
							"typeParameter": [
								{
									"id": 1112,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExternal": true
									}
								},
								{
									"id": 1113,
									"name": "U",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExternal": true
									}
								}
							],
							"parameters": [
								{
									"id": 1114,
									"name": "iterable",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "An iterable object to convert to an array."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 1112,
														"name": "T",
														"qualifiedName": "T",
														"package": "typescript"
													}
												],
												"name": "Iterable",
												"qualifiedName": "Iterable",
												"package": "typescript"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 1112,
														"name": "T",
														"qualifiedName": "T",
														"package": "typescript"
													}
												],
												"name": "ArrayLike",
												"qualifiedName": "ArrayLike",
												"package": "typescript"
											}
										]
									}
								},
								{
									"id": 1115,
									"name": "mapfn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A mapping function to call on every element of the array."
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1116,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/typescript/lib/lib.es2015.iterable.d.ts",
													"line": 89,
													"character": 60
												}
											],
											"signatures": [
												{
													"id": 1117,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 1118,
															"name": "v",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"id": 1112,
																"name": "T",
																"qualifiedName": "T",
																"package": "typescript"
															}
														},
														{
															"id": 1119,
															"name": "k",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"type": {
														"type": "reference",
														"id": 1113,
														"name": "U",
														"qualifiedName": "U",
														"package": "typescript"
													}
												}
											]
										}
									}
								},
								{
									"id": 1120,
									"name": "thisArg",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Value of 'this' used to invoke the mapfn."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 1113,
									"name": "U",
									"qualifiedName": "U",
									"package": "typescript"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.from"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Array.from"
					}
				},
				{
					"id": 1091,
					"name": "isArray",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"line": 1492,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1092,
							"name": "isArray",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 1093,
									"name": "arg",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "predicate",
								"name": "arg",
								"asserts": false,
								"targetType": {
									"type": "array",
									"elementType": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.isArray"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Array.isArray"
					}
				},
				{
					"id": 1121,
					"name": "of",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/typescript/lib/lib.es2015.core.d.ts",
							"line": 84,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1122,
							"name": "of",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns a new array from a set of elements."
									}
								]
							},
							"typeParameter": [
								{
									"id": 1123,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExternal": true
									}
								}
							],
							"parameters": [
								{
									"id": 1124,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isRest": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A set of elements to include in the new array object."
											}
										]
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 1123,
											"name": "T",
											"qualifiedName": "T",
											"package": "typescript"
										}
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 1123,
									"name": "T",
									"qualifiedName": "T",
									"package": "typescript"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.of"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Array.of"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						1126
					]
				},
				{
					"title": "Properties",
					"children": [
						1390,
						1131,
						1148,
						1132,
						1125
					]
				},
				{
					"title": "Methods",
					"children": [
						1388,
						1139,
						1385,
						1135,
						1158,
						1352,
						1133,
						1357,
						1200,
						1347,
						1246,
						1320,
						1338,
						1379,
						1367,
						1227,
						1363,
						1192,
						1163,
						1359,
						1196,
						1236,
						1153,
						1155,
						1264,
						1292,
						1142,
						1166,
						1168,
						1137,
						1170,
						1218,
						1174,
						1181,
						1151,
						1149,
						1189,
						1361,
						1094,
						1091,
						1121
					]
				}
			],
			"sources": [
				{
					"fileName": "src/lib/CosmiQueue.ts",
					"line": 3,
					"character": 13,
					"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiQueue.ts#L3"
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"typeArguments": [
						{
							"type": "reference",
							"id": 1068,
							"name": "CosmiTrack"
						}
					],
					"name": "Array",
					"qualifiedName": "Array",
					"package": "typescript"
				}
			]
		},
		{
			"id": 148,
			"name": "CosmiREST",
			"kind": 128,
			"kindString": "Class",
			"flags": {},
			"children": [
				{
					"id": 149,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {},
					"sources": [
						{
							"fileName": "src/lib/CosmiRest.ts",
							"line": 26,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiRest.ts#L26"
						}
					],
					"signatures": [
						{
							"id": 150,
							"name": "new CosmiREST",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Creates a new REST API"
									}
								]
							},
							"parameters": [
								{
									"id": 151,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 233,
										"name": "CosmiNode"
									}
								},
								{
									"id": 152,
									"name": "baseURL",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 153,
									"name": "timeout",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 148,
								"name": "CosmiREST"
							}
						}
					]
				},
				{
					"id": 154,
					"name": "baseURL",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The base URL of the REST API"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiRest.ts",
							"line": 17,
							"character": 9,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiRest.ts#L17"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 155,
					"name": "node",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The cosminode"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiRest.ts",
							"line": 20,
							"character": 9,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiRest.ts#L20"
						}
					],
					"type": {
						"type": "reference",
						"id": 233,
						"name": "CosmiNode"
					}
				},
				{
					"id": 156,
					"name": "timeout",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The timeout for requests"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiRest.ts",
							"line": 23,
							"character": 9,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiRest.ts#L23"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 217,
					"name": "decodeTrack",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiRest.ts",
							"line": 175,
							"character": 15,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiRest.ts#L175"
						}
					],
					"signatures": [
						{
							"id": 218,
							"name": "decodeTrack",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Decodes the track"
									}
								]
							},
							"parameters": [
								{
									"id": 219,
									"name": "base64",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 220,
									"name": "trace",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "false"
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 1577,
										"name": "RestTrackDecode"
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 221,
					"name": "decodeTracks",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiRest.ts",
							"line": 188,
							"character": 15,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiRest.ts#L188"
						}
					],
					"signatures": [
						{
							"id": 222,
							"name": "decodeTracks",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Decode multiple tracks"
									}
								]
							},
							"parameters": [
								{
									"id": 223,
									"name": "trackData",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								},
								{
									"id": 224,
									"name": "trace",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "false"
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 1563,
											"name": "RestTrack"
										}
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 171,
					"name": "delete",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiRest.ts",
							"line": 53,
							"character": 15,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiRest.ts#L53"
						}
					],
					"signatures": [
						{
							"id": 172,
							"name": "delete",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Sends a DELETE request to the REST API"
									}
								]
							},
							"parameters": [
								{
									"id": 173,
									"name": "endpoint",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 203,
					"name": "deletePlayer",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiRest.ts",
							"line": 135,
							"character": 15,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiRest.ts#L135"
						}
					],
					"signatures": [
						{
							"id": 204,
							"name": "deletePlayer",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Deletes the player for this guild."
									}
								]
							},
							"parameters": [
								{
									"id": 205,
									"name": "sessionId",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 206,
									"name": "guildId",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 207,
									"name": "trace",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "false"
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 160,
					"name": "get",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiRest.ts",
							"line": 38,
							"character": 15,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiRest.ts#L38"
						}
					],
					"signatures": [
						{
							"id": 161,
							"name": "get",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Sends a GET request to the REST API"
									}
								]
							},
							"parameters": [
								{
									"id": 162,
									"name": "endpoint",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 225,
					"name": "getInfo",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiRest.ts",
							"line": 202,
							"character": 15,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiRest.ts#L202"
						}
					],
					"signatures": [
						{
							"id": 226,
							"name": "getInfo",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Get lavalink info"
									}
								]
							},
							"parameters": [
								{
									"id": 227,
									"name": "trace",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "false"
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 1518,
										"name": "RestInfo"
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 191,
					"name": "getPlayer",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiRest.ts",
							"line": 104,
							"character": 15,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiRest.ts#L104"
						}
					],
					"signatures": [
						{
							"id": 192,
							"name": "getPlayer",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns the player for this guild if it exists."
									}
								]
							},
							"parameters": [
								{
									"id": 193,
									"name": "sessionId",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 194,
									"name": "guildId",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 195,
									"name": "trace",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "false"
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 1541,
										"name": "RestPlayer"
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 187,
					"name": "getPlayersFromSession",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiRest.ts",
							"line": 93,
							"character": 15,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiRest.ts#L93"
						}
					],
					"signatures": [
						{
							"id": 188,
							"name": "getPlayersFromSession",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Gets the info of the node"
									}
								]
							},
							"parameters": [
								{
									"id": 189,
									"name": "sessionId",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 190,
									"name": "trace",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "false"
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 1541,
											"name": "RestPlayer"
										}
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 228,
					"name": "getStats",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiRest.ts",
							"line": 210,
							"character": 15,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiRest.ts#L210"
						}
					],
					"signatures": [
						{
							"id": 229,
							"name": "getStats",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Get lavalink stats"
									}
								]
							},
							"parameters": [
								{
									"id": 230,
									"name": "trace",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "false"
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 1482,
										"name": "RestLavalinkStats"
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 231,
					"name": "getVersion",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiRest.ts",
							"line": 218,
							"character": 15,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiRest.ts#L218"
						}
					],
					"signatures": [
						{
							"id": 232,
							"name": "getVersion",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Get lavalink version"
									}
								]
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 184,
					"name": "isError",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiRest.ts",
							"line": 88,
							"character": 9,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiRest.ts#L88"
						}
					],
					"signatures": [
						{
							"id": 185,
							"name": "isError",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Checks if the response is an error"
									}
								]
							},
							"parameters": [
								{
									"id": 186,
									"name": "res",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "predicate",
								"name": "res",
								"asserts": false,
								"targetType": {
									"type": "reference",
									"id": 1468,
									"name": "RestError"
								}
							}
						}
					]
				},
				{
					"id": 214,
					"name": "loadTracks",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiRest.ts",
							"line": 163,
							"character": 15,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiRest.ts#L163"
						}
					],
					"signatures": [
						{
							"id": 215,
							"name": "loadTracks",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Loads the tracks from the node"
									}
								]
							},
							"parameters": [
								{
									"id": 216,
									"name": "identifier",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 1536,
										"name": "RestTrackLoadResult"
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 174,
					"name": "patch",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiRest.ts",
							"line": 58,
							"character": 15,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiRest.ts#L58"
						}
					],
					"signatures": [
						{
							"id": 175,
							"name": "patch",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Sends a PATCH request to the REST API"
									}
								]
							},
							"parameters": [
								{
									"id": 176,
									"name": "endpoint",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 177,
									"name": "body",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"name": "BodyInit",
										"qualifiedName": "BodyInit",
										"package": "@types/node-fetch"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 163,
					"name": "post",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiRest.ts",
							"line": 43,
							"character": 15,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiRest.ts#L43"
						}
					],
					"signatures": [
						{
							"id": 164,
							"name": "post",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Sends a POST request to the REST API"
									}
								]
							},
							"parameters": [
								{
									"id": 165,
									"name": "endpoint",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 166,
									"name": "body",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"name": "BodyInit",
										"qualifiedName": "BodyInit",
										"package": "@types/node-fetch"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 167,
					"name": "put",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiRest.ts",
							"line": 48,
							"character": 15,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiRest.ts#L48"
						}
					],
					"signatures": [
						{
							"id": 168,
							"name": "put",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Sends a PUT request to the REST API"
									}
								]
							},
							"parameters": [
								{
									"id": 169,
									"name": "endpoint",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 170,
									"name": "body",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"name": "BodyInit",
										"qualifiedName": "BodyInit",
										"package": "@types/node-fetch"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 178,
					"name": "request",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiRest.ts",
							"line": 63,
							"character": 15,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiRest.ts#L63"
						}
					],
					"signatures": [
						{
							"id": 179,
							"name": "request",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Sends a request to the REST API and returns the text/json"
									}
								]
							},
							"parameters": [
								{
									"id": 180,
									"name": "method",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 181,
									"name": "endpoint",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 182,
									"name": "body",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"name": "BodyInit",
										"qualifiedName": "BodyInit",
										"package": "@types/node-fetch"
									}
								},
								{
									"id": 183,
									"name": "text",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "false"
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 157,
					"name": "setBaseURL",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiRest.ts",
							"line": 33,
							"character": 9,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiRest.ts#L33"
						}
					],
					"signatures": [
						{
							"id": 158,
							"name": "setBaseURL",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Sets the base URL of the REST API"
									}
								]
							},
							"parameters": [
								{
									"id": 159,
									"name": "baseURL",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 196,
					"name": "updatePlayer",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiRest.ts",
							"line": 118,
							"character": 15,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiRest.ts#L118"
						}
					],
					"signatures": [
						{
							"id": 197,
							"name": "updatePlayer",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Updates or creates the player for this guild."
									}
								]
							},
							"parameters": [
								{
									"id": 198,
									"name": "sessionId",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 199,
									"name": "guildId",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 200,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1548,
										"name": "RestPlayerUpdate"
									}
								},
								{
									"id": 201,
									"name": "noReplace",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "false"
								},
								{
									"id": 202,
									"name": "trace",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "false"
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 1541,
										"name": "RestPlayer"
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 208,
					"name": "updateSession",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiRest.ts",
							"line": 147,
							"character": 15,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiRest.ts#L147"
						}
					],
					"signatures": [
						{
							"id": 209,
							"name": "updateSession",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update session information"
									}
								]
							},
							"parameters": [
								{
									"id": 210,
									"name": "sessionId",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 211,
									"name": "resumingKey",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 212,
									"name": "timeout",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 213,
									"name": "trace",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "false"
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 1502,
										"name": "RestSessionInfo"
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						149
					]
				},
				{
					"title": "Properties",
					"children": [
						154,
						155,
						156
					]
				},
				{
					"title": "Methods",
					"children": [
						217,
						221,
						171,
						203,
						160,
						225,
						191,
						187,
						228,
						231,
						184,
						214,
						174,
						163,
						167,
						178,
						157,
						196,
						208
					]
				}
			],
			"sources": [
				{
					"fileName": "src/lib/CosmiRest.ts",
					"line": 15,
					"character": 13,
					"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiRest.ts#L15"
				}
			]
		},
		{
			"id": 381,
			"name": "CosmiSocket",
			"kind": 128,
			"kindString": "Class",
			"flags": {},
			"children": [
				{
					"id": 426,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {},
					"sources": [
						{
							"fileName": "src/lib/CosmiSocket.ts",
							"line": 27,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiSocket.ts#L27"
						}
					],
					"signatures": [
						{
							"id": 427,
							"name": "new CosmiSocket",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Creates a new websocket"
									}
								]
							},
							"parameters": [
								{
									"id": 428,
									"name": "manager",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1,
										"name": "Cosmicord"
									}
								},
								{
									"id": 429,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 233,
										"name": "CosmiNode"
									}
								},
								{
									"id": 430,
									"name": "url",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 431,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"name": "ClientOptions",
										"qualifiedName": "WebSocket.ClientOptions",
										"package": "@types/ws"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 381,
								"name": "CosmiSocket"
							},
							"overwrites": {
								"type": "reference",
								"name": "WebSocket.constructor"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "WebSocket.constructor"
					}
				},
				{
					"id": 472,
					"name": "CLOSED",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isReadonly": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The connection is closed."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/ws/index.d.ts",
							"line": 82,
							"character": 13
						}
					],
					"type": {
						"type": "literal",
						"value": 3
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "WebSocket.CLOSED"
					}
				},
				{
					"id": 471,
					"name": "CLOSING",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isReadonly": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The connection is in the process of closing."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/ws/index.d.ts",
							"line": 80,
							"character": 13
						}
					],
					"type": {
						"type": "literal",
						"value": 2
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "WebSocket.CLOSING"
					}
				},
				{
					"id": 469,
					"name": "CONNECTING",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isReadonly": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The connection is not yet open."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/ws/index.d.ts",
							"line": 76,
							"character": 13
						}
					],
					"type": {
						"type": "literal",
						"value": 0
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "WebSocket.CONNECTING"
					}
				},
				{
					"id": 470,
					"name": "OPEN",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isReadonly": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The connection is open and ready to communicate."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/ws/index.d.ts",
							"line": 78,
							"character": 13
						}
					],
					"type": {
						"type": "literal",
						"value": 1
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "WebSocket.OPEN"
					}
				},
				{
					"id": 462,
					"name": "binaryType",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/ws/index.d.ts",
							"line": 61,
							"character": 4
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "nodebuffer"
							},
							{
								"type": "literal",
								"value": "arraybuffer"
							},
							{
								"type": "literal",
								"value": "fragments"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "WebSocket.binaryType"
					}
				},
				{
					"id": 463,
					"name": "bufferedAmount",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isReadonly": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/ws/index.d.ts",
							"line": 62,
							"character": 13
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "WebSocket.bufferedAmount"
					}
				},
				{
					"id": 464,
					"name": "extensions",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isReadonly": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/ws/index.d.ts",
							"line": 63,
							"character": 13
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "WebSocket.extensions"
					}
				},
				{
					"id": 465,
					"name": "isPaused",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isReadonly": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Indicates whether the websocket is paused"
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/ws/index.d.ts",
							"line": 65,
							"character": 13
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "WebSocket.isPaused"
					}
				},
				{
					"id": 432,
					"name": "manager",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The cosmicord manager"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiSocket.ts",
							"line": 18,
							"character": 9,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiSocket.ts#L18"
						}
					],
					"type": {
						"type": "reference",
						"id": 1,
						"name": "Cosmicord"
					}
				},
				{
					"id": 433,
					"name": "node",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The cosminode"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiSocket.ts",
							"line": 21,
							"character": 9,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiSocket.ts#L21"
						}
					],
					"type": {
						"type": "reference",
						"id": 233,
						"name": "CosmiNode"
					}
				},
				{
					"id": 481,
					"name": "onclose",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/ws/index.d.ts",
							"line": 86,
							"character": 4
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 482,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/ws/index.d.ts",
									"line": 86,
									"character": 14
								}
							],
							"signatures": [
								{
									"id": 483,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 484,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"name": "CloseEvent",
												"qualifiedName": "WebSocket.CloseEvent",
												"package": "@types/ws"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "WebSocket.onclose"
					}
				},
				{
					"id": 477,
					"name": "onerror",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/ws/index.d.ts",
							"line": 85,
							"character": 4
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 478,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/ws/index.d.ts",
									"line": 85,
									"character": 14
								}
							],
							"signatures": [
								{
									"id": 479,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 480,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"name": "ErrorEvent",
												"qualifiedName": "WebSocket.ErrorEvent",
												"package": "@types/ws"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "WebSocket.onerror"
					}
				},
				{
					"id": 485,
					"name": "onmessage",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/ws/index.d.ts",
							"line": 87,
							"character": 4
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 486,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/ws/index.d.ts",
									"line": 87,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 487,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 488,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"name": "MessageEvent",
												"qualifiedName": "WebSocket.MessageEvent",
												"package": "@types/ws"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "WebSocket.onmessage"
					}
				},
				{
					"id": 473,
					"name": "onopen",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/ws/index.d.ts",
							"line": 84,
							"character": 4
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 474,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/ws/index.d.ts",
									"line": 84,
									"character": 13
								}
							],
							"signatures": [
								{
									"id": 475,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 476,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"name": "Event",
												"qualifiedName": "WebSocket.Event",
												"package": "@types/ws"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "WebSocket.onopen"
					}
				},
				{
					"id": 466,
					"name": "protocol",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isReadonly": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/ws/index.d.ts",
							"line": 66,
							"character": 13
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "WebSocket.protocol"
					}
				},
				{
					"id": 467,
					"name": "readyState",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isReadonly": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The current state of the connection"
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/ws/index.d.ts",
							"line": 68,
							"character": 13
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": 0
							},
							{
								"type": "literal",
								"value": 1
							},
							{
								"type": "literal",
								"value": 2
							},
							{
								"type": "literal",
								"value": 3
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "WebSocket.readyState"
					}
				},
				{
					"id": 434,
					"name": "sessionId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The session id of the socket"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiSocket.ts",
							"line": 24,
							"character": 9,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiSocket.ts#L24"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 468,
					"name": "url",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isReadonly": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/ws/index.d.ts",
							"line": 73,
							"character": 13
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "WebSocket.url"
					}
				},
				{
					"id": 385,
					"name": "CLOSED",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isStatic": true,
						"isExternal": true,
						"isReadonly": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The connection is closed."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/ws/index.d.ts",
							"line": 59,
							"character": 20
						}
					],
					"type": {
						"type": "literal",
						"value": 3
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "WebSocket.CLOSED"
					}
				},
				{
					"id": 384,
					"name": "CLOSING",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isStatic": true,
						"isExternal": true,
						"isReadonly": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The connection is in the process of closing."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/ws/index.d.ts",
							"line": 57,
							"character": 20
						}
					],
					"type": {
						"type": "literal",
						"value": 2
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "WebSocket.CLOSING"
					}
				},
				{
					"id": 382,
					"name": "CONNECTING",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isStatic": true,
						"isExternal": true,
						"isReadonly": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The connection is not yet open."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/ws/index.d.ts",
							"line": 53,
							"character": 20
						}
					],
					"type": {
						"type": "literal",
						"value": 0
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "WebSocket.CONNECTING"
					}
				},
				{
					"id": 383,
					"name": "OPEN",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isStatic": true,
						"isExternal": true,
						"isReadonly": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The connection is open and ready to communicate."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/ws/index.d.ts",
							"line": 55,
							"character": 20
						}
					],
					"type": {
						"type": "literal",
						"value": 1
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "WebSocket.OPEN"
					}
				},
				{
					"id": 423,
					"name": "captureRejectionSymbol",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isStatic": true,
						"isExternal": true,
						"isReadonly": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 328,
							"character": 24
						}
					],
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"id": 39,
							"name": "captureRejectionSymbol",
							"qualifiedName": "EventEmitter.captureRejectionSymbol",
							"package": "@types/node"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "WebSocket.captureRejectionSymbol"
					}
				},
				{
					"id": 424,
					"name": "captureRejections",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "TODO: These should be described using static getter/setter pairs:"
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 333,
							"character": 15
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "WebSocket.captureRejections"
					}
				},
				{
					"id": 425,
					"name": "defaultMaxListeners",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 334,
							"character": 15
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "WebSocket.defaultMaxListeners"
					}
				},
				{
					"id": 422,
					"name": "errorMonitor",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isStatic": true,
						"isExternal": true,
						"isReadonly": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "This symbol shall be used to install a listener for only monitoring "
							},
							{
								"kind": "code",
								"text": "`'error'`"
							},
							{
								"kind": "text",
								"text": "\nevents. Listeners installed using this symbol are called before the regular\n"
							},
							{
								"kind": "code",
								"text": "`'error'`"
							},
							{
								"kind": "text",
								"text": " listeners are called.\n\nInstalling a listener using this symbol does not change the behavior once an\n"
							},
							{
								"kind": "code",
								"text": "`'error'`"
							},
							{
								"kind": "text",
								"text": " event is emitted, therefore the process will still crash if no\nregular "
							},
							{
								"kind": "code",
								"text": "`'error'`"
							},
							{
								"kind": "text",
								"text": " listener is installed."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 327,
							"character": 24
						}
					],
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"id": 38,
							"name": "errorMonitor",
							"qualifiedName": "EventEmitter.errorMonitor",
							"package": "@types/node"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "WebSocket.errorMonitor"
					}
				},
				{
					"id": 534,
					"name": "addEventListener",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/ws/index.d.ts",
							"line": 122,
							"character": 4
						},
						{
							"fileName": "node_modules/@types/ws/index.d.ts",
							"line": 127,
							"character": 4
						},
						{
							"fileName": "node_modules/@types/ws/index.d.ts",
							"line": 132,
							"character": 4
						},
						{
							"fileName": "node_modules/@types/ws/index.d.ts",
							"line": 137,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 535,
							"name": "addEventListener",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "HTML5 WebSocket events"
									}
								]
							},
							"parameters": [
								{
									"id": 536,
									"name": "method",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "literal",
										"value": "message"
									}
								},
								{
									"id": 537,
									"name": "cb",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 538,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/ws/index.d.ts",
													"line": 124,
													"character": 12
												}
											],
											"signatures": [
												{
													"id": 539,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 540,
															"name": "event",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"name": "MessageEvent",
																"qualifiedName": "WebSocket.MessageEvent",
																"package": "@types/ws"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 541,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"name": "EventListenerOptions",
										"qualifiedName": "WebSocket.EventListenerOptions",
										"package": "@types/ws"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "WebSocket.addEventListener"
							}
						},
						{
							"id": 542,
							"name": "addEventListener",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 543,
									"name": "method",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "literal",
										"value": "close"
									}
								},
								{
									"id": 544,
									"name": "cb",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 545,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/ws/index.d.ts",
													"line": 129,
													"character": 12
												}
											],
											"signatures": [
												{
													"id": 546,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 547,
															"name": "event",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"name": "CloseEvent",
																"qualifiedName": "WebSocket.CloseEvent",
																"package": "@types/ws"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 548,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"name": "EventListenerOptions",
										"qualifiedName": "WebSocket.EventListenerOptions",
										"package": "@types/ws"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "WebSocket.addEventListener"
							}
						},
						{
							"id": 549,
							"name": "addEventListener",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 550,
									"name": "method",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "literal",
										"value": "error"
									}
								},
								{
									"id": 551,
									"name": "cb",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 552,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/ws/index.d.ts",
													"line": 134,
													"character": 12
												}
											],
											"signatures": [
												{
													"id": 553,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 554,
															"name": "event",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"name": "ErrorEvent",
																"qualifiedName": "WebSocket.ErrorEvent",
																"package": "@types/ws"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 555,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"name": "EventListenerOptions",
										"qualifiedName": "WebSocket.EventListenerOptions",
										"package": "@types/ws"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "WebSocket.addEventListener"
							}
						},
						{
							"id": 556,
							"name": "addEventListener",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 557,
									"name": "method",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "literal",
										"value": "open"
									}
								},
								{
									"id": 558,
									"name": "cb",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 559,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/ws/index.d.ts",
													"line": 139,
													"character": 12
												}
											],
											"signatures": [
												{
													"id": 560,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 561,
															"name": "event",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"name": "Event",
																"qualifiedName": "WebSocket.Event",
																"package": "@types/ws"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 562,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"name": "EventListenerOptions",
										"qualifiedName": "WebSocket.EventListenerOptions",
										"package": "@types/ws"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "WebSocket.addEventListener"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "WebSocket.addEventListener"
					}
				},
				{
					"id": 765,
					"name": "addListener",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/ws/index.d.ts",
							"line": 185,
							"character": 4
						},
						{
							"fileName": "node_modules/@types/ws/index.d.ts",
							"line": 186,
							"character": 4
						},
						{
							"fileName": "node_modules/@types/ws/index.d.ts",
							"line": 187,
							"character": 4
						},
						{
							"fileName": "node_modules/@types/ws/index.d.ts",
							"line": 188,
							"character": 4
						},
						{
							"fileName": "node_modules/@types/ws/index.d.ts",
							"line": 189,
							"character": 4
						},
						{
							"fileName": "node_modules/@types/ws/index.d.ts",
							"line": 190,
							"character": 4
						},
						{
							"fileName": "node_modules/@types/ws/index.d.ts",
							"line": 191,
							"character": 4
						},
						{
							"fileName": "node_modules/@types/ws/index.d.ts",
							"line": 195,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 766,
							"name": "addListener",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 767,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "literal",
										"value": "close"
									}
								},
								{
									"id": 768,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 769,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/ws/index.d.ts",
													"line": 185,
													"character": 42
												}
											],
											"signatures": [
												{
													"id": 770,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 771,
															"name": "code",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 772,
															"name": "reason",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"name": "Buffer",
																"qualifiedName": "global.Buffer",
																"package": "@types/node"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 381,
								"name": "CosmiSocket"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "WebSocket.addListener"
							}
						},
						{
							"id": 773,
							"name": "addListener",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 774,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "literal",
										"value": "error"
									}
								},
								{
									"id": 775,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 776,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/ws/index.d.ts",
													"line": 186,
													"character": 42
												}
											],
											"signatures": [
												{
													"id": 777,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 778,
															"name": "err",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"name": "Error",
																"qualifiedName": "Error",
																"package": "typescript"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 381,
								"name": "CosmiSocket"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "WebSocket.addListener"
							}
						},
						{
							"id": 779,
							"name": "addListener",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 780,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "literal",
										"value": "upgrade"
									}
								},
								{
									"id": 781,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 782,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/ws/index.d.ts",
													"line": 187,
													"character": 44
												}
											],
											"signatures": [
												{
													"id": 783,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 784,
															"name": "request",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"name": "IncomingMessage",
																"qualifiedName": "IncomingMessage",
																"package": "@types/node"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 381,
								"name": "CosmiSocket"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "WebSocket.addListener"
							}
						},
						{
							"id": 785,
							"name": "addListener",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 786,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "literal",
										"value": "message"
									}
								},
								{
									"id": 787,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 788,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/ws/index.d.ts",
													"line": 188,
													"character": 44
												}
											],
											"signatures": [
												{
													"id": 789,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 790,
															"name": "data",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"name": "RawData",
																"qualifiedName": "WebSocket.RawData",
																"package": "@types/ws"
															}
														},
														{
															"id": 791,
															"name": "isBinary",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 381,
								"name": "CosmiSocket"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "WebSocket.addListener"
							}
						},
						{
							"id": 792,
							"name": "addListener",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 793,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "literal",
										"value": "open"
									}
								},
								{
									"id": 794,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 795,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/ws/index.d.ts",
													"line": 189,
													"character": 41
												}
											],
											"signatures": [
												{
													"id": 796,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 381,
								"name": "CosmiSocket"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "WebSocket.addListener"
							}
						},
						{
							"id": 797,
							"name": "addListener",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 798,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": "ping"
											},
											{
												"type": "literal",
												"value": "pong"
											}
										]
									}
								},
								{
									"id": 799,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 800,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/ws/index.d.ts",
													"line": 190,
													"character": 50
												}
											],
											"signatures": [
												{
													"id": 801,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 802,
															"name": "data",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"name": "Buffer",
																"qualifiedName": "global.Buffer",
																"package": "@types/node"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 381,
								"name": "CosmiSocket"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "WebSocket.addListener"
							}
						},
						{
							"id": 803,
							"name": "addListener",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 804,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "literal",
										"value": "unexpected-response"
									}
								},
								{
									"id": 805,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 806,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/ws/index.d.ts",
													"line": 193,
													"character": 18
												}
											],
											"signatures": [
												{
													"id": 807,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 808,
															"name": "request",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"name": "ClientRequest",
																"qualifiedName": "ClientRequest",
																"package": "@types/node"
															}
														},
														{
															"id": 809,
															"name": "response",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"name": "IncomingMessage",
																"qualifiedName": "IncomingMessage",
																"package": "@types/node"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 381,
								"name": "CosmiSocket"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "WebSocket.addListener"
							}
						},
						{
							"id": 810,
							"name": "addListener",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 811,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 812,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 813,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/ws/index.d.ts",
													"line": 195,
													"character": 50
												}
											],
											"signatures": [
												{
													"id": 814,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 815,
															"name": "args",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 381,
								"name": "CosmiSocket"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "WebSocket.addListener"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "WebSocket.addListener"
					}
				},
				{
					"id": 489,
					"name": "close",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/ws/index.d.ts",
							"line": 97,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 490,
							"name": "close",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 491,
									"name": "code",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 492,
									"name": "data",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"name": "Buffer",
												"qualifiedName": "global.Buffer",
												"package": "@types/node"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "WebSocket.close"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "WebSocket.close"
					}
				},
				{
					"id": 881,
					"name": "emit",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 610,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 882,
							"name": "emit",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Synchronously calls each of the listeners registered for the event named"
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ", in the order they were registered, passing the supplied arguments\nto each.\n\nReturns "
									},
									{
										"kind": "code",
										"text": "`true`"
									},
									{
										"kind": "text",
										"text": " if the event had listeners, "
									},
									{
										"kind": "code",
										"text": "`false`"
									},
									{
										"kind": "text",
										"text": " otherwise.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nconst EventEmitter = require('events');\nconst myEmitter = new EventEmitter();\n\n// First listener\nmyEmitter.on('event', function firstListener() {\n  console.log('Helloooo! first listener');\n});\n// Second listener\nmyEmitter.on('event', function secondListener(arg1, arg2) {\n  console.log(`event with parameters ${arg1}, ${arg2} in second listener`);\n});\n// Third listener\nmyEmitter.on('event', function thirdListener(...args) {\n  const parameters = args.join(', ');\n  console.log(`event with parameters ${parameters} in third listener`);\n});\n\nconsole.log(myEmitter.listeners('event'));\n\nmyEmitter.emit('event', 1, 2, 3, 4, 5);\n\n// Prints:\n// [\n//   [Function: firstListener],\n//   [Function: secondListener],\n//   [Function: thirdListener]\n// ]\n// Helloooo! first listener\n// event with parameters 1, 2 in second listener\n// event with parameters 1, 2, 3, 4, 5 in third listener\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.1.26"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 883,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 884,
									"name": "args",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isRest": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "WebSocket.emit"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "WebSocket.emit"
					}
				},
				{
					"id": 441,
					"name": "event",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiSocket.ts",
							"line": 93,
							"character": 12,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiSocket.ts#L93"
						}
					],
					"signatures": [
						{
							"id": 442,
							"name": "event",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Emits when a event is received"
									}
								]
							},
							"parameters": [
								{
									"id": 443,
									"name": "payload",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1653,
										"name": "EventsPayload"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 902,
					"name": "eventNames",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 669,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 903,
							"name": "eventNames",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns an array listing the events for which the emitter has registered\nlisteners. The values in the array are strings or "
									},
									{
										"kind": "code",
										"text": "`Symbol`"
									},
									{
										"kind": "text",
										"text": "s.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nconst EventEmitter = require('events');\nconst myEE = new EventEmitter();\nmyEE.on('foo', () => {});\nmyEE.on('bar', () => {});\n\nconst sym = Symbol('symbol');\nmyEE.on(sym, () => {});\n\nconsole.log(myEE.eventNames());\n// Prints: [ 'foo', 'bar', Symbol(symbol) ]\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v6.0.0"
											}
										]
									}
								]
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "union",
									"types": [
										{
											"type": "intrinsic",
											"name": "string"
										},
										{
											"type": "intrinsic",
											"name": "symbol"
										}
									]
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "WebSocket.eventNames"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "WebSocket.eventNames"
					}
				},
				{
					"id": 873,
					"name": "getMaxListeners",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 526,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 874,
							"name": "getMaxListeners",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns the current max listener value for the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " which is either\nset by "
									},
									{
										"kind": "code",
										"text": "`emitter.setMaxListeners(n)`"
									},
									{
										"kind": "text",
										"text": " or defaults to "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "defaultMaxListeners",
										"target": 425
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v1.0.0"
											}
										]
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "WebSocket.getMaxListeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "WebSocket.getMaxListeners"
					}
				},
				{
					"id": 885,
					"name": "listenerCount",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 616,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 886,
							"name": "listenerCount",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns the number of listeners listening to the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v3.2.0"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 887,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the event being listened for"
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "WebSocket.listenerCount"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "WebSocket.listenerCount"
					}
				},
				{
					"id": 875,
					"name": "listeners",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 539,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 876,
							"name": "listeners",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns a copy of the array of listeners for the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ".\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nserver.on('connection', (stream) => {\n  console.log('someone connected!');\n});\nconsole.log(util.inspect(server.listeners('connection')));\n// Prints: [ [Function] ]\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.1.26"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 877,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "Function",
									"qualifiedName": "Function",
									"package": "typescript"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "WebSocket.listeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "WebSocket.listeners"
					}
				},
				{
					"id": 706,
					"name": "off",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/ws/index.d.ts",
							"line": 173,
							"character": 4
						},
						{
							"fileName": "node_modules/@types/ws/index.d.ts",
							"line": 174,
							"character": 4
						},
						{
							"fileName": "node_modules/@types/ws/index.d.ts",
							"line": 175,
							"character": 4
						},
						{
							"fileName": "node_modules/@types/ws/index.d.ts",
							"line": 176,
							"character": 4
						},
						{
							"fileName": "node_modules/@types/ws/index.d.ts",
							"line": 177,
							"character": 4
						},
						{
							"fileName": "node_modules/@types/ws/index.d.ts",
							"line": 178,
							"character": 4
						},
						{
							"fileName": "node_modules/@types/ws/index.d.ts",
							"line": 179,
							"character": 4
						},
						{
							"fileName": "node_modules/@types/ws/index.d.ts",
							"line": 183,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 707,
							"name": "off",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 708,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "literal",
										"value": "close"
									}
								},
								{
									"id": 709,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 710,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/ws/index.d.ts",
													"line": 173,
													"character": 34
												}
											],
											"signatures": [
												{
													"id": 711,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 712,
															"name": "this",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"name": "WebSocket",
																"qualifiedName": "WebSocket",
																"package": "@types/ws"
															}
														},
														{
															"id": 713,
															"name": "code",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 714,
															"name": "reason",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"name": "Buffer",
																"qualifiedName": "global.Buffer",
																"package": "@types/node"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 381,
								"name": "CosmiSocket"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "WebSocket.off"
							}
						},
						{
							"id": 715,
							"name": "off",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 716,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "literal",
										"value": "error"
									}
								},
								{
									"id": 717,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 718,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/ws/index.d.ts",
													"line": 174,
													"character": 34
												}
											],
											"signatures": [
												{
													"id": 719,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 720,
															"name": "this",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"name": "WebSocket",
																"qualifiedName": "WebSocket",
																"package": "@types/ws"
															}
														},
														{
															"id": 721,
															"name": "err",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"name": "Error",
																"qualifiedName": "Error",
																"package": "typescript"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 381,
								"name": "CosmiSocket"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "WebSocket.off"
							}
						},
						{
							"id": 722,
							"name": "off",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 723,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "literal",
										"value": "upgrade"
									}
								},
								{
									"id": 724,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 725,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/ws/index.d.ts",
													"line": 175,
													"character": 36
												}
											],
											"signatures": [
												{
													"id": 726,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 727,
															"name": "this",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"name": "WebSocket",
																"qualifiedName": "WebSocket",
																"package": "@types/ws"
															}
														},
														{
															"id": 728,
															"name": "request",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"name": "IncomingMessage",
																"qualifiedName": "IncomingMessage",
																"package": "@types/node"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 381,
								"name": "CosmiSocket"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "WebSocket.off"
							}
						},
						{
							"id": 729,
							"name": "off",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 730,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "literal",
										"value": "message"
									}
								},
								{
									"id": 731,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 732,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/ws/index.d.ts",
													"line": 176,
													"character": 36
												}
											],
											"signatures": [
												{
													"id": 733,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 734,
															"name": "this",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"name": "WebSocket",
																"qualifiedName": "WebSocket",
																"package": "@types/ws"
															}
														},
														{
															"id": 735,
															"name": "data",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"name": "RawData",
																"qualifiedName": "WebSocket.RawData",
																"package": "@types/ws"
															}
														},
														{
															"id": 736,
															"name": "isBinary",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 381,
								"name": "CosmiSocket"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "WebSocket.off"
							}
						},
						{
							"id": 737,
							"name": "off",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 738,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "literal",
										"value": "open"
									}
								},
								{
									"id": 739,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 740,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/ws/index.d.ts",
													"line": 177,
													"character": 33
												}
											],
											"signatures": [
												{
													"id": 741,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 742,
															"name": "this",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"name": "WebSocket",
																"qualifiedName": "WebSocket",
																"package": "@types/ws"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 381,
								"name": "CosmiSocket"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "WebSocket.off"
							}
						},
						{
							"id": 743,
							"name": "off",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 744,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": "ping"
											},
											{
												"type": "literal",
												"value": "pong"
											}
										]
									}
								},
								{
									"id": 745,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 746,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/ws/index.d.ts",
													"line": 178,
													"character": 42
												}
											],
											"signatures": [
												{
													"id": 747,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 748,
															"name": "this",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"name": "WebSocket",
																"qualifiedName": "WebSocket",
																"package": "@types/ws"
															}
														},
														{
															"id": 749,
															"name": "data",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"name": "Buffer",
																"qualifiedName": "global.Buffer",
																"package": "@types/node"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 381,
								"name": "CosmiSocket"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "WebSocket.off"
							}
						},
						{
							"id": 750,
							"name": "off",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 751,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "literal",
										"value": "unexpected-response"
									}
								},
								{
									"id": 752,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 753,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/ws/index.d.ts",
													"line": 181,
													"character": 18
												}
											],
											"signatures": [
												{
													"id": 754,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 755,
															"name": "this",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"name": "WebSocket",
																"qualifiedName": "WebSocket",
																"package": "@types/ws"
															}
														},
														{
															"id": 756,
															"name": "request",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"name": "ClientRequest",
																"qualifiedName": "ClientRequest",
																"package": "@types/node"
															}
														},
														{
															"id": 757,
															"name": "response",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"name": "IncomingMessage",
																"qualifiedName": "IncomingMessage",
																"package": "@types/node"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 381,
								"name": "CosmiSocket"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "WebSocket.off"
							}
						},
						{
							"id": 758,
							"name": "off",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 759,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 760,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 761,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/ws/index.d.ts",
													"line": 183,
													"character": 42
												}
											],
											"signatures": [
												{
													"id": 762,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 763,
															"name": "this",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"name": "WebSocket",
																"qualifiedName": "WebSocket",
																"package": "@types/ws"
															}
														},
														{
															"id": 764,
															"name": "args",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 381,
								"name": "CosmiSocket"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "WebSocket.off"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "WebSocket.off"
					}
				},
				{
					"id": 588,
					"name": "on",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/ws/index.d.ts",
							"line": 149,
							"character": 4
						},
						{
							"fileName": "node_modules/@types/ws/index.d.ts",
							"line": 150,
							"character": 4
						},
						{
							"fileName": "node_modules/@types/ws/index.d.ts",
							"line": 151,
							"character": 4
						},
						{
							"fileName": "node_modules/@types/ws/index.d.ts",
							"line": 152,
							"character": 4
						},
						{
							"fileName": "node_modules/@types/ws/index.d.ts",
							"line": 153,
							"character": 4
						},
						{
							"fileName": "node_modules/@types/ws/index.d.ts",
							"line": 154,
							"character": 4
						},
						{
							"fileName": "node_modules/@types/ws/index.d.ts",
							"line": 155,
							"character": 4
						},
						{
							"fileName": "node_modules/@types/ws/index.d.ts",
							"line": 159,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 589,
							"name": "on",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Events"
									}
								]
							},
							"parameters": [
								{
									"id": 590,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "literal",
										"value": "close"
									}
								},
								{
									"id": 591,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 592,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/ws/index.d.ts",
													"line": 149,
													"character": 33
												}
											],
											"signatures": [
												{
													"id": 593,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 594,
															"name": "this",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"name": "WebSocket",
																"qualifiedName": "WebSocket",
																"package": "@types/ws"
															}
														},
														{
															"id": 595,
															"name": "code",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 596,
															"name": "reason",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"name": "Buffer",
																"qualifiedName": "global.Buffer",
																"package": "@types/node"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 381,
								"name": "CosmiSocket"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "WebSocket.on"
							}
						},
						{
							"id": 597,
							"name": "on",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 598,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "literal",
										"value": "error"
									}
								},
								{
									"id": 599,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 600,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/ws/index.d.ts",
													"line": 150,
													"character": 33
												}
											],
											"signatures": [
												{
													"id": 601,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 602,
															"name": "this",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"name": "WebSocket",
																"qualifiedName": "WebSocket",
																"package": "@types/ws"
															}
														},
														{
															"id": 603,
															"name": "err",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"name": "Error",
																"qualifiedName": "Error",
																"package": "typescript"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 381,
								"name": "CosmiSocket"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "WebSocket.on"
							}
						},
						{
							"id": 604,
							"name": "on",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 605,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "literal",
										"value": "upgrade"
									}
								},
								{
									"id": 606,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 607,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/ws/index.d.ts",
													"line": 151,
													"character": 35
												}
											],
											"signatures": [
												{
													"id": 608,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 609,
															"name": "this",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"name": "WebSocket",
																"qualifiedName": "WebSocket",
																"package": "@types/ws"
															}
														},
														{
															"id": 610,
															"name": "request",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"name": "IncomingMessage",
																"qualifiedName": "IncomingMessage",
																"package": "@types/node"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 381,
								"name": "CosmiSocket"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "WebSocket.on"
							}
						},
						{
							"id": 611,
							"name": "on",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 612,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "literal",
										"value": "message"
									}
								},
								{
									"id": 613,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 614,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/ws/index.d.ts",
													"line": 152,
													"character": 35
												}
											],
											"signatures": [
												{
													"id": 615,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 616,
															"name": "this",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"name": "WebSocket",
																"qualifiedName": "WebSocket",
																"package": "@types/ws"
															}
														},
														{
															"id": 617,
															"name": "data",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"name": "RawData",
																"qualifiedName": "WebSocket.RawData",
																"package": "@types/ws"
															}
														},
														{
															"id": 618,
															"name": "isBinary",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 381,
								"name": "CosmiSocket"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "WebSocket.on"
							}
						},
						{
							"id": 619,
							"name": "on",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 620,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "literal",
										"value": "open"
									}
								},
								{
									"id": 621,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 622,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/ws/index.d.ts",
													"line": 153,
													"character": 32
												}
											],
											"signatures": [
												{
													"id": 623,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 624,
															"name": "this",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"name": "WebSocket",
																"qualifiedName": "WebSocket",
																"package": "@types/ws"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 381,
								"name": "CosmiSocket"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "WebSocket.on"
							}
						},
						{
							"id": 625,
							"name": "on",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 626,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": "ping"
											},
											{
												"type": "literal",
												"value": "pong"
											}
										]
									}
								},
								{
									"id": 627,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 628,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/ws/index.d.ts",
													"line": 154,
													"character": 41
												}
											],
											"signatures": [
												{
													"id": 629,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 630,
															"name": "this",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"name": "WebSocket",
																"qualifiedName": "WebSocket",
																"package": "@types/ws"
															}
														},
														{
															"id": 631,
															"name": "data",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"name": "Buffer",
																"qualifiedName": "global.Buffer",
																"package": "@types/node"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 381,
								"name": "CosmiSocket"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "WebSocket.on"
							}
						},
						{
							"id": 632,
							"name": "on",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 633,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "literal",
										"value": "unexpected-response"
									}
								},
								{
									"id": 634,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 635,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/ws/index.d.ts",
													"line": 157,
													"character": 18
												}
											],
											"signatures": [
												{
													"id": 636,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 637,
															"name": "this",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"name": "WebSocket",
																"qualifiedName": "WebSocket",
																"package": "@types/ws"
															}
														},
														{
															"id": 638,
															"name": "request",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"name": "ClientRequest",
																"qualifiedName": "ClientRequest",
																"package": "@types/node"
															}
														},
														{
															"id": 639,
															"name": "response",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"name": "IncomingMessage",
																"qualifiedName": "IncomingMessage",
																"package": "@types/node"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 381,
								"name": "CosmiSocket"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "WebSocket.on"
							}
						},
						{
							"id": 640,
							"name": "on",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 641,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 642,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 643,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/ws/index.d.ts",
													"line": 159,
													"character": 41
												}
											],
											"signatures": [
												{
													"id": 644,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 645,
															"name": "this",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"name": "WebSocket",
																"qualifiedName": "WebSocket",
																"package": "@types/ws"
															}
														},
														{
															"id": 646,
															"name": "args",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 381,
								"name": "CosmiSocket"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "WebSocket.on"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "WebSocket.on"
					}
				},
				{
					"id": 647,
					"name": "once",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/ws/index.d.ts",
							"line": 161,
							"character": 4
						},
						{
							"fileName": "node_modules/@types/ws/index.d.ts",
							"line": 162,
							"character": 4
						},
						{
							"fileName": "node_modules/@types/ws/index.d.ts",
							"line": 163,
							"character": 4
						},
						{
							"fileName": "node_modules/@types/ws/index.d.ts",
							"line": 164,
							"character": 4
						},
						{
							"fileName": "node_modules/@types/ws/index.d.ts",
							"line": 165,
							"character": 4
						},
						{
							"fileName": "node_modules/@types/ws/index.d.ts",
							"line": 166,
							"character": 4
						},
						{
							"fileName": "node_modules/@types/ws/index.d.ts",
							"line": 167,
							"character": 4
						},
						{
							"fileName": "node_modules/@types/ws/index.d.ts",
							"line": 171,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 648,
							"name": "once",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 649,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "literal",
										"value": "close"
									}
								},
								{
									"id": 650,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 651,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/ws/index.d.ts",
													"line": 161,
													"character": 35
												}
											],
											"signatures": [
												{
													"id": 652,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 653,
															"name": "this",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"name": "WebSocket",
																"qualifiedName": "WebSocket",
																"package": "@types/ws"
															}
														},
														{
															"id": 654,
															"name": "code",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 655,
															"name": "reason",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"name": "Buffer",
																"qualifiedName": "global.Buffer",
																"package": "@types/node"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 381,
								"name": "CosmiSocket"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "WebSocket.once"
							}
						},
						{
							"id": 656,
							"name": "once",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 657,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "literal",
										"value": "error"
									}
								},
								{
									"id": 658,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 659,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/ws/index.d.ts",
													"line": 162,
													"character": 35
												}
											],
											"signatures": [
												{
													"id": 660,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 661,
															"name": "this",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"name": "WebSocket",
																"qualifiedName": "WebSocket",
																"package": "@types/ws"
															}
														},
														{
															"id": 662,
															"name": "err",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"name": "Error",
																"qualifiedName": "Error",
																"package": "typescript"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 381,
								"name": "CosmiSocket"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "WebSocket.once"
							}
						},
						{
							"id": 663,
							"name": "once",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 664,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "literal",
										"value": "upgrade"
									}
								},
								{
									"id": 665,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 666,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/ws/index.d.ts",
													"line": 163,
													"character": 37
												}
											],
											"signatures": [
												{
													"id": 667,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 668,
															"name": "this",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"name": "WebSocket",
																"qualifiedName": "WebSocket",
																"package": "@types/ws"
															}
														},
														{
															"id": 669,
															"name": "request",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"name": "IncomingMessage",
																"qualifiedName": "IncomingMessage",
																"package": "@types/node"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 381,
								"name": "CosmiSocket"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "WebSocket.once"
							}
						},
						{
							"id": 670,
							"name": "once",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 671,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "literal",
										"value": "message"
									}
								},
								{
									"id": 672,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 673,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/ws/index.d.ts",
													"line": 164,
													"character": 37
												}
											],
											"signatures": [
												{
													"id": 674,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 675,
															"name": "this",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"name": "WebSocket",
																"qualifiedName": "WebSocket",
																"package": "@types/ws"
															}
														},
														{
															"id": 676,
															"name": "data",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"name": "RawData",
																"qualifiedName": "WebSocket.RawData",
																"package": "@types/ws"
															}
														},
														{
															"id": 677,
															"name": "isBinary",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 381,
								"name": "CosmiSocket"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "WebSocket.once"
							}
						},
						{
							"id": 678,
							"name": "once",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 679,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "literal",
										"value": "open"
									}
								},
								{
									"id": 680,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 681,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/ws/index.d.ts",
													"line": 165,
													"character": 34
												}
											],
											"signatures": [
												{
													"id": 682,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 683,
															"name": "this",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"name": "WebSocket",
																"qualifiedName": "WebSocket",
																"package": "@types/ws"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 381,
								"name": "CosmiSocket"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "WebSocket.once"
							}
						},
						{
							"id": 684,
							"name": "once",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 685,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": "ping"
											},
											{
												"type": "literal",
												"value": "pong"
											}
										]
									}
								},
								{
									"id": 686,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 687,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/ws/index.d.ts",
													"line": 166,
													"character": 43
												}
											],
											"signatures": [
												{
													"id": 688,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 689,
															"name": "this",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"name": "WebSocket",
																"qualifiedName": "WebSocket",
																"package": "@types/ws"
															}
														},
														{
															"id": 690,
															"name": "data",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"name": "Buffer",
																"qualifiedName": "global.Buffer",
																"package": "@types/node"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 381,
								"name": "CosmiSocket"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "WebSocket.once"
							}
						},
						{
							"id": 691,
							"name": "once",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 692,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "literal",
										"value": "unexpected-response"
									}
								},
								{
									"id": 693,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 694,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/ws/index.d.ts",
													"line": 169,
													"character": 18
												}
											],
											"signatures": [
												{
													"id": 695,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 696,
															"name": "this",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"name": "WebSocket",
																"qualifiedName": "WebSocket",
																"package": "@types/ws"
															}
														},
														{
															"id": 697,
															"name": "request",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"name": "ClientRequest",
																"qualifiedName": "ClientRequest",
																"package": "@types/node"
															}
														},
														{
															"id": 698,
															"name": "response",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"name": "IncomingMessage",
																"qualifiedName": "IncomingMessage",
																"package": "@types/node"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 381,
								"name": "CosmiSocket"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "WebSocket.once"
							}
						},
						{
							"id": 699,
							"name": "once",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 700,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 701,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 702,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/ws/index.d.ts",
													"line": 171,
													"character": 43
												}
											],
											"signatures": [
												{
													"id": 703,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 704,
															"name": "this",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"name": "WebSocket",
																"qualifiedName": "WebSocket",
																"package": "@types/ws"
															}
														},
														{
															"id": 705,
															"name": "args",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 381,
								"name": "CosmiSocket"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "WebSocket.once"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "WebSocket.once"
					}
				},
				{
					"id": 530,
					"name": "pause",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/ws/index.d.ts",
							"line": 114,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 531,
							"name": "pause",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Pause the websocket causing it to stop emitting events. Some events can still be\nemitted after this is called, until all buffered data is consumed. This method\nis a noop if the ready state is "
									},
									{
										"kind": "code",
										"text": "`CONNECTING`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`CLOSED`"
									},
									{
										"kind": "text",
										"text": "."
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "WebSocket.pause"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "WebSocket.pause"
					}
				},
				{
					"id": 493,
					"name": "ping",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/ws/index.d.ts",
							"line": 98,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 494,
							"name": "ping",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 495,
									"name": "data",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 496,
									"name": "mask",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 497,
									"name": "cb",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 498,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/ws/index.d.ts",
													"line": 98,
													"character": 42
												}
											],
											"signatures": [
												{
													"id": 499,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 500,
															"name": "err",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"name": "Error",
																"qualifiedName": "Error",
																"package": "typescript"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "WebSocket.ping"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "WebSocket.ping"
					}
				},
				{
					"id": 447,
					"name": "playerUpdate",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiSocket.ts",
							"line": 143,
							"character": 12,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiSocket.ts#L143"
						}
					],
					"signatures": [
						{
							"id": 448,
							"name": "playerUpdate",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Emits when a player is updated"
									}
								]
							},
							"parameters": [
								{
									"id": 449,
									"name": "payload",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1685,
										"name": "PlayerUpdatePayload"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 501,
					"name": "pong",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/ws/index.d.ts",
							"line": 99,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 502,
							"name": "pong",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 503,
									"name": "data",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 504,
									"name": "mask",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 505,
									"name": "cb",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 506,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/ws/index.d.ts",
													"line": 99,
													"character": 42
												}
											],
											"signatures": [
												{
													"id": 507,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 508,
															"name": "err",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"name": "Error",
																"qualifiedName": "Error",
																"package": "typescript"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "WebSocket.pong"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "WebSocket.pong"
					}
				},
				{
					"id": 888,
					"name": "prependListener",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 634,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 889,
							"name": "prependListener",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Adds the "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " function to the _beginning_ of the listeners array for the\nevent named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ". No checks are made to see if the "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " has\nalready been added. Multiple calls passing the same combination of "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": "and "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " will result in the "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " being added, and called, multiple\ntimes.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nserver.prependListener('connection', (stream) => {\n  console.log('someone connected!');\n});\n```"
									},
									{
										"kind": "text",
										"text": "\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v6.0.0"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 890,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the event."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 891,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The callback function"
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 892,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/node/events.d.ts",
													"line": 634,
													"character": 70
												}
											],
											"signatures": [
												{
													"id": 893,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 894,
															"name": "args",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 381,
								"name": "CosmiSocket"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "WebSocket.prependListener"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "WebSocket.prependListener"
					}
				},
				{
					"id": 895,
					"name": "prependOnceListener",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 650,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 896,
							"name": "prependOnceListener",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Adds a **one-time**"
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " function for the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": " to the _beginning_ of the listeners array. The next time "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": " is triggered, this\nlistener is removed, and then invoked.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nserver.prependOnceListener('connection', (stream) => {\n  console.log('Ah, we have our first user!');\n});\n```"
									},
									{
										"kind": "text",
										"text": "\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v6.0.0"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 897,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the event."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 898,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The callback function"
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 899,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/node/events.d.ts",
													"line": 650,
													"character": 74
												}
											],
											"signatures": [
												{
													"id": 900,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 901,
															"name": "args",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 381,
								"name": "CosmiSocket"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "WebSocket.prependOnceListener"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "WebSocket.prependOnceListener"
					}
				},
				{
					"id": 878,
					"name": "rawListeners",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 569,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 879,
							"name": "rawListeners",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns a copy of the array of listeners for the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ",\nincluding any wrappers (such as those created by "
									},
									{
										"kind": "code",
										"text": "`.once()`"
									},
									{
										"kind": "text",
										"text": ").\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nconst emitter = new EventEmitter();\nemitter.once('log', () => console.log('log once'));\n\n// Returns a new Array with a function `onceWrapper` which has a property\n// `listener` which contains the original listener bound above\nconst listeners = emitter.rawListeners('log');\nconst logFnWrapper = listeners[0];\n\n// Logs \"log once\" to the console and does not unbind the `once` event\nlogFnWrapper.listener();\n\n// Logs \"log once\" to the console and removes the listener\nlogFnWrapper();\n\nemitter.on('log', () => console.log('log persistently'));\n// Will return a new Array with a single function bound by `.on()` above\nconst newListeners = emitter.rawListeners('log');\n\n// Logs \"log persistently\" twice\nnewListeners[0]();\nemitter.emit('log');\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v9.4.0"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 880,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "Function",
									"qualifiedName": "Function",
									"package": "typescript"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "WebSocket.rawListeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "WebSocket.rawListeners"
					}
				},
				{
					"id": 438,
					"name": "ready",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiSocket.ts",
							"line": 86,
							"character": 12,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiSocket.ts#L86"
						}
					],
					"signatures": [
						{
							"id": 439,
							"name": "ready",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Emits when the socket is ready"
									}
								]
							},
							"parameters": [
								{
									"id": 440,
									"name": "payload",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1681,
										"name": "ReadyPayload"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 867,
					"name": "removeAllListeners",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 510,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 868,
							"name": "removeAllListeners",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Removes all listeners, or those of the specified "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ".\n\nIt is bad practice to remove listeners added elsewhere in the code,\nparticularly when the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " instance was created by some other\ncomponent or module (e.g. sockets or file streams).\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.1.26"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 869,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 381,
								"name": "CosmiSocket"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "WebSocket.removeAllListeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "WebSocket.removeAllListeners"
					}
				},
				{
					"id": 563,
					"name": "removeEventListener",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/ws/index.d.ts",
							"line": 143,
							"character": 4
						},
						{
							"fileName": "node_modules/@types/ws/index.d.ts",
							"line": 144,
							"character": 4
						},
						{
							"fileName": "node_modules/@types/ws/index.d.ts",
							"line": 145,
							"character": 4
						},
						{
							"fileName": "node_modules/@types/ws/index.d.ts",
							"line": 146,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 564,
							"name": "removeEventListener",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 565,
									"name": "method",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "literal",
										"value": "message"
									}
								},
								{
									"id": 566,
									"name": "cb",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 567,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/ws/index.d.ts",
													"line": 143,
													"character": 47
												}
											],
											"signatures": [
												{
													"id": 568,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 569,
															"name": "event",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"name": "MessageEvent",
																"qualifiedName": "WebSocket.MessageEvent",
																"package": "@types/ws"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "WebSocket.removeEventListener"
							}
						},
						{
							"id": 570,
							"name": "removeEventListener",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 571,
									"name": "method",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "literal",
										"value": "close"
									}
								},
								{
									"id": 572,
									"name": "cb",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 573,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/ws/index.d.ts",
													"line": 144,
													"character": 45
												}
											],
											"signatures": [
												{
													"id": 574,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 575,
															"name": "event",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"name": "CloseEvent",
																"qualifiedName": "WebSocket.CloseEvent",
																"package": "@types/ws"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "WebSocket.removeEventListener"
							}
						},
						{
							"id": 576,
							"name": "removeEventListener",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 577,
									"name": "method",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "literal",
										"value": "error"
									}
								},
								{
									"id": 578,
									"name": "cb",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 579,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/ws/index.d.ts",
													"line": 145,
													"character": 45
												}
											],
											"signatures": [
												{
													"id": 580,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 581,
															"name": "event",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"name": "ErrorEvent",
																"qualifiedName": "WebSocket.ErrorEvent",
																"package": "@types/ws"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "WebSocket.removeEventListener"
							}
						},
						{
							"id": 582,
							"name": "removeEventListener",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 583,
									"name": "method",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "literal",
										"value": "open"
									}
								},
								{
									"id": 584,
									"name": "cb",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 585,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/ws/index.d.ts",
													"line": 146,
													"character": 44
												}
											],
											"signatures": [
												{
													"id": 586,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 587,
															"name": "event",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"name": "Event",
																"qualifiedName": "WebSocket.Event",
																"package": "@types/ws"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "WebSocket.removeEventListener"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "WebSocket.removeEventListener"
					}
				},
				{
					"id": 816,
					"name": "removeListener",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/ws/index.d.ts",
							"line": 197,
							"character": 4
						},
						{
							"fileName": "node_modules/@types/ws/index.d.ts",
							"line": 198,
							"character": 4
						},
						{
							"fileName": "node_modules/@types/ws/index.d.ts",
							"line": 199,
							"character": 4
						},
						{
							"fileName": "node_modules/@types/ws/index.d.ts",
							"line": 200,
							"character": 4
						},
						{
							"fileName": "node_modules/@types/ws/index.d.ts",
							"line": 201,
							"character": 4
						},
						{
							"fileName": "node_modules/@types/ws/index.d.ts",
							"line": 202,
							"character": 4
						},
						{
							"fileName": "node_modules/@types/ws/index.d.ts",
							"line": 203,
							"character": 4
						},
						{
							"fileName": "node_modules/@types/ws/index.d.ts",
							"line": 207,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 817,
							"name": "removeListener",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 818,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "literal",
										"value": "close"
									}
								},
								{
									"id": 819,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 820,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/ws/index.d.ts",
													"line": 197,
													"character": 45
												}
											],
											"signatures": [
												{
													"id": 821,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 822,
															"name": "code",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 823,
															"name": "reason",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"name": "Buffer",
																"qualifiedName": "global.Buffer",
																"package": "@types/node"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 381,
								"name": "CosmiSocket"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "WebSocket.removeListener"
							}
						},
						{
							"id": 824,
							"name": "removeListener",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 825,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "literal",
										"value": "error"
									}
								},
								{
									"id": 826,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 827,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/ws/index.d.ts",
													"line": 198,
													"character": 45
												}
											],
											"signatures": [
												{
													"id": 828,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 829,
															"name": "err",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"name": "Error",
																"qualifiedName": "Error",
																"package": "typescript"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 381,
								"name": "CosmiSocket"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "WebSocket.removeListener"
							}
						},
						{
							"id": 830,
							"name": "removeListener",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 831,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "literal",
										"value": "upgrade"
									}
								},
								{
									"id": 832,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 833,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/ws/index.d.ts",
													"line": 199,
													"character": 47
												}
											],
											"signatures": [
												{
													"id": 834,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 835,
															"name": "request",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"name": "IncomingMessage",
																"qualifiedName": "IncomingMessage",
																"package": "@types/node"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 381,
								"name": "CosmiSocket"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "WebSocket.removeListener"
							}
						},
						{
							"id": 836,
							"name": "removeListener",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 837,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "literal",
										"value": "message"
									}
								},
								{
									"id": 838,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 839,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/ws/index.d.ts",
													"line": 200,
													"character": 47
												}
											],
											"signatures": [
												{
													"id": 840,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 841,
															"name": "data",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"name": "RawData",
																"qualifiedName": "WebSocket.RawData",
																"package": "@types/ws"
															}
														},
														{
															"id": 842,
															"name": "isBinary",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 381,
								"name": "CosmiSocket"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "WebSocket.removeListener"
							}
						},
						{
							"id": 843,
							"name": "removeListener",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 844,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "literal",
										"value": "open"
									}
								},
								{
									"id": 845,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 846,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/ws/index.d.ts",
													"line": 201,
													"character": 44
												}
											],
											"signatures": [
												{
													"id": 847,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 381,
								"name": "CosmiSocket"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "WebSocket.removeListener"
							}
						},
						{
							"id": 848,
							"name": "removeListener",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 849,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": "ping"
											},
											{
												"type": "literal",
												"value": "pong"
											}
										]
									}
								},
								{
									"id": 850,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 851,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/ws/index.d.ts",
													"line": 202,
													"character": 53
												}
											],
											"signatures": [
												{
													"id": 852,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 853,
															"name": "data",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"name": "Buffer",
																"qualifiedName": "global.Buffer",
																"package": "@types/node"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 381,
								"name": "CosmiSocket"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "WebSocket.removeListener"
							}
						},
						{
							"id": 854,
							"name": "removeListener",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 855,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "literal",
										"value": "unexpected-response"
									}
								},
								{
									"id": 856,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 857,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/ws/index.d.ts",
													"line": 205,
													"character": 18
												}
											],
											"signatures": [
												{
													"id": 858,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 859,
															"name": "request",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"name": "ClientRequest",
																"qualifiedName": "ClientRequest",
																"package": "@types/node"
															}
														},
														{
															"id": 860,
															"name": "response",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"name": "IncomingMessage",
																"qualifiedName": "IncomingMessage",
																"package": "@types/node"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 381,
								"name": "CosmiSocket"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "WebSocket.removeListener"
							}
						},
						{
							"id": 861,
							"name": "removeListener",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 862,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 863,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 864,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/ws/index.d.ts",
													"line": 207,
													"character": 53
												}
											],
											"signatures": [
												{
													"id": 865,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 866,
															"name": "args",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 381,
								"name": "CosmiSocket"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "WebSocket.removeListener"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "WebSocket.removeListener"
					}
				},
				{
					"id": 532,
					"name": "resume",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/ws/index.d.ts",
							"line": 119,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 533,
							"name": "resume",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Make a paused socket resume emitting events. This method is a noop if the ready\nstate is "
									},
									{
										"kind": "code",
										"text": "`CONNECTING`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`CLOSED`"
									},
									{
										"kind": "text",
										"text": "."
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "WebSocket.resume"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "WebSocket.resume"
					}
				},
				{
					"id": 509,
					"name": "send",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/ws/index.d.ts",
							"line": 101,
							"character": 4
						},
						{
							"fileName": "node_modules/@types/ws/index.d.ts",
							"line": 102,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 510,
							"name": "send",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "https://github.com/websockets/ws/issues/2076#issuecomment-1250354722"
									}
								]
							},
							"parameters": [
								{
									"id": 511,
									"name": "data",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"name": "BufferLike",
										"qualifiedName": "BufferLike",
										"package": "@types/ws"
									}
								},
								{
									"id": 512,
									"name": "cb",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 513,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/ws/index.d.ts",
													"line": 101,
													"character": 32
												}
											],
											"signatures": [
												{
													"id": 514,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 515,
															"name": "err",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true,
																"isOptional": true
															},
															"type": {
																"type": "reference",
																"name": "Error",
																"qualifiedName": "Error",
																"package": "typescript"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "WebSocket.send"
							}
						},
						{
							"id": 516,
							"name": "send",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 517,
									"name": "data",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"name": "BufferLike",
										"qualifiedName": "BufferLike",
										"package": "@types/ws"
									}
								},
								{
									"id": 518,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 519,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"children": [
												{
													"id": 521,
													"name": "binary",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isExternal": true,
														"isOptional": true
													},
													"sources": [
														{
															"fileName": "node_modules/@types/ws/index.d.ts",
															"line": 104,
															"character": 47
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												},
												{
													"id": 522,
													"name": "compress",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isExternal": true,
														"isOptional": true
													},
													"sources": [
														{
															"fileName": "node_modules/@types/ws/index.d.ts",
															"line": 104,
															"character": 77
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												},
												{
													"id": 523,
													"name": "fin",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isExternal": true,
														"isOptional": true
													},
													"sources": [
														{
															"fileName": "node_modules/@types/ws/index.d.ts",
															"line": 104,
															"character": 109
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												},
												{
													"id": 520,
													"name": "mask",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isExternal": true,
														"isOptional": true
													},
													"sources": [
														{
															"fileName": "node_modules/@types/ws/index.d.ts",
															"line": 104,
															"character": 19
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"children": [
														521,
														522,
														523,
														520
													]
												}
											],
											"sources": [
												{
													"fileName": "node_modules/@types/ws/index.d.ts",
													"line": 104,
													"character": 17
												}
											]
										}
									}
								},
								{
									"id": 524,
									"name": "cb",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 525,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/ws/index.d.ts",
													"line": 105,
													"character": 13
												}
											],
											"signatures": [
												{
													"id": 526,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 527,
															"name": "err",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true,
																"isOptional": true
															},
															"type": {
																"type": "reference",
																"name": "Error",
																"qualifiedName": "Error",
																"package": "typescript"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "WebSocket.send"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "WebSocket.send"
					}
				},
				{
					"id": 435,
					"name": "sendData",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiSocket.ts",
							"line": 68,
							"character": 9,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiSocket.ts#L68"
						}
					],
					"signatures": [
						{
							"id": 436,
							"name": "sendData",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Sends data to the websocket"
									}
								]
							},
							"parameters": [
								{
									"id": 437,
									"name": "data",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "unknown"
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 870,
					"name": "setMaxListeners",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 520,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 871,
							"name": "setMaxListeners",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "By default "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": "s will print a warning if more than "
									},
									{
										"kind": "code",
										"text": "`10`"
									},
									{
										"kind": "text",
										"text": " listeners are\nadded for a particular event. This is a useful default that helps finding\nmemory leaks. The "
									},
									{
										"kind": "code",
										"text": "`emitter.setMaxListeners()`"
									},
									{
										"kind": "text",
										"text": " method allows the limit to be\nmodified for this specific "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " instance. The value can be set to"
									},
									{
										"kind": "code",
										"text": "`Infinity`"
									},
									{
										"kind": "text",
										"text": " (or "
									},
									{
										"kind": "code",
										"text": "`0`"
									},
									{
										"kind": "text",
										"text": ") to indicate an unlimited number of listeners.\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.3.5"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 872,
									"name": "n",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 381,
								"name": "CosmiSocket"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "WebSocket.setMaxListeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "WebSocket.setMaxListeners"
					}
				},
				{
					"id": 444,
					"name": "stats",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiSocket.ts",
							"line": 118,
							"character": 12,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiSocket.ts#L118"
						}
					],
					"signatures": [
						{
							"id": 445,
							"name": "stats",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Emits when stats are received"
									}
								]
							},
							"parameters": [
								{
									"id": 446,
									"name": "payload",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1689,
										"name": "StatsPayload"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 528,
					"name": "terminate",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/ws/index.d.ts",
							"line": 107,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 529,
							"name": "terminate",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "WebSocket.terminate"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "WebSocket.terminate"
					}
				},
				{
					"id": 453,
					"name": "trackEnd",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiSocket.ts",
							"line": 162,
							"character": 12,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiSocket.ts#L162"
						}
					],
					"signatures": [
						{
							"id": 454,
							"name": "trackEnd",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Emits when a track ends"
									}
								]
							},
							"parameters": [
								{
									"id": 455,
									"name": "payload",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1720,
										"name": "TrackEndEventPayload"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 456,
					"name": "trackException",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiSocket.ts",
							"line": 187,
							"character": 12,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiSocket.ts#L187"
						}
					],
					"signatures": [
						{
							"id": 457,
							"name": "trackException",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Emits when a track errors"
									}
								]
							},
							"parameters": [
								{
									"id": 458,
									"name": "payload",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1726,
										"name": "TrackExceptionEventPayload"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 450,
					"name": "trackStart",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiSocket.ts",
							"line": 151,
							"character": 12,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiSocket.ts#L151"
						}
					],
					"signatures": [
						{
							"id": 451,
							"name": "trackStart",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Emits when a track starts"
									}
								]
							},
							"parameters": [
								{
									"id": 452,
									"name": "payload",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1714,
										"name": "TrackStartEventPayload"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 459,
					"name": "trackStuck",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiSocket.ts",
							"line": 195,
							"character": 12,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiSocket.ts#L195"
						}
					],
					"signatures": [
						{
							"id": 460,
							"name": "trackStuck",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Emits when a track gets stuck"
									}
								]
							},
							"parameters": [
								{
									"id": 461,
									"name": "payload",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1732,
										"name": "TrackStuckEventPayload"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 414,
					"name": "getEventListeners",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 299,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 415,
							"name": "getEventListeners",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns a copy of the array of listeners for the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ".\n\nFor "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": "s this behaves exactly the same as calling "
									},
									{
										"kind": "code",
										"text": "`.listeners`"
									},
									{
										"kind": "text",
										"text": " on\nthe emitter.\n\nFor "
									},
									{
										"kind": "code",
										"text": "`EventTarget`"
									},
									{
										"kind": "text",
										"text": "s this is the only way to get the event listeners for the\nevent target. This is useful for debugging and diagnostic purposes.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nconst { getEventListeners, EventEmitter } = require('events');\n\n{\n  const ee = new EventEmitter();\n  const listener = () => console.log('Events are fun');\n  ee.on('foo', listener);\n  getEventListeners(ee, 'foo'); // [listener]\n}\n{\n  const et = new EventTarget();\n  const listener = () => console.log('Events are fun');\n  et.addEventListener('foo', listener);\n  getEventListeners(et, 'foo'); // [listener]\n}\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v15.2.0, v14.17.0"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 416,
									"name": "emitter",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "EventEmitter",
												"qualifiedName": "global.NodeJS.EventEmitter",
												"package": "@types/node"
											},
											{
												"type": "reference",
												"name": "_DOMEventTarget",
												"qualifiedName": "_DOMEventTarget",
												"package": "@types/node"
											}
										]
									}
								},
								{
									"id": 417,
									"name": "name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "Function",
									"qualifiedName": "Function",
									"package": "typescript"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "WebSocket.getEventListeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "WebSocket.getEventListeners"
					}
				},
				{
					"id": 410,
					"name": "listenerCount",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 271,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 411,
							"name": "listenerCount",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "A class method that returns the number of listeners for the given "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": "registered on the given "
									},
									{
										"kind": "code",
										"text": "`emitter`"
									},
									{
										"kind": "text",
										"text": ".\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nconst { EventEmitter, listenerCount } = require('events');\nconst myEmitter = new EventEmitter();\nmyEmitter.on('event', () => {});\nmyEmitter.on('event', () => {});\nconsole.log(listenerCount(myEmitter, 'event'));\n// Prints: 2\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.9.12"
											}
										]
									},
									{
										"tag": "@deprecated",
										"content": [
											{
												"kind": "text",
												"text": "Since v3.2.0 - Use "
											},
											{
												"kind": "code",
												"text": "`listenerCount`"
											},
											{
												"kind": "text",
												"text": " instead."
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 412,
									"name": "emitter",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The emitter to query"
											}
										]
									},
									"type": {
										"type": "reference",
										"name": "EventEmitter",
										"qualifiedName": "global.NodeJS.EventEmitter",
										"package": "@types/node"
									}
								},
								{
									"id": 413,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The event name"
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "WebSocket.listenerCount"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "WebSocket.listenerCount"
					}
				},
				{
					"id": 400,
					"name": "on",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 254,
							"character": 15
						},
						{
							"fileName": "node_modules/discord.js/typings/index.d.ts",
							"line": 229,
							"character": 18
						}
					],
					"signatures": [
						{
							"id": 401,
							"name": "on",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "code",
										"text": "```js\nconst { on, EventEmitter } = require('events');\n\n(async () => {\n  const ee = new EventEmitter();\n\n  // Emit later on\n  process.nextTick(() => {\n    ee.emit('foo', 'bar');\n    ee.emit('foo', 42);\n  });\n\n  for await (const event of on(ee, 'foo')) {\n    // The execution of this inner block is synchronous and it\n    // processes one event at a time (even with await). Do not use\n    // if concurrent execution is required.\n    console.log(event); // prints ['bar'] [42]\n  }\n  // Unreachable here\n})();\n```"
									},
									{
										"kind": "text",
										"text": "\n\nReturns an "
									},
									{
										"kind": "code",
										"text": "`AsyncIterator`"
									},
									{
										"kind": "text",
										"text": " that iterates "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": " events. It will throw\nif the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " emits "
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": ". It removes all listeners when\nexiting the loop. The "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " returned by each iteration is an array\ncomposed of the emitted event arguments.\n\nAn "
									},
									{
										"kind": "code",
										"text": "`AbortSignal`"
									},
									{
										"kind": "text",
										"text": " can be used to cancel waiting on events:\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nconst { on, EventEmitter } = require('events');\nconst ac = new AbortController();\n\n(async () => {\n  const ee = new EventEmitter();\n\n  // Emit later on\n  process.nextTick(() => {\n    ee.emit('foo', 'bar');\n    ee.emit('foo', 42);\n  });\n\n  for await (const event of on(ee, 'foo', { signal: ac.signal })) {\n    // The execution of this inner block is synchronous and it\n    // processes one event at a time (even with await). Do not use\n    // if concurrent execution is required.\n    console.log(event); // prints ['bar'] [42]\n  }\n  // Unreachable here\n})();\n\nprocess.nextTick(() => ac.abort());\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v13.6.0, v12.16.0"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "that iterates "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": " events emitted by the "
											},
											{
												"kind": "code",
												"text": "`emitter`"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 402,
									"name": "emitter",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"name": "EventEmitter",
										"qualifiedName": "global.NodeJS.EventEmitter",
										"package": "@types/node"
									}
								},
								{
									"id": 403,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the event being listened for"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 404,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"name": "StaticEventEmitterOptions",
										"qualifiedName": "StaticEventEmitterOptions",
										"package": "@types/node"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "AsyncIterableIterator",
								"qualifiedName": "AsyncIterableIterator",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "WebSocket.on"
							}
						},
						{
							"id": 405,
							"name": "on",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"typeParameter": [
								{
									"id": 406,
									"name": "E",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"name": "__module",
										"qualifiedName": "EventEmitter",
										"package": "@types/node"
									}
								},
								{
									"id": 407,
									"name": "K",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "typeOperator",
										"operator": "keyof",
										"target": {
											"type": "reference",
											"name": "ClientEvents",
											"qualifiedName": "ClientEvents",
											"package": "discord.js"
										}
									}
								}
							],
							"parameters": [
								{
									"id": 408,
									"name": "eventEmitter",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"id": 22,
										"name": "E",
										"qualifiedName": "E",
										"package": "discord.js"
									}
								},
								{
									"id": 409,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "conditional",
										"checkType": {
											"type": "reference",
											"id": 22,
											"name": "E",
											"qualifiedName": "E",
											"package": "discord.js"
										},
										"extendsType": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "intrinsic",
													"name": "boolean"
												}
											],
											"name": "Client",
											"qualifiedName": "Client",
											"package": "discord.js"
										},
										"trueType": {
											"type": "reference",
											"id": 23,
											"name": "K",
											"qualifiedName": "K",
											"package": "discord.js"
										},
										"falseType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "conditional",
										"checkType": {
											"type": "reference",
											"id": 22,
											"name": "E",
											"qualifiedName": "E",
											"package": "discord.js"
										},
										"extendsType": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "intrinsic",
													"name": "boolean"
												}
											],
											"name": "Client",
											"qualifiedName": "Client",
											"package": "discord.js"
										},
										"trueType": {
											"type": "indexedAccess",
											"indexType": {
												"type": "reference",
												"id": 23,
												"name": "K",
												"qualifiedName": "K",
												"package": "discord.js"
											},
											"objectType": {
												"type": "reference",
												"name": "ClientEvents",
												"qualifiedName": "ClientEvents",
												"package": "discord.js"
											}
										},
										"falseType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								],
								"name": "AsyncIterableIterator",
								"qualifiedName": "AsyncIterableIterator",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "WebSocket.on"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "WebSocket.on"
					}
				},
				{
					"id": 386,
					"name": "once",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 194,
							"character": 15
						},
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 195,
							"character": 15
						},
						{
							"fileName": "node_modules/discord.js/typings/index.d.ts",
							"line": 225,
							"character": 18
						}
					],
					"signatures": [
						{
							"id": 387,
							"name": "once",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Creates a "
									},
									{
										"kind": "code",
										"text": "`Promise`"
									},
									{
										"kind": "text",
										"text": " that is fulfilled when the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " emits the given\nevent or that is rejected if the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " emits "
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": " while waiting.\nThe "
									},
									{
										"kind": "code",
										"text": "`Promise`"
									},
									{
										"kind": "text",
										"text": " will resolve with an array of all the arguments emitted to the\ngiven event.\n\nThis method is intentionally generic and works with the web platform [EventTarget](https://dom.spec.whatwg.org/#interface-eventtarget) interface, which has no special"
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": " event\nsemantics and does not listen to the "
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": " event.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nconst { once, EventEmitter } = require('events');\n\nasync function run() {\n  const ee = new EventEmitter();\n\n  process.nextTick(() => {\n    ee.emit('myevent', 42);\n  });\n\n  const [value] = await once(ee, 'myevent');\n  console.log(value);\n\n  const err = new Error('kaboom');\n  process.nextTick(() => {\n    ee.emit('error', err);\n  });\n\n  try {\n    await once(ee, 'myevent');\n  } catch (err) {\n    console.log('error happened', err);\n  }\n}\n\nrun();\n```"
									},
									{
										"kind": "text",
										"text": "\n\nThe special handling of the "
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": " event is only used when "
									},
									{
										"kind": "code",
										"text": "`events.once()`"
									},
									{
										"kind": "text",
										"text": "is used to wait for another event. If "
									},
									{
										"kind": "code",
										"text": "`events.once()`"
									},
									{
										"kind": "text",
										"text": " is used to wait for the\n'"
									},
									{
										"kind": "code",
										"text": "`error'`"
									},
									{
										"kind": "text",
										"text": " event itself, then it is treated as any other kind of event without\nspecial handling:\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nconst { EventEmitter, once } = require('events');\n\nconst ee = new EventEmitter();\n\nonce(ee, 'error')\n  .then(([err]) => console.log('ok', err.message))\n  .catch((err) => console.log('error', err.message));\n\nee.emit('error', new Error('boom'));\n\n// Prints: ok boom\n```"
									},
									{
										"kind": "text",
										"text": "\n\nAn "
									},
									{
										"kind": "code",
										"text": "`AbortSignal`"
									},
									{
										"kind": "text",
										"text": " can be used to cancel waiting for the event:\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nconst { EventEmitter, once } = require('events');\n\nconst ee = new EventEmitter();\nconst ac = new AbortController();\n\nasync function foo(emitter, event, signal) {\n  try {\n    await once(emitter, event, { signal });\n    console.log('event emitted!');\n  } catch (error) {\n    if (error.name === 'AbortError') {\n      console.error('Waiting for the event was canceled!');\n    } else {\n      console.error('There was an error', error.message);\n    }\n  }\n}\n\nfoo(ee, 'foo', ac.signal);\nac.abort(); // Abort waiting for the event\nee.emit('foo'); // Prints: Waiting for the event was canceled!\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v11.13.0, v10.16.0"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 388,
									"name": "emitter",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"name": "_NodeEventTarget",
										"qualifiedName": "_NodeEventTarget",
										"package": "@types/node"
									}
								},
								{
									"id": 389,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 390,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"name": "StaticEventEmitterOptions",
										"qualifiedName": "StaticEventEmitterOptions",
										"package": "@types/node"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "WebSocket.once"
							}
						},
						{
							"id": 391,
							"name": "once",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 392,
									"name": "emitter",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"name": "_DOMEventTarget",
										"qualifiedName": "_DOMEventTarget",
										"package": "@types/node"
									}
								},
								{
									"id": 393,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 394,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"name": "StaticEventEmitterOptions",
										"qualifiedName": "StaticEventEmitterOptions",
										"package": "@types/node"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "WebSocket.once"
							}
						},
						{
							"id": 395,
							"name": "once",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Add type overloads for client events."
									}
								]
							},
							"typeParameter": [
								{
									"id": 396,
									"name": "E",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"name": "__module",
										"qualifiedName": "EventEmitter",
										"package": "@types/node"
									}
								},
								{
									"id": 397,
									"name": "K",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "typeOperator",
										"operator": "keyof",
										"target": {
											"type": "reference",
											"name": "ClientEvents",
											"qualifiedName": "ClientEvents",
											"package": "discord.js"
										}
									}
								}
							],
							"parameters": [
								{
									"id": 398,
									"name": "eventEmitter",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"id": 12,
										"name": "E",
										"qualifiedName": "E",
										"package": "discord.js"
									}
								},
								{
									"id": 399,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "conditional",
										"checkType": {
											"type": "reference",
											"id": 12,
											"name": "E",
											"qualifiedName": "E",
											"package": "discord.js"
										},
										"extendsType": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "intrinsic",
													"name": "boolean"
												}
											],
											"name": "Client",
											"qualifiedName": "Client",
											"package": "discord.js"
										},
										"trueType": {
											"type": "reference",
											"id": 13,
											"name": "K",
											"qualifiedName": "K",
											"package": "discord.js"
										},
										"falseType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "conditional",
										"checkType": {
											"type": "reference",
											"id": 12,
											"name": "E",
											"qualifiedName": "E",
											"package": "discord.js"
										},
										"extendsType": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "intrinsic",
													"name": "boolean"
												}
											],
											"name": "Client",
											"qualifiedName": "Client",
											"package": "discord.js"
										},
										"trueType": {
											"type": "indexedAccess",
											"indexType": {
												"type": "reference",
												"id": 13,
												"name": "K",
												"qualifiedName": "K",
												"package": "discord.js"
											},
											"objectType": {
												"type": "reference",
												"name": "ClientEvents",
												"qualifiedName": "ClientEvents",
												"package": "discord.js"
											}
										},
										"falseType": {
											"type": "array",
											"elementType": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "WebSocket.once"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "WebSocket.once"
					}
				},
				{
					"id": 418,
					"name": "setMaxListeners",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 317,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 419,
							"name": "setMaxListeners",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "code",
										"text": "```js\nconst {\n  setMaxListeners,\n  EventEmitter\n} = require('events');\n\nconst target = new EventTarget();\nconst emitter = new EventEmitter();\n\nsetMaxListeners(5, target, emitter);\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v15.4.0"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 420,
									"name": "n",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A non-negative number. The maximum number of listeners per "
											},
											{
												"kind": "code",
												"text": "`EventTarget`"
											},
											{
												"kind": "text",
												"text": " event."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 421,
									"name": "eventTargets",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isRest": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "union",
											"types": [
												{
													"type": "reference",
													"name": "EventEmitter",
													"qualifiedName": "global.NodeJS.EventEmitter",
													"package": "@types/node"
												},
												{
													"type": "reference",
													"name": "_DOMEventTarget",
													"qualifiedName": "_DOMEventTarget",
													"package": "@types/node"
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "WebSocket.setMaxListeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "WebSocket.setMaxListeners"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						426
					]
				},
				{
					"title": "Properties",
					"children": [
						472,
						471,
						469,
						470,
						462,
						463,
						464,
						465,
						432,
						433,
						481,
						477,
						485,
						473,
						466,
						467,
						434,
						468,
						385,
						384,
						382,
						383,
						423,
						424,
						425,
						422
					]
				},
				{
					"title": "Methods",
					"children": [
						534,
						765,
						489,
						881,
						441,
						902,
						873,
						885,
						875,
						706,
						588,
						647,
						530,
						493,
						447,
						501,
						888,
						895,
						878,
						438,
						867,
						563,
						816,
						532,
						509,
						435,
						870,
						444,
						528,
						453,
						456,
						450,
						459,
						414,
						410,
						400,
						386,
						418
					]
				}
			],
			"sources": [
				{
					"fileName": "src/lib/CosmiSocket.ts",
					"line": 16,
					"character": 13,
					"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiSocket.ts#L16"
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "WebSocket",
					"qualifiedName": "WebSocket",
					"package": "@types/ws"
				}
			]
		},
		{
			"id": 1068,
			"name": "CosmiTrack",
			"kind": 128,
			"kindString": "Class",
			"flags": {},
			"children": [
				{
					"id": 1069,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {},
					"sources": [
						{
							"fileName": "src/lib/CosmiTrack.ts",
							"line": 46,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiTrack.ts#L46"
						}
					],
					"signatures": [
						{
							"id": 1070,
							"name": "new CosmiTrack",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Creates a new track."
									}
								]
							},
							"parameters": [
								{
									"id": 1071,
									"name": "data",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1563,
										"name": "RestTrack"
									}
								},
								{
									"id": 1072,
									"name": "requesterId",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 1068,
								"name": "CosmiTrack"
							}
						}
					]
				},
				{
					"id": 1078,
					"name": "author",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The author of the track."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiTrack.ts",
							"line": 20,
							"character": 9,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiTrack.ts#L20"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1073,
					"name": "duration",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The duration of the track."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiTrack.ts",
							"line": 5,
							"character": 9,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiTrack.ts#L5"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 1075,
					"name": "encoded",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPublic": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The encoded track."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiTrack.ts",
							"line": 11,
							"character": 9,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiTrack.ts#L11"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1076,
					"name": "identifier",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The track identifier."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiTrack.ts",
							"line": 14,
							"character": 9,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiTrack.ts#L14"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1077,
					"name": "isSeekable",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Whether the track is seekable."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiTrack.ts",
							"line": 17,
							"character": 9,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiTrack.ts#L17"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1080,
					"name": "isStream",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Whether the track is a stream or not."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiTrack.ts",
							"line": 26,
							"character": 9,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiTrack.ts#L26"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1079,
					"name": "length",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The length of the track."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiTrack.ts",
							"line": 23,
							"character": 9,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiTrack.ts#L23"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 1081,
					"name": "position",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The position of the track."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiTrack.ts",
							"line": 29,
							"character": 9,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiTrack.ts#L29"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 1074,
					"name": "requesterId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPublic": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The requester ID of the track."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiTrack.ts",
							"line": 8,
							"character": 9,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiTrack.ts#L8"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1083,
					"name": "sourceName",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The source name of the track."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiTrack.ts",
							"line": 35,
							"character": 9,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiTrack.ts#L35"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1082,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The title of the track."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiTrack.ts",
							"line": 32,
							"character": 9,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiTrack.ts#L32"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1084,
					"name": "uri",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPublic": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The uri of the track."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiTrack.ts",
							"line": 38,
							"character": 9,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiTrack.ts#L38"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1085,
					"name": "thumbnail",
					"kind": 262144,
					"kindString": "Accessor",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiTrack.ts",
							"line": 41,
							"character": 13,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiTrack.ts#L41"
						}
					],
					"getSignature": {
						"id": 1086,
						"name": "thumbnail",
						"kind": 524288,
						"kindString": "Get signature",
						"flags": {},
						"comment": {
							"summary": [
								{
									"kind": "text",
									"text": "The thumbnail of the track."
								}
							]
						},
						"type": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				},
				{
					"id": 1087,
					"name": "displayThumbnail",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "src/lib/CosmiTrack.ts",
							"line": 62,
							"character": 9,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiTrack.ts#L62"
						}
					],
					"signatures": [
						{
							"id": 1088,
							"name": "displayThumbnail",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns the thumbnail of the track."
									}
								]
							},
							"parameters": [
								{
									"id": 1089,
									"name": "size",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": "default"
											},
											{
												"type": "literal",
												"value": "mqdefault"
											},
											{
												"type": "literal",
												"value": "hqdefault"
											},
											{
												"type": "literal",
												"value": "sddefault"
											},
											{
												"type": "literal",
												"value": "maxresdefault"
											}
										]
									},
									"defaultValue": "\"default\""
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						1069
					]
				},
				{
					"title": "Properties",
					"children": [
						1078,
						1073,
						1075,
						1076,
						1077,
						1080,
						1079,
						1081,
						1074,
						1083,
						1082,
						1084
					]
				},
				{
					"title": "Accessors",
					"children": [
						1085
					]
				},
				{
					"title": "Methods",
					"children": [
						1087
					]
				}
			],
			"sources": [
				{
					"fileName": "src/lib/CosmiTrack.ts",
					"line": 3,
					"character": 13,
					"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/CosmiTrack.ts#L3"
				}
			]
		},
		{
			"id": 1,
			"name": "Cosmicord",
			"kind": 128,
			"kindString": "Class",
			"flags": {},
			"children": [
				{
					"id": 42,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {},
					"sources": [
						{
							"fileName": "src/lib/Cosmicord.ts",
							"line": 40,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/Cosmicord.ts#L40"
						}
					],
					"signatures": [
						{
							"id": 43,
							"name": "new Cosmicord",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The constructor for the cosmicord client."
									}
								]
							},
							"parameters": [
								{
									"id": 44,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1785,
										"name": "CosmiOptions"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 1,
								"name": "Cosmicord"
							}
						}
					]
				},
				{
					"id": 59,
					"name": "clientId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPublic": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The client id"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/lib/Cosmicord.ts",
							"line": 34,
							"character": 9,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/Cosmicord.ts#L34"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 58,
					"name": "nodes",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The nodes for the cosmicord client."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/lib/Cosmicord.ts",
							"line": 31,
							"character": 9,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/Cosmicord.ts#L31"
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 233,
							"name": "CosmiNode"
						}
					},
					"defaultValue": "[]"
				},
				{
					"id": 61,
					"name": "options",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "src/lib/Cosmicord.ts",
							"line": 40,
							"character": 21,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/Cosmicord.ts#L40"
						}
					],
					"type": {
						"type": "reference",
						"id": 1785,
						"name": "CosmiOptions"
					}
				},
				{
					"id": 60,
					"name": "players",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The players for the cosmicord client."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/lib/Cosmicord.ts",
							"line": 37,
							"character": 9,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/Cosmicord.ts#L37"
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "reference",
								"id": 904,
								"name": "CosmiPlayer"
							}
						],
						"name": "Collection",
						"qualifiedName": "Collection",
						"package": "@discordjs/collection"
					},
					"defaultValue": "..."
				},
				{
					"id": 39,
					"name": "captureRejectionSymbol",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isStatic": true,
						"isExternal": true,
						"isReadonly": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 328,
							"character": 24
						}
					],
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"id": 39,
							"name": "captureRejectionSymbol",
							"qualifiedName": "EventEmitter.captureRejectionSymbol",
							"package": "@types/node"
						}
					}
				},
				{
					"id": 40,
					"name": "captureRejections",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "TODO: These should be described using static getter/setter pairs:"
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 333,
							"character": 15
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 41,
					"name": "defaultMaxListeners",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 334,
							"character": 15
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 38,
					"name": "errorMonitor",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isStatic": true,
						"isExternal": true,
						"isReadonly": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "This symbol shall be used to install a listener for only monitoring "
							},
							{
								"kind": "code",
								"text": "`'error'`"
							},
							{
								"kind": "text",
								"text": "\nevents. Listeners installed using this symbol are called before the regular\n"
							},
							{
								"kind": "code",
								"text": "`'error'`"
							},
							{
								"kind": "text",
								"text": " listeners are called.\n\nInstalling a listener using this symbol does not change the behavior once an\n"
							},
							{
								"kind": "code",
								"text": "`'error'`"
							},
							{
								"kind": "text",
								"text": " event is emitted, therefore the process will still crash if no\nregular "
							},
							{
								"kind": "code",
								"text": "`'error'`"
							},
							{
								"kind": "text",
								"text": " listener is installed."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 327,
							"character": 24
						}
					],
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"id": 38,
							"name": "errorMonitor",
							"qualifiedName": "EventEmitter.errorMonitor",
							"package": "@types/node"
						}
					}
				},
				{
					"id": 87,
					"name": "addListener",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 354,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 88,
							"name": "addListener",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Alias for "
									},
									{
										"kind": "code",
										"text": "`emitter.on(eventName, listener)`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.1.26"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 89,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 90,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 91,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/node/events.d.ts",
													"line": 354,
													"character": 66
												}
											],
											"signatures": [
												{
													"id": 92,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 93,
															"name": "args",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 1,
								"name": "Cosmicord"
							}
						}
					]
				},
				{
					"id": 69,
					"name": "createNode",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "src/lib/Cosmicord.ts",
							"line": 97,
							"character": 9,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/Cosmicord.ts#L97"
						}
					],
					"signatures": [
						{
							"id": 70,
							"name": "createNode",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Creates a new node."
									}
								]
							},
							"parameters": [
								{
									"id": 71,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1433,
										"name": "CosmiNodeOptions"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 233,
								"name": "CosmiNode"
							}
						}
					]
				},
				{
					"id": 75,
					"name": "createPlayer",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "src/lib/Cosmicord.ts",
							"line": 109,
							"character": 9,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/Cosmicord.ts#L109"
						}
					],
					"signatures": [
						{
							"id": 76,
							"name": "createPlayer",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Creates a new player."
									}
								]
							},
							"parameters": [
								{
									"id": 77,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1627,
										"name": "CosmiPlayerOptions"
									}
								},
								{
									"id": 78,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 233,
										"name": "CosmiNode"
									},
									"defaultValue": "..."
								}
							],
							"type": {
								"type": "reference",
								"id": 904,
								"name": "CosmiPlayer"
							}
						}
					]
				},
				{
					"id": 72,
					"name": "destoryNode",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "src/lib/Cosmicord.ts",
							"line": 104,
							"character": 9,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/Cosmicord.ts#L104"
						}
					],
					"signatures": [
						{
							"id": 73,
							"name": "destoryNode",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Destroys a node."
									}
								]
							},
							"parameters": [
								{
									"id": 74,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 233,
										"name": "CosmiNode"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 79,
					"name": "destroyPlayer",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "src/lib/Cosmicord.ts",
							"line": 128,
							"character": 9,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/Cosmicord.ts#L128"
						}
					],
					"signatures": [
						{
							"id": 80,
							"name": "destroyPlayer",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Destroys a player."
									}
								]
							},
							"parameters": [
								{
									"id": 81,
									"name": "guildId",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 53,
					"name": "emit",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/lib/Cosmicord.ts",
							"line": 23,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/Cosmicord.ts#L23"
						}
					],
					"signatures": [
						{
							"id": 54,
							"name": "emit",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"typeParameter": [
								{
									"id": 55,
									"name": "Key",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "typeOperator",
										"operator": "keyof",
										"target": {
											"type": "reference",
											"id": 1746,
											"name": "CosmiEvents"
										}
									}
								}
							],
							"parameters": [
								{
									"id": 56,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 55,
										"name": "Key"
									}
								},
								{
									"id": 57,
									"name": "args",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isRest": true
									},
									"type": {
										"type": "indexedAccess",
										"indexType": {
											"type": "reference",
											"id": 55,
											"name": "Key"
										},
										"objectType": {
											"type": "reference",
											"id": 1746,
											"name": "CosmiEvents"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					]
				},
				{
					"id": 146,
					"name": "eventNames",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 669,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 147,
							"name": "eventNames",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns an array listing the events for which the emitter has registered\nlisteners. The values in the array are strings or "
									},
									{
										"kind": "code",
										"text": "`Symbol`"
									},
									{
										"kind": "text",
										"text": "s.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nconst EventEmitter = require('events');\nconst myEE = new EventEmitter();\nmyEE.on('foo', () => {});\nmyEE.on('bar', () => {});\n\nconst sym = Symbol('symbol');\nmyEE.on(sym, () => {});\n\nconsole.log(myEE.eventNames());\n// Prints: [ 'foo', 'bar', Symbol(symbol) ]\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v6.0.0"
											}
										]
									}
								]
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "union",
									"types": [
										{
											"type": "intrinsic",
											"name": "string"
										},
										{
											"type": "intrinsic",
											"name": "symbol"
										}
									]
								}
							}
						}
					]
				},
				{
					"id": 82,
					"name": "getLeastUsedNode",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "src/lib/Cosmicord.ts",
							"line": 137,
							"character": 9,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/Cosmicord.ts#L137"
						}
					],
					"signatures": [
						{
							"id": 83,
							"name": "getLeastUsedNode",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Gets a player."
									}
								]
							},
							"type": {
								"type": "reference",
								"id": 233,
								"name": "CosmiNode"
							}
						}
					]
				},
				{
					"id": 121,
					"name": "getMaxListeners",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 526,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 122,
							"name": "getMaxListeners",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns the current max listener value for the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " which is either\nset by "
									},
									{
										"kind": "code",
										"text": "`emitter.setMaxListeners(n)`"
									},
									{
										"kind": "text",
										"text": " or defaults to "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "defaultMaxListeners",
										"target": 41
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v1.0.0"
											}
										]
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 62,
					"name": "init",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "src/lib/Cosmicord.ts",
							"line": 52,
							"character": 15,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/Cosmicord.ts#L52"
						}
					],
					"signatures": [
						{
							"id": 63,
							"name": "init",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Initializes the cosmicord client."
									}
								]
							},
							"parameters": [
								{
									"id": 64,
									"name": "clientId",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 129,
					"name": "listenerCount",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 616,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 130,
							"name": "listenerCount",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns the number of listeners listening to the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v3.2.0"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 131,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the event being listened for"
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 123,
					"name": "listeners",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 539,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 124,
							"name": "listeners",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns a copy of the array of listeners for the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ".\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nserver.on('connection', (stream) => {\n  console.log('someone connected!');\n});\nconsole.log(util.inspect(server.listeners('connection')));\n// Prints: [ [Function] ]\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.1.26"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 125,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "Function",
									"qualifiedName": "Function",
									"package": "typescript"
								}
							}
						}
					]
				},
				{
					"id": 108,
					"name": "off",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 499,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 109,
							"name": "off",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Alias for "
									},
									{
										"kind": "code",
										"text": "`emitter.removeListener()`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v10.0.0"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 110,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 111,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 112,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/node/events.d.ts",
													"line": 499,
													"character": 58
												}
											],
											"signatures": [
												{
													"id": 113,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 114,
															"name": "args",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 1,
								"name": "Cosmicord"
							}
						}
					]
				},
				{
					"id": 45,
					"name": "on",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/lib/Cosmicord.ts",
							"line": 18,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/Cosmicord.ts#L18"
						}
					],
					"signatures": [
						{
							"id": 46,
							"name": "on",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"typeParameter": [
								{
									"id": 47,
									"name": "Key",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "typeOperator",
										"operator": "keyof",
										"target": {
											"type": "reference",
											"id": 1746,
											"name": "CosmiEvents"
										}
									}
								}
							],
							"parameters": [
								{
									"id": 48,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 47,
										"name": "Key"
									}
								},
								{
									"id": 49,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 50,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"sources": [
												{
													"fileName": "src/lib/Cosmicord.ts",
													"line": 20,
													"character": 14,
													"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/Cosmicord.ts#L20"
												}
											],
											"signatures": [
												{
													"id": 51,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 52,
															"name": "args",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isRest": true
															},
															"type": {
																"type": "indexedAccess",
																"indexType": {
																	"type": "reference",
																	"id": 47,
																	"name": "Key"
																},
																"objectType": {
																	"type": "reference",
																	"id": 1746,
																	"name": "CosmiEvents"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 1,
								"name": "Cosmicord"
							}
						}
					]
				},
				{
					"id": 94,
					"name": "once",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 414,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 95,
							"name": "once",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Adds a **one-time**"
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " function for the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ". The\nnext time "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": " is triggered, this listener is removed and then invoked.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nserver.once('connection', (stream) => {\n  console.log('Ah, we have our first user!');\n});\n```"
									},
									{
										"kind": "text",
										"text": "\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained.\n\nBy default, event listeners are invoked in the order they are added. The"
									},
									{
										"kind": "code",
										"text": "`emitter.prependOnceListener()`"
									},
									{
										"kind": "text",
										"text": " method can be used as an alternative to add the\nevent listener to the beginning of the listeners array.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nconst myEE = new EventEmitter();\nmyEE.once('foo', () => console.log('a'));\nmyEE.prependOnceListener('foo', () => console.log('b'));\nmyEE.emit('foo');\n// Prints:\n//   b\n//   a\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.3.0"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 96,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the event."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 97,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The callback function"
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 98,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/node/events.d.ts",
													"line": 414,
													"character": 59
												}
											],
											"signatures": [
												{
													"id": 99,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 100,
															"name": "args",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 1,
								"name": "Cosmicord"
							}
						}
					]
				},
				{
					"id": 132,
					"name": "prependListener",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 634,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 133,
							"name": "prependListener",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Adds the "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " function to the _beginning_ of the listeners array for the\nevent named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ". No checks are made to see if the "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " has\nalready been added. Multiple calls passing the same combination of "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": "and "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " will result in the "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " being added, and called, multiple\ntimes.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nserver.prependListener('connection', (stream) => {\n  console.log('someone connected!');\n});\n```"
									},
									{
										"kind": "text",
										"text": "\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v6.0.0"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 134,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the event."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 135,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The callback function"
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 136,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/node/events.d.ts",
													"line": 634,
													"character": 70
												}
											],
											"signatures": [
												{
													"id": 137,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 138,
															"name": "args",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 1,
								"name": "Cosmicord"
							}
						}
					]
				},
				{
					"id": 139,
					"name": "prependOnceListener",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 650,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 140,
							"name": "prependOnceListener",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Adds a **one-time**"
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " function for the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": " to the _beginning_ of the listeners array. The next time "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": " is triggered, this\nlistener is removed, and then invoked.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nserver.prependOnceListener('connection', (stream) => {\n  console.log('Ah, we have our first user!');\n});\n```"
									},
									{
										"kind": "text",
										"text": "\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v6.0.0"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 141,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the event."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 142,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The callback function"
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 143,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/node/events.d.ts",
													"line": 650,
													"character": 74
												}
											],
											"signatures": [
												{
													"id": 144,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 145,
															"name": "args",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 1,
								"name": "Cosmicord"
							}
						}
					]
				},
				{
					"id": 126,
					"name": "rawListeners",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 569,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 127,
							"name": "rawListeners",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns a copy of the array of listeners for the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ",\nincluding any wrappers (such as those created by "
									},
									{
										"kind": "code",
										"text": "`.once()`"
									},
									{
										"kind": "text",
										"text": ").\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nconst emitter = new EventEmitter();\nemitter.once('log', () => console.log('log once'));\n\n// Returns a new Array with a function `onceWrapper` which has a property\n// `listener` which contains the original listener bound above\nconst listeners = emitter.rawListeners('log');\nconst logFnWrapper = listeners[0];\n\n// Logs \"log once\" to the console and does not unbind the `once` event\nlogFnWrapper.listener();\n\n// Logs \"log once\" to the console and removes the listener\nlogFnWrapper();\n\nemitter.on('log', () => console.log('log persistently'));\n// Will return a new Array with a single function bound by `.on()` above\nconst newListeners = emitter.rawListeners('log');\n\n// Logs \"log persistently\" twice\nnewListeners[0]();\nemitter.emit('log');\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v9.4.0"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 128,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "Function",
									"qualifiedName": "Function",
									"package": "typescript"
								}
							}
						}
					]
				},
				{
					"id": 115,
					"name": "removeAllListeners",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 510,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 116,
							"name": "removeAllListeners",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Removes all listeners, or those of the specified "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ".\n\nIt is bad practice to remove listeners added elsewhere in the code,\nparticularly when the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " instance was created by some other\ncomponent or module (e.g. sockets or file streams).\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.1.26"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 117,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 1,
								"name": "Cosmicord"
							}
						}
					]
				},
				{
					"id": 101,
					"name": "removeListener",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 494,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 102,
							"name": "removeListener",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Removes the specified "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " from the listener array for the event named"
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ".\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nconst callback = (stream) => {\n  console.log('someone connected!');\n};\nserver.on('connection', callback);\n// ...\nserver.removeListener('connection', callback);\n```"
									},
									{
										"kind": "text",
										"text": "\n\n"
									},
									{
										"kind": "code",
										"text": "`removeListener()`"
									},
									{
										"kind": "text",
										"text": " will remove, at most, one instance of a listener from the\nlistener array. If any single listener has been added multiple times to the\nlistener array for the specified "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ", then "
									},
									{
										"kind": "code",
										"text": "`removeListener()`"
									},
									{
										"kind": "text",
										"text": " must be\ncalled multiple times to remove each instance.\n\nOnce an event is emitted, all listeners attached to it at the\ntime of emitting are called in order. This implies that any"
									},
									{
										"kind": "code",
										"text": "`removeListener()`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`removeAllListeners()`"
									},
									{
										"kind": "text",
										"text": " calls _after_ emitting and _before_ the last listener finishes execution\nwill not remove them from"
									},
									{
										"kind": "code",
										"text": "`emit()`"
									},
									{
										"kind": "text",
										"text": " in progress. Subsequent events behave as expected.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nconst myEmitter = new MyEmitter();\n\nconst callbackA = () => {\n  console.log('A');\n  myEmitter.removeListener('event', callbackB);\n};\n\nconst callbackB = () => {\n  console.log('B');\n};\n\nmyEmitter.on('event', callbackA);\n\nmyEmitter.on('event', callbackB);\n\n// callbackA removes listener callbackB but it will still be called.\n// Internal listener array at time of emit [callbackA, callbackB]\nmyEmitter.emit('event');\n// Prints:\n//   A\n//   B\n\n// callbackB is now removed.\n// Internal listener array [callbackA]\nmyEmitter.emit('event');\n// Prints:\n//   A\n```"
									},
									{
										"kind": "text",
										"text": "\n\nBecause listeners are managed using an internal array, calling this will\nchange the position indices of any listener registered _after_ the listener\nbeing removed. This will not impact the order in which listeners are called,\nbut it means that any copies of the listener array as returned by\nthe "
									},
									{
										"kind": "code",
										"text": "`emitter.listeners()`"
									},
									{
										"kind": "text",
										"text": " method will need to be recreated.\n\nWhen a single function has been added as a handler multiple times for a single\nevent (as in the example below), "
									},
									{
										"kind": "code",
										"text": "`removeListener()`"
									},
									{
										"kind": "text",
										"text": " will remove the most\nrecently added instance. In the example the "
									},
									{
										"kind": "code",
										"text": "`once('ping')`"
									},
									{
										"kind": "text",
										"text": "listener is removed:\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nconst ee = new EventEmitter();\n\nfunction pong() {\n  console.log('pong');\n}\n\nee.on('ping', pong);\nee.once('ping', pong);\nee.removeListener('ping', pong);\n\nee.emit('ping');\nee.emit('ping');\n```"
									},
									{
										"kind": "text",
										"text": "\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.1.26"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 103,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 104,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 105,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/node/events.d.ts",
													"line": 494,
													"character": 69
												}
											],
											"signatures": [
												{
													"id": 106,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 107,
															"name": "args",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 1,
								"name": "Cosmicord"
							}
						}
					]
				},
				{
					"id": 65,
					"name": "search",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "src/lib/Cosmicord.ts",
							"line": 65,
							"character": 15,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/Cosmicord.ts#L65"
						}
					],
					"signatures": [
						{
							"id": 66,
							"name": "search",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Searches for tracks."
									}
								]
							},
							"parameters": [
								{
									"id": 67,
									"name": "query",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1793,
										"name": "CosmiSearchQuery"
									}
								},
								{
									"id": 68,
									"name": "requesterId",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 1796,
										"name": "CosmiLoadedTracks"
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 118,
					"name": "setMaxListeners",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 520,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 119,
							"name": "setMaxListeners",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "By default "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": "s will print a warning if more than "
									},
									{
										"kind": "code",
										"text": "`10`"
									},
									{
										"kind": "text",
										"text": " listeners are\nadded for a particular event. This is a useful default that helps finding\nmemory leaks. The "
									},
									{
										"kind": "code",
										"text": "`emitter.setMaxListeners()`"
									},
									{
										"kind": "text",
										"text": " method allows the limit to be\nmodified for this specific "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " instance. The value can be set to"
									},
									{
										"kind": "code",
										"text": "`Infinity`"
									},
									{
										"kind": "text",
										"text": " (or "
									},
									{
										"kind": "code",
										"text": "`0`"
									},
									{
										"kind": "text",
										"text": ") to indicate an unlimited number of listeners.\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.3.5"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 120,
									"name": "n",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 1,
								"name": "Cosmicord"
							}
						}
					]
				},
				{
					"id": 84,
					"name": "updateVoiceState",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "src/lib/Cosmicord.ts",
							"line": 145,
							"character": 15,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/Cosmicord.ts#L145"
						}
					],
					"signatures": [
						{
							"id": 85,
							"name": "updateVoiceState",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Gets a player."
									}
								]
							},
							"parameters": [
								{
									"id": 86,
									"name": "data",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 1761,
												"name": "VoiceState"
											},
											{
												"type": "reference",
												"id": 1770,
												"name": "VoiceServer"
											},
											{
												"type": "reference",
												"id": 1774,
												"name": "VoicePacket"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 30,
					"name": "getEventListeners",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 299,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 31,
							"name": "getEventListeners",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns a copy of the array of listeners for the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ".\n\nFor "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": "s this behaves exactly the same as calling "
									},
									{
										"kind": "code",
										"text": "`.listeners`"
									},
									{
										"kind": "text",
										"text": " on\nthe emitter.\n\nFor "
									},
									{
										"kind": "code",
										"text": "`EventTarget`"
									},
									{
										"kind": "text",
										"text": "s this is the only way to get the event listeners for the\nevent target. This is useful for debugging and diagnostic purposes.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nconst { getEventListeners, EventEmitter } = require('events');\n\n{\n  const ee = new EventEmitter();\n  const listener = () => console.log('Events are fun');\n  ee.on('foo', listener);\n  getEventListeners(ee, 'foo'); // [listener]\n}\n{\n  const et = new EventTarget();\n  const listener = () => console.log('Events are fun');\n  et.addEventListener('foo', listener);\n  getEventListeners(et, 'foo'); // [listener]\n}\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v15.2.0, v14.17.0"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 32,
									"name": "emitter",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "EventEmitter",
												"qualifiedName": "global.NodeJS.EventEmitter",
												"package": "@types/node"
											},
											{
												"type": "reference",
												"name": "_DOMEventTarget",
												"qualifiedName": "_DOMEventTarget",
												"package": "@types/node"
											}
										]
									}
								},
								{
									"id": 33,
									"name": "name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "Function",
									"qualifiedName": "Function",
									"package": "typescript"
								}
							}
						}
					]
				},
				{
					"id": 26,
					"name": "listenerCount",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 271,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 27,
							"name": "listenerCount",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "A class method that returns the number of listeners for the given "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": "registered on the given "
									},
									{
										"kind": "code",
										"text": "`emitter`"
									},
									{
										"kind": "text",
										"text": ".\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nconst { EventEmitter, listenerCount } = require('events');\nconst myEmitter = new EventEmitter();\nmyEmitter.on('event', () => {});\nmyEmitter.on('event', () => {});\nconsole.log(listenerCount(myEmitter, 'event'));\n// Prints: 2\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.9.12"
											}
										]
									},
									{
										"tag": "@deprecated",
										"content": [
											{
												"kind": "text",
												"text": "Since v3.2.0 - Use "
											},
											{
												"kind": "code",
												"text": "`listenerCount`"
											},
											{
												"kind": "text",
												"text": " instead."
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 28,
									"name": "emitter",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The emitter to query"
											}
										]
									},
									"type": {
										"type": "reference",
										"name": "EventEmitter",
										"qualifiedName": "global.NodeJS.EventEmitter",
										"package": "@types/node"
									}
								},
								{
									"id": 29,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The event name"
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 16,
					"name": "on",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 254,
							"character": 15
						},
						{
							"fileName": "node_modules/discord.js/typings/index.d.ts",
							"line": 229,
							"character": 18
						}
					],
					"signatures": [
						{
							"id": 17,
							"name": "on",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "code",
										"text": "```js\nconst { on, EventEmitter } = require('events');\n\n(async () => {\n  const ee = new EventEmitter();\n\n  // Emit later on\n  process.nextTick(() => {\n    ee.emit('foo', 'bar');\n    ee.emit('foo', 42);\n  });\n\n  for await (const event of on(ee, 'foo')) {\n    // The execution of this inner block is synchronous and it\n    // processes one event at a time (even with await). Do not use\n    // if concurrent execution is required.\n    console.log(event); // prints ['bar'] [42]\n  }\n  // Unreachable here\n})();\n```"
									},
									{
										"kind": "text",
										"text": "\n\nReturns an "
									},
									{
										"kind": "code",
										"text": "`AsyncIterator`"
									},
									{
										"kind": "text",
										"text": " that iterates "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": " events. It will throw\nif the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " emits "
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": ". It removes all listeners when\nexiting the loop. The "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " returned by each iteration is an array\ncomposed of the emitted event arguments.\n\nAn "
									},
									{
										"kind": "code",
										"text": "`AbortSignal`"
									},
									{
										"kind": "text",
										"text": " can be used to cancel waiting on events:\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nconst { on, EventEmitter } = require('events');\nconst ac = new AbortController();\n\n(async () => {\n  const ee = new EventEmitter();\n\n  // Emit later on\n  process.nextTick(() => {\n    ee.emit('foo', 'bar');\n    ee.emit('foo', 42);\n  });\n\n  for await (const event of on(ee, 'foo', { signal: ac.signal })) {\n    // The execution of this inner block is synchronous and it\n    // processes one event at a time (even with await). Do not use\n    // if concurrent execution is required.\n    console.log(event); // prints ['bar'] [42]\n  }\n  // Unreachable here\n})();\n\nprocess.nextTick(() => ac.abort());\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v13.6.0, v12.16.0"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "that iterates "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": " events emitted by the "
											},
											{
												"kind": "code",
												"text": "`emitter`"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 18,
									"name": "emitter",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"name": "EventEmitter",
										"qualifiedName": "global.NodeJS.EventEmitter",
										"package": "@types/node"
									}
								},
								{
									"id": 19,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the event being listened for"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 20,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"name": "StaticEventEmitterOptions",
										"qualifiedName": "StaticEventEmitterOptions",
										"package": "@types/node"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "AsyncIterableIterator",
								"qualifiedName": "AsyncIterableIterator",
								"package": "typescript"
							}
						},
						{
							"id": 21,
							"name": "on",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"typeParameter": [
								{
									"id": 22,
									"name": "E",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"name": "__module",
										"qualifiedName": "EventEmitter",
										"package": "@types/node"
									}
								},
								{
									"id": 23,
									"name": "K",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "typeOperator",
										"operator": "keyof",
										"target": {
											"type": "reference",
											"name": "ClientEvents",
											"qualifiedName": "ClientEvents",
											"package": "discord.js"
										}
									}
								}
							],
							"parameters": [
								{
									"id": 24,
									"name": "eventEmitter",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"id": 22,
										"name": "E",
										"qualifiedName": "E",
										"package": "discord.js"
									}
								},
								{
									"id": 25,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "conditional",
										"checkType": {
											"type": "reference",
											"id": 22,
											"name": "E",
											"qualifiedName": "E",
											"package": "discord.js"
										},
										"extendsType": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "intrinsic",
													"name": "boolean"
												}
											],
											"name": "Client",
											"qualifiedName": "Client",
											"package": "discord.js"
										},
										"trueType": {
											"type": "reference",
											"id": 23,
											"name": "K",
											"qualifiedName": "K",
											"package": "discord.js"
										},
										"falseType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "conditional",
										"checkType": {
											"type": "reference",
											"id": 22,
											"name": "E",
											"qualifiedName": "E",
											"package": "discord.js"
										},
										"extendsType": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "intrinsic",
													"name": "boolean"
												}
											],
											"name": "Client",
											"qualifiedName": "Client",
											"package": "discord.js"
										},
										"trueType": {
											"type": "indexedAccess",
											"indexType": {
												"type": "reference",
												"id": 23,
												"name": "K",
												"qualifiedName": "K",
												"package": "discord.js"
											},
											"objectType": {
												"type": "reference",
												"name": "ClientEvents",
												"qualifiedName": "ClientEvents",
												"package": "discord.js"
											}
										},
										"falseType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								],
								"name": "AsyncIterableIterator",
								"qualifiedName": "AsyncIterableIterator",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 2,
					"name": "once",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 194,
							"character": 15
						},
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 195,
							"character": 15
						},
						{
							"fileName": "node_modules/discord.js/typings/index.d.ts",
							"line": 225,
							"character": 18
						}
					],
					"signatures": [
						{
							"id": 3,
							"name": "once",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Creates a "
									},
									{
										"kind": "code",
										"text": "`Promise`"
									},
									{
										"kind": "text",
										"text": " that is fulfilled when the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " emits the given\nevent or that is rejected if the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " emits "
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": " while waiting.\nThe "
									},
									{
										"kind": "code",
										"text": "`Promise`"
									},
									{
										"kind": "text",
										"text": " will resolve with an array of all the arguments emitted to the\ngiven event.\n\nThis method is intentionally generic and works with the web platform [EventTarget](https://dom.spec.whatwg.org/#interface-eventtarget) interface, which has no special"
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": " event\nsemantics and does not listen to the "
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": " event.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nconst { once, EventEmitter } = require('events');\n\nasync function run() {\n  const ee = new EventEmitter();\n\n  process.nextTick(() => {\n    ee.emit('myevent', 42);\n  });\n\n  const [value] = await once(ee, 'myevent');\n  console.log(value);\n\n  const err = new Error('kaboom');\n  process.nextTick(() => {\n    ee.emit('error', err);\n  });\n\n  try {\n    await once(ee, 'myevent');\n  } catch (err) {\n    console.log('error happened', err);\n  }\n}\n\nrun();\n```"
									},
									{
										"kind": "text",
										"text": "\n\nThe special handling of the "
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": " event is only used when "
									},
									{
										"kind": "code",
										"text": "`events.once()`"
									},
									{
										"kind": "text",
										"text": "is used to wait for another event. If "
									},
									{
										"kind": "code",
										"text": "`events.once()`"
									},
									{
										"kind": "text",
										"text": " is used to wait for the\n'"
									},
									{
										"kind": "code",
										"text": "`error'`"
									},
									{
										"kind": "text",
										"text": " event itself, then it is treated as any other kind of event without\nspecial handling:\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nconst { EventEmitter, once } = require('events');\n\nconst ee = new EventEmitter();\n\nonce(ee, 'error')\n  .then(([err]) => console.log('ok', err.message))\n  .catch((err) => console.log('error', err.message));\n\nee.emit('error', new Error('boom'));\n\n// Prints: ok boom\n```"
									},
									{
										"kind": "text",
										"text": "\n\nAn "
									},
									{
										"kind": "code",
										"text": "`AbortSignal`"
									},
									{
										"kind": "text",
										"text": " can be used to cancel waiting for the event:\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nconst { EventEmitter, once } = require('events');\n\nconst ee = new EventEmitter();\nconst ac = new AbortController();\n\nasync function foo(emitter, event, signal) {\n  try {\n    await once(emitter, event, { signal });\n    console.log('event emitted!');\n  } catch (error) {\n    if (error.name === 'AbortError') {\n      console.error('Waiting for the event was canceled!');\n    } else {\n      console.error('There was an error', error.message);\n    }\n  }\n}\n\nfoo(ee, 'foo', ac.signal);\nac.abort(); // Abort waiting for the event\nee.emit('foo'); // Prints: Waiting for the event was canceled!\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v11.13.0, v10.16.0"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 4,
									"name": "emitter",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"name": "_NodeEventTarget",
										"qualifiedName": "_NodeEventTarget",
										"package": "@types/node"
									}
								},
								{
									"id": 5,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 6,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"name": "StaticEventEmitterOptions",
										"qualifiedName": "StaticEventEmitterOptions",
										"package": "@types/node"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							}
						},
						{
							"id": 7,
							"name": "once",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 8,
									"name": "emitter",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"name": "_DOMEventTarget",
										"qualifiedName": "_DOMEventTarget",
										"package": "@types/node"
									}
								},
								{
									"id": 9,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 10,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"name": "StaticEventEmitterOptions",
										"qualifiedName": "StaticEventEmitterOptions",
										"package": "@types/node"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							}
						},
						{
							"id": 11,
							"name": "once",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Add type overloads for client events."
									}
								]
							},
							"typeParameter": [
								{
									"id": 12,
									"name": "E",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"name": "__module",
										"qualifiedName": "EventEmitter",
										"package": "@types/node"
									}
								},
								{
									"id": 13,
									"name": "K",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "typeOperator",
										"operator": "keyof",
										"target": {
											"type": "reference",
											"name": "ClientEvents",
											"qualifiedName": "ClientEvents",
											"package": "discord.js"
										}
									}
								}
							],
							"parameters": [
								{
									"id": 14,
									"name": "eventEmitter",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"id": 12,
										"name": "E",
										"qualifiedName": "E",
										"package": "discord.js"
									}
								},
								{
									"id": 15,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "conditional",
										"checkType": {
											"type": "reference",
											"id": 12,
											"name": "E",
											"qualifiedName": "E",
											"package": "discord.js"
										},
										"extendsType": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "intrinsic",
													"name": "boolean"
												}
											],
											"name": "Client",
											"qualifiedName": "Client",
											"package": "discord.js"
										},
										"trueType": {
											"type": "reference",
											"id": 13,
											"name": "K",
											"qualifiedName": "K",
											"package": "discord.js"
										},
										"falseType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "conditional",
										"checkType": {
											"type": "reference",
											"id": 12,
											"name": "E",
											"qualifiedName": "E",
											"package": "discord.js"
										},
										"extendsType": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "intrinsic",
													"name": "boolean"
												}
											],
											"name": "Client",
											"qualifiedName": "Client",
											"package": "discord.js"
										},
										"trueType": {
											"type": "indexedAccess",
											"indexType": {
												"type": "reference",
												"id": 13,
												"name": "K",
												"qualifiedName": "K",
												"package": "discord.js"
											},
											"objectType": {
												"type": "reference",
												"name": "ClientEvents",
												"qualifiedName": "ClientEvents",
												"package": "discord.js"
											}
										},
										"falseType": {
											"type": "array",
											"elementType": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 34,
					"name": "setMaxListeners",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 317,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 35,
							"name": "setMaxListeners",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "code",
										"text": "```js\nconst {\n  setMaxListeners,\n  EventEmitter\n} = require('events');\n\nconst target = new EventTarget();\nconst emitter = new EventEmitter();\n\nsetMaxListeners(5, target, emitter);\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v15.4.0"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 36,
									"name": "n",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A non-negative number. The maximum number of listeners per "
											},
											{
												"kind": "code",
												"text": "`EventTarget`"
											},
											{
												"kind": "text",
												"text": " event."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 37,
									"name": "eventTargets",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isRest": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "union",
											"types": [
												{
													"type": "reference",
													"name": "EventEmitter",
													"qualifiedName": "global.NodeJS.EventEmitter",
													"package": "@types/node"
												},
												{
													"type": "reference",
													"name": "_DOMEventTarget",
													"qualifiedName": "_DOMEventTarget",
													"package": "@types/node"
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						42
					]
				},
				{
					"title": "Properties",
					"children": [
						59,
						58,
						61,
						60,
						39,
						40,
						41,
						38
					]
				},
				{
					"title": "Methods",
					"children": [
						87,
						69,
						75,
						72,
						79,
						53,
						146,
						82,
						121,
						62,
						129,
						123,
						108,
						45,
						94,
						132,
						139,
						126,
						115,
						101,
						65,
						118,
						84,
						30,
						26,
						16,
						2,
						34
					]
				}
			],
			"sources": [
				{
					"fileName": "src/lib/Cosmicord.ts",
					"line": 17,
					"character": 17,
					"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/Cosmicord.ts#L17"
				},
				{
					"fileName": "src/lib/Cosmicord.ts",
					"line": 29,
					"character": 13,
					"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/lib/Cosmicord.ts#L29"
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "EventEmitter",
					"qualifiedName": "EventEmitter",
					"package": "@types/node"
				}
			]
		},
		{
			"id": 1609,
			"name": "ChannelMix",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The channel mix filter object"
					}
				]
			},
			"children": [
				{
					"id": 1610,
					"name": "leftToLeft",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The left to left channel mix factor (0.0 ≤ x ≤ 1.0)"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 520,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L520"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 1611,
					"name": "leftToRight",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The left to right channel mix factor (0.0 ≤ x ≤ 1.0)"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 523,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L523"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 1612,
					"name": "rightToLeft",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The right to left channel mix factor (0.0 ≤ x ≤ 1.0)"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 526,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L526"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 1613,
					"name": "rightToRight",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The right to right channel mix factor (0.0 ≤ x ≤ 1.0)"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 529,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L529"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1610,
						1611,
						1612,
						1613
					]
				}
			],
			"sources": [
				{
					"fileName": "src/interfaces/Rest.interface.ts",
					"line": 518,
					"character": 17,
					"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L518"
				}
			]
		},
		{
			"id": 1746,
			"name": "CosmiEvents",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1747,
					"name": "debug",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Cosmicord.interface.ts",
							"line": 12,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Cosmicord.interface.ts#L12"
						}
					],
					"type": {
						"type": "tuple",
						"elements": [
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 1749,
					"name": "nodeConnected",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Cosmicord.interface.ts",
							"line": 15,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Cosmicord.interface.ts#L15"
						}
					],
					"type": {
						"type": "tuple",
						"elements": [
							{
								"type": "reference",
								"id": 233,
								"name": "CosmiNode"
							}
						]
					}
				},
				{
					"id": 1750,
					"name": "nodeDestroyed",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Cosmicord.interface.ts",
							"line": 16,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Cosmicord.interface.ts#L16"
						}
					],
					"type": {
						"type": "tuple",
						"elements": [
							{
								"type": "reference",
								"id": 233,
								"name": "CosmiNode"
							}
						]
					}
				},
				{
					"id": 1752,
					"name": "nodeError",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Cosmicord.interface.ts",
							"line": 18,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Cosmicord.interface.ts#L18"
						}
					],
					"type": {
						"type": "tuple",
						"elements": [
							{
								"type": "reference",
								"id": 233,
								"name": "CosmiNode"
							},
							{
								"type": "reference",
								"name": "Error",
								"qualifiedName": "Error",
								"package": "typescript"
							}
						]
					}
				},
				{
					"id": 1751,
					"name": "nodeStats",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Cosmicord.interface.ts",
							"line": 17,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Cosmicord.interface.ts#L17"
						}
					],
					"type": {
						"type": "tuple",
						"elements": [
							{
								"type": "reference",
								"id": 233,
								"name": "CosmiNode"
							},
							{
								"type": "reference",
								"id": 1442,
								"name": "NodeStats"
							}
						]
					}
				},
				{
					"id": 1748,
					"name": "payload",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Cosmicord.interface.ts",
							"line": 13,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Cosmicord.interface.ts#L13"
						}
					],
					"type": {
						"type": "tuple",
						"elements": [
							{
								"type": "intrinsic",
								"name": "any"
							}
						]
					}
				},
				{
					"id": 1753,
					"name": "playerCreated",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Cosmicord.interface.ts",
							"line": 20,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Cosmicord.interface.ts#L20"
						}
					],
					"type": {
						"type": "tuple",
						"elements": [
							{
								"type": "reference",
								"id": 233,
								"name": "CosmiNode"
							},
							{
								"type": "reference",
								"id": 904,
								"name": "CosmiPlayer"
							}
						]
					}
				},
				{
					"id": 1754,
					"name": "playerDestoryed",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Cosmicord.interface.ts",
							"line": 21,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Cosmicord.interface.ts#L21"
						}
					],
					"type": {
						"type": "tuple",
						"elements": [
							{
								"type": "reference",
								"id": 233,
								"name": "CosmiNode"
							},
							{
								"type": "reference",
								"id": 904,
								"name": "CosmiPlayer"
							}
						]
					}
				},
				{
					"id": 1755,
					"name": "playerMoved",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Cosmicord.interface.ts",
							"line": 22,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Cosmicord.interface.ts#L22"
						}
					],
					"type": {
						"type": "tuple",
						"elements": [
							{
								"type": "reference",
								"id": 233,
								"name": "CosmiNode"
							},
							{
								"type": "reference",
								"id": 904,
								"name": "CosmiPlayer"
							},
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 1760,
					"name": "queueEnd",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Cosmicord.interface.ts",
							"line": 29,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Cosmicord.interface.ts#L29"
						}
					],
					"type": {
						"type": "tuple",
						"elements": [
							{
								"type": "reference",
								"id": 904,
								"name": "CosmiPlayer"
							}
						]
					}
				},
				{
					"id": 1757,
					"name": "trackEnd",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Cosmicord.interface.ts",
							"line": 25,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Cosmicord.interface.ts#L25"
						}
					],
					"type": {
						"type": "tuple",
						"elements": [
							{
								"type": "reference",
								"id": 904,
								"name": "CosmiPlayer"
							},
							{
								"type": "reference",
								"id": 1068,
								"name": "CosmiTrack"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 1758,
					"name": "trackError",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Cosmicord.interface.ts",
							"line": 26,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Cosmicord.interface.ts#L26"
						}
					],
					"type": {
						"type": "tuple",
						"elements": [
							{
								"type": "reference",
								"id": 904,
								"name": "CosmiPlayer"
							},
							{
								"type": "reference",
								"name": "Error",
								"qualifiedName": "Error",
								"package": "typescript"
							}
						]
					}
				},
				{
					"id": 1756,
					"name": "trackStart",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Cosmicord.interface.ts",
							"line": 24,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Cosmicord.interface.ts#L24"
						}
					],
					"type": {
						"type": "tuple",
						"elements": [
							{
								"type": "reference",
								"id": 904,
								"name": "CosmiPlayer"
							},
							{
								"type": "reference",
								"id": 1068,
								"name": "CosmiTrack"
							}
						]
					}
				},
				{
					"id": 1759,
					"name": "trackStruck",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Cosmicord.interface.ts",
							"line": 27,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Cosmicord.interface.ts#L27"
						}
					],
					"type": {
						"type": "tuple",
						"elements": [
							{
								"type": "reference",
								"id": 904,
								"name": "CosmiPlayer"
							},
							{
								"type": "reference",
								"id": 1732,
								"name": "TrackStuckEventPayload"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1747,
						1749,
						1750,
						1752,
						1751,
						1748,
						1753,
						1754,
						1755,
						1760,
						1757,
						1758,
						1756,
						1759
					]
				}
			],
			"sources": [
				{
					"fileName": "src/interfaces/Cosmicord.interface.ts",
					"line": 11,
					"character": 17,
					"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Cosmicord.interface.ts#L11"
				}
			]
		},
		{
			"id": 1796,
			"name": "CosmiLoadedTracks",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1800,
					"name": "exception",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The exception message if load failed"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Cosmicord.interface.ts",
							"line": 118,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Cosmicord.interface.ts#L118"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1797,
					"name": "loadType",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The load type"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Cosmicord.interface.ts",
							"line": 103,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Cosmicord.interface.ts#L103"
						}
					],
					"type": {
						"type": "reference",
						"id": 1527,
						"name": "RestLoadResultType"
					}
				},
				{
					"id": 1798,
					"name": "playlistInfo",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The playlist info"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Cosmicord.interface.ts",
							"line": 108,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Cosmicord.interface.ts#L108"
						}
					],
					"type": {
						"type": "reference",
						"id": 1533,
						"name": "RestPlaylistInfo"
					}
				},
				{
					"id": 1799,
					"name": "tracks",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The tracks loaded"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Cosmicord.interface.ts",
							"line": 113,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Cosmicord.interface.ts#L113"
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 1068,
							"name": "CosmiTrack"
						}
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1800,
						1797,
						1798,
						1799
					]
				}
			],
			"sources": [
				{
					"fileName": "src/interfaces/Cosmicord.interface.ts",
					"line": 99,
					"character": 17,
					"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Cosmicord.interface.ts#L99"
				}
			]
		},
		{
			"id": 1433,
			"name": "CosmiNodeOptions",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1434,
					"name": "host",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The host for the node."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Node.interface.ts",
							"line": 14,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Node.interface.ts#L14"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1438,
					"name": "identifier",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The identifier for the node."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Node.interface.ts",
							"line": 26,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Node.interface.ts#L26"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1436,
					"name": "password",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The password for the node."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Node.interface.ts",
							"line": 20,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Node.interface.ts#L20"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1435,
					"name": "port",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The port for the node."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Node.interface.ts",
							"line": 17,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Node.interface.ts#L17"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 1441,
					"name": "requestTimeout",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The timeout used for api calls"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Node.interface.ts",
							"line": 35,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Node.interface.ts#L35"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 1439,
					"name": "retryAmount",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The retryAmount for the node."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Node.interface.ts",
							"line": 29,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Node.interface.ts#L29"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 1440,
					"name": "retryDelay",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The retryDelay for the node."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Node.interface.ts",
							"line": 32,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Node.interface.ts#L32"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 1437,
					"name": "secure",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Whether the host uses SSL."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Node.interface.ts",
							"line": 23,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Node.interface.ts#L23"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1434,
						1438,
						1436,
						1435,
						1441,
						1439,
						1440,
						1437
					]
				}
			],
			"sources": [
				{
					"fileName": "src/interfaces/Node.interface.ts",
					"line": 12,
					"character": 17,
					"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Node.interface.ts#L12"
				}
			]
		},
		{
			"id": 1785,
			"name": "CosmiOptions",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1792,
					"name": "clientId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The discord client id."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Cosmicord.interface.ts",
							"line": 84,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Cosmicord.interface.ts#L84"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1791,
					"name": "nodes",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The nodes to use.\nYou can also use the "
							},
							{
								"kind": "code",
								"text": "`createNode`"
							},
							{
								"kind": "text",
								"text": " method to create a node."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Cosmicord.interface.ts",
							"line": 79,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Cosmicord.interface.ts#L79"
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 1433,
							"name": "CosmiNodeOptions"
						}
					}
				},
				{
					"id": 1786,
					"name": "send",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Cosmicord.interface.ts",
							"line": 73,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Cosmicord.interface.ts#L73"
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 1787,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"sources": [
								{
									"fileName": "src/interfaces/Cosmicord.interface.ts",
									"line": 73,
									"character": 8,
									"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Cosmicord.interface.ts#L73"
								}
							],
							"signatures": [
								{
									"id": 1788,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Sends voice packets to discord."
											}
										]
									},
									"parameters": [
										{
											"id": 1789,
											"name": "id",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The id of the guild."
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1790,
											"name": "payload",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The payload to send."
													}
												]
											},
											"type": {
												"type": "reference",
												"id": 1777,
												"name": "DiscordVoicePayload"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1792,
						1791,
						1786
					]
				}
			],
			"sources": [
				{
					"fileName": "src/interfaces/Cosmicord.interface.ts",
					"line": 67,
					"character": 17,
					"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Cosmicord.interface.ts#L67"
				}
			]
		},
		{
			"id": 1627,
			"name": "CosmiPlayerOptions",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1634,
					"name": "filters",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The filters used by the player"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Player.interface.ts",
							"line": 23,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Player.interface.ts#L23"
						}
					],
					"type": {
						"type": "reference",
						"id": 1616,
						"name": "Filters"
					}
				},
				{
					"id": 1628,
					"name": "guildId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The guild id of the player"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Player.interface.ts",
							"line": 5,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Player.interface.ts#L5"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1633,
					"name": "selfDeafen",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "If the player should deaf itself."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Player.interface.ts",
							"line": 20,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Player.interface.ts#L20"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1632,
					"name": "selfMute",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "If the player should mute itself."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Player.interface.ts",
							"line": 17,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Player.interface.ts#L17"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1629,
					"name": "textChannel",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The text channel id of the player"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Player.interface.ts",
							"line": 8,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Player.interface.ts#L8"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1630,
					"name": "voiceChannel",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The voice channel id of the player"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Player.interface.ts",
							"line": 11,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Player.interface.ts#L11"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1631,
					"name": "volume",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The volume of the player, range 0-1000, in percentage"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Player.interface.ts",
							"line": 14,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Player.interface.ts#L14"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1634,
						1628,
						1633,
						1632,
						1629,
						1630,
						1631
					]
				}
			],
			"sources": [
				{
					"fileName": "src/interfaces/Player.interface.ts",
					"line": 3,
					"character": 17,
					"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Player.interface.ts#L3"
				}
			]
		},
		{
			"id": 1793,
			"name": "CosmiSearchQuery",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1794,
					"name": "query",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The query to search for."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Cosmicord.interface.ts",
							"line": 91,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Cosmicord.interface.ts#L91"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1795,
					"name": "source",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The source to search from."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Cosmicord.interface.ts",
							"line": 96,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Cosmicord.interface.ts#L96"
						}
					],
					"type": {
						"type": "reference",
						"id": 1464,
						"name": "SearchFrom"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1794,
						1795
					]
				}
			],
			"sources": [
				{
					"fileName": "src/interfaces/Cosmicord.interface.ts",
					"line": 87,
					"character": 17,
					"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Cosmicord.interface.ts#L87"
				}
			]
		},
		{
			"id": 1777,
			"name": "DiscordVoicePayload",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1779,
					"name": "d",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Cosmicord.interface.ts",
							"line": 59,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Cosmicord.interface.ts#L59"
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 1780,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 1782,
									"name": "channel_id",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "src/interfaces/Cosmicord.interface.ts",
											"line": 61,
											"character": 4,
											"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Cosmicord.interface.ts#L61"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1781,
									"name": "guild_id",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "src/interfaces/Cosmicord.interface.ts",
											"line": 60,
											"character": 4,
											"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Cosmicord.interface.ts#L60"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1784,
									"name": "self_deaf",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "src/interfaces/Cosmicord.interface.ts",
											"line": 63,
											"character": 4,
											"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Cosmicord.interface.ts#L63"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1783,
									"name": "self_mute",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "src/interfaces/Cosmicord.interface.ts",
											"line": 62,
											"character": 4,
											"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Cosmicord.interface.ts#L62"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"children": [
										1782,
										1781,
										1784,
										1783
									]
								}
							],
							"sources": [
								{
									"fileName": "src/interfaces/Cosmicord.interface.ts",
									"line": 59,
									"character": 5,
									"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Cosmicord.interface.ts#L59"
								}
							]
						}
					}
				},
				{
					"id": 1778,
					"name": "op",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Cosmicord.interface.ts",
							"line": 58,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Cosmicord.interface.ts#L58"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1779,
						1778
					]
				}
			],
			"sources": [
				{
					"fileName": "src/interfaces/Cosmicord.interface.ts",
					"line": 57,
					"character": 17,
					"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Cosmicord.interface.ts#L57"
				}
			]
		},
		{
			"id": 1600,
			"name": "Distortion",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The distortion filter object"
					}
				]
			},
			"children": [
				{
					"id": 1603,
					"name": "cosOffset",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Set the cos offset"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 499,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L499"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 1604,
					"name": "cosScale",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Set the cos scale"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 502,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L502"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 1607,
					"name": "offset",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Set the offset"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 511,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L511"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 1608,
					"name": "scale",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Set the scale"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 514,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L514"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 1601,
					"name": "sinOffset",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Set the sin offset"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 493,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L493"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 1602,
					"name": "sinScale",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Set the sin scale"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 496,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L496"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 1605,
					"name": "tanOffset",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Set the tan offset"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 505,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L505"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 1606,
					"name": "tanScale",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Set the tan scale"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 508,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L508"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1603,
						1604,
						1607,
						1608,
						1601,
						1602,
						1605,
						1606
					]
				}
			],
			"sources": [
				{
					"fileName": "src/interfaces/Rest.interface.ts",
					"line": 491,
					"character": 17,
					"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L491"
				}
			]
		},
		{
			"id": 1580,
			"name": "Equalizer",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The equalizer filter object"
					}
				]
			},
			"children": [
				{
					"id": 1581,
					"name": "bands",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Set the band (0 - 14)"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 433,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L433"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 1582,
					"name": "gain",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Set the gain (-0.25 - 1.0)"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 436,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L436"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1581,
						1582
					]
				}
			],
			"sources": [
				{
					"fileName": "src/interfaces/Rest.interface.ts",
					"line": 431,
					"character": 17,
					"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L431"
				}
			]
		},
		{
			"id": 1710,
			"name": "EventPayload",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1713,
					"name": "guildId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Socket.interface.ts",
							"line": 107,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L107"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1711,
					"name": "op",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Socket.interface.ts",
							"line": 105,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L105"
						}
					],
					"type": {
						"type": "literal",
						"value": "event"
					}
				},
				{
					"id": 1712,
					"name": "type",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Socket.interface.ts",
							"line": 106,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L106"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1713,
						1711,
						1712
					]
				}
			],
			"sources": [
				{
					"fileName": "src/interfaces/Socket.interface.ts",
					"line": 104,
					"character": 17,
					"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L104"
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"id": 1714,
					"name": "TrackStartEventPayload"
				},
				{
					"type": "reference",
					"id": 1720,
					"name": "TrackEndEventPayload"
				},
				{
					"type": "reference",
					"id": 1726,
					"name": "TrackExceptionEventPayload"
				},
				{
					"type": "reference",
					"id": 1732,
					"name": "TrackStuckEventPayload"
				},
				{
					"type": "reference",
					"id": 1739,
					"name": "WebSocketClosedEventPayload"
				}
			]
		},
		{
			"id": 1616,
			"name": "Filters",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The filters"
					}
				]
			},
			"children": [
				{
					"id": 1625,
					"name": "channelMix",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The channel mix filter"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 565,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L565"
						}
					],
					"type": {
						"type": "reference",
						"id": 1609,
						"name": "ChannelMix"
					}
				},
				{
					"id": 1624,
					"name": "distortion",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The distortion filter"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 562,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L562"
						}
					],
					"type": {
						"type": "reference",
						"id": 1600,
						"name": "Distortion"
					}
				},
				{
					"id": 1618,
					"name": "equalizer",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The equalizer filter"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 544,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L544"
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 1580,
							"name": "Equalizer"
						}
					}
				},
				{
					"id": 1619,
					"name": "karaoke",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The karaoke filter"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 547,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L547"
						}
					],
					"type": {
						"type": "reference",
						"id": 1583,
						"name": "Karaoke"
					}
				},
				{
					"id": 1626,
					"name": "lowPass",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The low pass filter"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 568,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L568"
						}
					],
					"type": {
						"type": "reference",
						"id": 1614,
						"name": "LowPass"
					}
				},
				{
					"id": 1623,
					"name": "rotation",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The rotation filter"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 559,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L559"
						}
					],
					"type": {
						"type": "reference",
						"id": 1598,
						"name": "Rotation"
					}
				},
				{
					"id": 1620,
					"name": "timescale",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The timescale filter"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 550,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L550"
						}
					],
					"type": {
						"type": "reference",
						"id": 1588,
						"name": "Timescale"
					}
				},
				{
					"id": 1621,
					"name": "tremolo",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The tremolo filter"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 553,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L553"
						}
					],
					"type": {
						"type": "reference",
						"id": 1592,
						"name": "Tremolo"
					}
				},
				{
					"id": 1622,
					"name": "vibrato",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The vibrato filter"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 556,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L556"
						}
					],
					"type": {
						"type": "reference",
						"id": 1595,
						"name": "Vibrato"
					}
				},
				{
					"id": 1617,
					"name": "volume",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Adjust the volume of the player from 0.0 to 5.0 (Values > 1.0 may cause clipping)"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 541,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L541"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1625,
						1624,
						1618,
						1619,
						1626,
						1623,
						1620,
						1621,
						1622,
						1617
					]
				}
			],
			"sources": [
				{
					"fileName": "src/interfaces/Rest.interface.ts",
					"line": 539,
					"character": 17,
					"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L539"
				}
			]
		},
		{
			"id": 1583,
			"name": "Karaoke",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The karaoke filter object"
					}
				]
			},
			"children": [
				{
					"id": 1586,
					"name": "filterBand",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Set the filter band"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 448,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L448"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 1587,
					"name": "filterWidth",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Set the filter width"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 451,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L451"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 1584,
					"name": "level",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Set the level between 0.0 - 1.0 (0.0 - no effect, 1.0 - full effecr)"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 442,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L442"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 1585,
					"name": "monoLevel",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Set the mono level between 0.0 - 1.0 (0.0 - no effect, 1.0 - full effect)"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 445,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L445"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1586,
						1587,
						1584,
						1585
					]
				}
			],
			"sources": [
				{
					"fileName": "src/interfaces/Rest.interface.ts",
					"line": 440,
					"character": 17,
					"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L440"
				}
			]
		},
		{
			"id": 1614,
			"name": "LowPass",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The low pass filter object"
					}
				]
			},
			"children": [
				{
					"id": 1615,
					"name": "smoothing",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The smoothing factor (1.0 < x)"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 535,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L535"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1615
					]
				}
			],
			"sources": [
				{
					"fileName": "src/interfaces/Rest.interface.ts",
					"line": 533,
					"character": 17,
					"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L533"
				}
			]
		},
		{
			"id": 1427,
			"name": "NodeEvents",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1428,
					"name": "connected",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Node.interface.ts",
							"line": 4,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Node.interface.ts#L4"
						}
					],
					"type": {
						"type": "tuple"
					}
				},
				{
					"id": 1429,
					"name": "destroyed",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Node.interface.ts",
							"line": 5,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Node.interface.ts#L5"
						}
					],
					"type": {
						"type": "tuple"
					}
				},
				{
					"id": 1431,
					"name": "playerCreated",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Node.interface.ts",
							"line": 8,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Node.interface.ts#L8"
						}
					],
					"type": {
						"type": "tuple",
						"elements": [
							{
								"type": "reference",
								"id": 904,
								"name": "CosmiPlayer"
							}
						]
					}
				},
				{
					"id": 1432,
					"name": "playerDestoryed",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Node.interface.ts",
							"line": 9,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Node.interface.ts#L9"
						}
					],
					"type": {
						"type": "tuple",
						"elements": [
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 1430,
					"name": "stats",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Node.interface.ts",
							"line": 6,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Node.interface.ts#L6"
						}
					],
					"type": {
						"type": "tuple",
						"elements": [
							{
								"type": "reference",
								"id": 1442,
								"name": "NodeStats"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1428,
						1429,
						1431,
						1432,
						1430
					]
				}
			],
			"sources": [
				{
					"fileName": "src/interfaces/Node.interface.ts",
					"line": 3,
					"character": 17,
					"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Node.interface.ts#L3"
				}
			]
		},
		{
			"id": 1442,
			"name": "NodeStats",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1452,
					"name": "cpu",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The cpu stats of the node."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Node.interface.ts",
							"line": 64,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Node.interface.ts#L64"
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 1453,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 1454,
									"name": "cores",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The amount of cores the node has."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/interfaces/Node.interface.ts",
											"line": 66,
											"character": 4,
											"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Node.interface.ts#L66"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1456,
									"name": "lavalinkLoad",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The lavalink load of the node."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/interfaces/Node.interface.ts",
											"line": 72,
											"character": 4,
											"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Node.interface.ts#L72"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1455,
									"name": "systemLoad",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The system load of the node."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/interfaces/Node.interface.ts",
											"line": 69,
											"character": 4,
											"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Node.interface.ts#L69"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"children": [
										1454,
										1456,
										1455
									]
								}
							],
							"sources": [
								{
									"fileName": "src/interfaces/Node.interface.ts",
									"line": 64,
									"character": 7,
									"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Node.interface.ts#L64"
								}
							]
						}
					}
				},
				{
					"id": 1457,
					"name": "frameStats",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The frame stats of the node."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Node.interface.ts",
							"line": 76,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Node.interface.ts#L76"
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 1458,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 1461,
									"name": "deficit",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The amount of frames that were deficit."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/interfaces/Node.interface.ts",
											"line": 84,
											"character": 4,
											"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Node.interface.ts#L84"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1460,
									"name": "nulled",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The amount of frames that were nulled."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/interfaces/Node.interface.ts",
											"line": 81,
											"character": 4,
											"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Node.interface.ts#L81"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1459,
									"name": "sent",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The amount of frames sent to Discord."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/interfaces/Node.interface.ts",
											"line": 78,
											"character": 4,
											"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Node.interface.ts#L78"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"children": [
										1461,
										1460,
										1459
									]
								}
							],
							"sources": [
								{
									"fileName": "src/interfaces/Node.interface.ts",
									"line": 76,
									"character": 15,
									"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Node.interface.ts#L76"
								}
							]
						}
					}
				},
				{
					"id": 1446,
					"name": "memory",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The memory stats of the node."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Node.interface.ts",
							"line": 49,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Node.interface.ts#L49"
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 1447,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 1450,
									"name": "allocated",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The allocated memory of the node."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/interfaces/Node.interface.ts",
											"line": 57,
											"character": 4,
											"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Node.interface.ts#L57"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1448,
									"name": "free",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The free memory of the node."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/interfaces/Node.interface.ts",
											"line": 51,
											"character": 4,
											"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Node.interface.ts#L51"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1451,
									"name": "reservable",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The reservable memory of the node."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/interfaces/Node.interface.ts",
											"line": 60,
											"character": 4,
											"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Node.interface.ts#L60"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1449,
									"name": "used",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The used memory of the node."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/interfaces/Node.interface.ts",
											"line": 54,
											"character": 4,
											"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Node.interface.ts#L54"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"children": [
										1450,
										1448,
										1451,
										1449
									]
								}
							],
							"sources": [
								{
									"fileName": "src/interfaces/Node.interface.ts",
									"line": 49,
									"character": 10,
									"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Node.interface.ts#L49"
								}
							]
						}
					}
				},
				{
					"id": 1443,
					"name": "players",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The amount of players on the node."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Node.interface.ts",
							"line": 40,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Node.interface.ts#L40"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 1444,
					"name": "playingPlayers",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The amount of playing players on the node."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Node.interface.ts",
							"line": 43,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Node.interface.ts#L43"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 1445,
					"name": "uptime",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The uptime of the node."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Node.interface.ts",
							"line": 46,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Node.interface.ts#L46"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1452,
						1457,
						1446,
						1443,
						1444,
						1445
					]
				}
			],
			"sources": [
				{
					"fileName": "src/interfaces/Node.interface.ts",
					"line": 38,
					"character": 17,
					"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Node.interface.ts#L38"
				}
			]
		},
		{
			"id": 1685,
			"name": "PlayerUpdatePayload",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1687,
					"name": "guildId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Socket.interface.ts",
							"line": 77,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L77"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1686,
					"name": "op",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Socket.interface.ts",
							"line": 76,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L76"
						}
					],
					"type": {
						"type": "literal",
						"value": "playerUpdate"
					}
				},
				{
					"id": 1688,
					"name": "state",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Socket.interface.ts",
							"line": 78,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L78"
						}
					],
					"type": {
						"type": "reference",
						"id": 1676,
						"name": "SocketVoiceState"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1687,
						1686,
						1688
					]
				}
			],
			"sources": [
				{
					"fileName": "src/interfaces/Socket.interface.ts",
					"line": 75,
					"character": 17,
					"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L75"
				}
			]
		},
		{
			"id": 1681,
			"name": "ReadyPayload",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1682,
					"name": "op",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Socket.interface.ts",
							"line": 70,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L70"
						}
					],
					"type": {
						"type": "literal",
						"value": "ready"
					}
				},
				{
					"id": 1683,
					"name": "resumed",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Socket.interface.ts",
							"line": 71,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L71"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1684,
					"name": "sessionId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Socket.interface.ts",
							"line": 72,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L72"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1682,
						1683,
						1684
					]
				}
			],
			"sources": [
				{
					"fileName": "src/interfaces/Socket.interface.ts",
					"line": 69,
					"character": 17,
					"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L69"
				}
			]
		},
		{
			"id": 1468,
			"name": "RestError",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1471,
					"name": "error",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The HTTP status code message"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 23,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L23"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1472,
					"name": "message",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The error message"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 28,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L28"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1470,
					"name": "status",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The HTTP status code"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 18,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L18"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 1469,
					"name": "timestamp",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The timestamp of the error (in milliseconds since the epoch)"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 13,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L13"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 1473,
					"name": "trace",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The stack trace of the error when trace=true as query param has been sent"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 33,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L33"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1471,
						1472,
						1470,
						1469,
						1473
					]
				}
			],
			"sources": [
				{
					"fileName": "src/interfaces/Rest.interface.ts",
					"line": 9,
					"character": 17,
					"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L9"
				}
			]
		},
		{
			"id": 1478,
			"name": "RestException",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1480,
					"name": "cause",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The cause of the exception"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 60,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L60"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1481,
					"name": "message",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The message of the exception"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 65,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L65"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1479,
					"name": "severity",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The severity of the exception"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 55,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L55"
						}
					],
					"type": {
						"type": "reference",
						"id": 1474,
						"name": "RestSeverity"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1480,
						1481,
						1479
					]
				}
			],
			"sources": [
				{
					"fileName": "src/interfaces/Rest.interface.ts",
					"line": 51,
					"character": 17,
					"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L51"
				}
			]
		},
		{
			"id": 1511,
			"name": "RestGit",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1512,
					"name": "branch",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The branch of the library"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 161,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L161"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1513,
					"name": "commit",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The commit hash of the library"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 166,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L166"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1514,
					"name": "commitTime",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The commit time of the library"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 171,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L171"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1512,
						1513,
						1514
					]
				}
			],
			"sources": [
				{
					"fileName": "src/interfaces/Rest.interface.ts",
					"line": 157,
					"character": 17,
					"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L157"
				}
			]
		},
		{
			"id": 1518,
			"name": "RestInfo",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1520,
					"name": "buildTime",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The build time"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 195,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L195"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1525,
					"name": "filters",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Filters being used by this server"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 220,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L220"
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				},
				{
					"id": 1521,
					"name": "git",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The git info"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 200,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L200"
						}
					],
					"type": {
						"type": "reference",
						"id": 1511,
						"name": "RestGit"
					}
				},
				{
					"id": 1522,
					"name": "jvm",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The JVM version"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 205,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L205"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1523,
					"name": "lavaplayer",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The Lavaplayer version being used by this server"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 210,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L210"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1526,
					"name": "plugins",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The plugins being used by this server"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 225,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L225"
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 1515,
							"name": "RestPlugin"
						}
					}
				},
				{
					"id": 1524,
					"name": "sourceManagers",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Source managers being used by this server"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 215,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L215"
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				},
				{
					"id": 1519,
					"name": "version",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The version of the library"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 190,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L190"
						}
					],
					"type": {
						"type": "reference",
						"id": 1505,
						"name": "RestVersion"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1520,
						1525,
						1521,
						1522,
						1523,
						1526,
						1524,
						1519
					]
				}
			],
			"sources": [
				{
					"fileName": "src/interfaces/Rest.interface.ts",
					"line": 186,
					"character": 17,
					"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L186"
				}
			]
		},
		{
			"id": 1482,
			"name": "RestLavalinkStats",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1492,
					"name": "cpu",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The cpu stats of the node."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 94,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L94"
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 1493,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 1494,
									"name": "cores",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The amount of cores the node has."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/interfaces/Rest.interface.ts",
											"line": 96,
											"character": 4,
											"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L96"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1496,
									"name": "lavalinkLoad",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The lavalink load of the node."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/interfaces/Rest.interface.ts",
											"line": 102,
											"character": 4,
											"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L102"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1495,
									"name": "systemLoad",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The system load of the node."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/interfaces/Rest.interface.ts",
											"line": 99,
											"character": 4,
											"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L99"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"children": [
										1494,
										1496,
										1495
									]
								}
							],
							"sources": [
								{
									"fileName": "src/interfaces/Rest.interface.ts",
									"line": 94,
									"character": 7,
									"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L94"
								}
							]
						}
					}
				},
				{
					"id": 1497,
					"name": "frameStats",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The frame stats of the node."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 106,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L106"
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 1498,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 1501,
									"name": "deficit",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The amount of frames that were deficit."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/interfaces/Rest.interface.ts",
											"line": 114,
											"character": 4,
											"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L114"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1500,
									"name": "nulled",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The amount of frames that were nulled."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/interfaces/Rest.interface.ts",
											"line": 111,
											"character": 4,
											"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L111"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1499,
									"name": "sent",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The amount of frames sent to Discord."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/interfaces/Rest.interface.ts",
											"line": 108,
											"character": 4,
											"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L108"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"children": [
										1501,
										1500,
										1499
									]
								}
							],
							"sources": [
								{
									"fileName": "src/interfaces/Rest.interface.ts",
									"line": 106,
									"character": 15,
									"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L106"
								}
							]
						}
					}
				},
				{
					"id": 1486,
					"name": "memory",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The memory stats of the node."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 79,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L79"
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 1487,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 1490,
									"name": "allocated",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The allocated memory of the node."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/interfaces/Rest.interface.ts",
											"line": 87,
											"character": 4,
											"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L87"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1488,
									"name": "free",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The free memory of the node."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/interfaces/Rest.interface.ts",
											"line": 81,
											"character": 4,
											"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L81"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1491,
									"name": "reservable",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The reservable memory of the node."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/interfaces/Rest.interface.ts",
											"line": 90,
											"character": 4,
											"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L90"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1489,
									"name": "used",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The used memory of the node."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/interfaces/Rest.interface.ts",
											"line": 84,
											"character": 4,
											"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L84"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"children": [
										1490,
										1488,
										1491,
										1489
									]
								}
							],
							"sources": [
								{
									"fileName": "src/interfaces/Rest.interface.ts",
									"line": 79,
									"character": 10,
									"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L79"
								}
							]
						}
					}
				},
				{
					"id": 1483,
					"name": "players",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The amount of players on the node."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 70,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L70"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 1484,
					"name": "playingPlayers",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The amount of playing players on the node."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 73,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L73"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 1485,
					"name": "uptime",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The uptime of the node."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 76,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L76"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1492,
						1497,
						1486,
						1483,
						1484,
						1485
					]
				}
			],
			"sources": [
				{
					"fileName": "src/interfaces/Rest.interface.ts",
					"line": 68,
					"character": 17,
					"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L68"
				}
			]
		},
		{
			"id": 1541,
			"name": "RestPlayer",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1546,
					"name": "filters",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The filters used by the player"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 294,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L294"
						}
					],
					"type": {
						"type": "reference",
						"id": 1616,
						"name": "Filters"
					}
				},
				{
					"id": 1542,
					"name": "guildId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The guild id of the player"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 274,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L274"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1544,
					"name": "paused",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Whether the player is paused"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 284,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L284"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1547,
					"name": "track",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The track currently playing"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 299,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L299"
						}
					],
					"type": {
						"type": "reference",
						"id": 1563,
						"name": "RestTrack"
					}
				},
				{
					"id": 1545,
					"name": "voiceState",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The voice state of the player"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 289,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L289"
						}
					],
					"type": {
						"type": "reference",
						"id": 1557,
						"name": "RestVoiceState"
					}
				},
				{
					"id": 1543,
					"name": "volume",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Volume of the player"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 279,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L279"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1546,
						1542,
						1544,
						1547,
						1545,
						1543
					]
				}
			],
			"sources": [
				{
					"fileName": "src/interfaces/Rest.interface.ts",
					"line": 270,
					"character": 17,
					"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L270"
				}
			]
		},
		{
			"id": 1548,
			"name": "RestPlayerUpdate",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1549,
					"name": "encodedTrack",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The encoded track data base64 to play"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 306,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L306"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1552,
					"name": "endTime",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The end time of the track in milliseconds"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 321,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L321"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 1555,
					"name": "filters",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The filters used by the player"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 336,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L336"
						}
					],
					"type": {
						"type": "reference",
						"id": 1616,
						"name": "Filters"
					}
				},
				{
					"id": 1550,
					"name": "identifier",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "identifier of the track to play"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 311,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L311"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1554,
					"name": "paused",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Whether the player is paused"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 331,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L331"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1551,
					"name": "position",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Track position in milliseconds"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 316,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L316"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 1556,
					"name": "voiceState",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The rest voice state of the player"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 341,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L341"
						}
					],
					"type": {
						"type": "reference",
						"id": 1557,
						"name": "RestVoiceState"
					}
				},
				{
					"id": 1553,
					"name": "volume",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Volume of the player"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 326,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L326"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1549,
						1552,
						1555,
						1550,
						1554,
						1551,
						1556,
						1553
					]
				}
			],
			"sources": [
				{
					"fileName": "src/interfaces/Rest.interface.ts",
					"line": 302,
					"character": 17,
					"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L302"
				}
			]
		},
		{
			"id": 1533,
			"name": "RestPlaylistInfo",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1534,
					"name": "name",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Name of the loaded playlist"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 240,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L240"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1535,
					"name": "selectedTrack",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The selected track index"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 245,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L245"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1534,
						1535
					]
				}
			],
			"sources": [
				{
					"fileName": "src/interfaces/Rest.interface.ts",
					"line": 236,
					"character": 17,
					"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L236"
				}
			]
		},
		{
			"id": 1515,
			"name": "RestPlugin",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1516,
					"name": "name",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The name of the plugin"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 178,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L178"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1517,
					"name": "version",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The version of the plugin"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 183,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L183"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1516,
						1517
					]
				}
			],
			"sources": [
				{
					"fileName": "src/interfaces/Rest.interface.ts",
					"line": 174,
					"character": 17,
					"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L174"
				}
			]
		},
		{
			"id": 1502,
			"name": "RestSessionInfo",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1503,
					"name": "resumeKey",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Resume key to use when reconnecting"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 122,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L122"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1504,
					"name": "timeout",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The timeout in seconds (default is 60s)"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 127,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L127"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1503,
						1504
					]
				}
			],
			"sources": [
				{
					"fileName": "src/interfaces/Rest.interface.ts",
					"line": 118,
					"character": 17,
					"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L118"
				}
			]
		},
		{
			"id": 1563,
			"name": "RestTrack",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The track object from rest"
					}
				]
			},
			"children": [
				{
					"id": 1564,
					"name": "encoded",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The base64 encoded track data"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 374,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L374"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1565,
					"name": "info",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Info about the track"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 377,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L377"
						}
					],
					"type": {
						"type": "reference",
						"id": 1567,
						"name": "RestTrackInfo"
					}
				},
				{
					"id": 1566,
					"name": "track",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The base64 encoded track data (DEPRECATED as of v3.7.0 and marked for removal in v4)"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 380,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L380"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1564,
						1565,
						1566
					]
				}
			],
			"sources": [
				{
					"fileName": "src/interfaces/Rest.interface.ts",
					"line": 372,
					"character": 17,
					"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L372"
				}
			]
		},
		{
			"id": 1577,
			"name": "RestTrackDecode",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "Rest track decoding object"
					}
				]
			},
			"children": [
				{
					"id": 1579,
					"name": "info",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The track info object"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 427,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L427"
						}
					],
					"type": {
						"type": "reference",
						"id": 1567,
						"name": "RestTrackInfo"
					}
				},
				{
					"id": 1578,
					"name": "track",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The track object"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 422,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L422"
						}
					],
					"type": {
						"type": "reference",
						"id": 1563,
						"name": "RestTrack"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1579,
						1578
					]
				}
			],
			"sources": [
				{
					"fileName": "src/interfaces/Rest.interface.ts",
					"line": 418,
					"character": 17,
					"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L418"
				}
			]
		},
		{
			"id": 1567,
			"name": "RestTrackInfo",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The rest track info object"
					}
				]
			},
			"children": [
				{
					"id": 1570,
					"name": "author",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The track author"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 394,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L394"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1568,
					"name": "identifier",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The track identifier"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 388,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L388"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1569,
					"name": "isSeekable",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Whether the track is seekable"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 391,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L391"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1572,
					"name": "isStream",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Whether the track is a stream"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 400,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L400"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1571,
					"name": "length",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The track length in milliseconds"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 397,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L397"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 1573,
					"name": "position",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The track position in milliseconds"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 403,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L403"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 1575,
					"name": "sourceName",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The track source name"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 409,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L409"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1574,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The track title"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 406,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L406"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1576,
					"name": "uri",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The track uri"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 412,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L412"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1570,
						1568,
						1569,
						1572,
						1571,
						1573,
						1575,
						1574,
						1576
					]
				}
			],
			"sources": [
				{
					"fileName": "src/interfaces/Rest.interface.ts",
					"line": 386,
					"character": 17,
					"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L386"
				}
			]
		},
		{
			"id": 1536,
			"name": "RestTrackLoadResult",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1540,
					"name": "exception",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The exception message if load failed"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 267,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L267"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1537,
					"name": "loadType",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The load type"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 252,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L252"
						}
					],
					"type": {
						"type": "reference",
						"id": 1527,
						"name": "RestLoadResultType"
					}
				},
				{
					"id": 1538,
					"name": "playlistInfo",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The playlist info"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 257,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L257"
						}
					],
					"type": {
						"type": "reference",
						"id": 1533,
						"name": "RestPlaylistInfo"
					}
				},
				{
					"id": 1539,
					"name": "tracks",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The tracks loaded"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 262,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L262"
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 1563,
							"name": "RestTrack"
						}
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1540,
						1537,
						1538,
						1539
					]
				}
			],
			"sources": [
				{
					"fileName": "src/interfaces/Rest.interface.ts",
					"line": 248,
					"character": 17,
					"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L248"
				}
			]
		},
		{
			"id": 1505,
			"name": "RestVersion",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1507,
					"name": "major",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The major version of the library"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 139,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L139"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 1508,
					"name": "minor",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The minor version of the library"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 144,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L144"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 1509,
					"name": "patch",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The patch version of the library"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 149,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L149"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 1510,
					"name": "preRelease",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The pre-release version of the library"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 154,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L154"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1506,
					"name": "semver",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The semver version of the library"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 134,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L134"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1507,
						1508,
						1509,
						1510,
						1506
					]
				}
			],
			"sources": [
				{
					"fileName": "src/interfaces/Rest.interface.ts",
					"line": 130,
					"character": 17,
					"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L130"
				}
			]
		},
		{
			"id": 1557,
			"name": "RestVoiceState",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1561,
					"name": "connected",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Whether the player is connected. Response only"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 363,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L363"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1559,
					"name": "endpoint",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The Discord voice endpoint to connect to"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 353,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L353"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1562,
					"name": "ping",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Roundtrip latency in milliseconds to the voice gateway (-1 if not connected). Response only"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 368,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L368"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 1560,
					"name": "sessionId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The Discord voice session id to authenticate with"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 358,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L358"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1558,
					"name": "token",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The Discord voice token to authenticate with"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 348,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L348"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1561,
						1559,
						1562,
						1560,
						1558
					]
				}
			],
			"sources": [
				{
					"fileName": "src/interfaces/Rest.interface.ts",
					"line": 344,
					"character": 17,
					"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L344"
				}
			]
		},
		{
			"id": 1598,
			"name": "Rotation",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The rotation filter object"
					}
				]
			},
			"children": [
				{
					"id": 1599,
					"name": "rotationHz",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The frequency of the audio rotating around the listener"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 487,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L487"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1599
					]
				}
			],
			"sources": [
				{
					"fileName": "src/interfaces/Rest.interface.ts",
					"line": 485,
					"character": 17,
					"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L485"
				}
			]
		},
		{
			"id": 1658,
			"name": "SocketPayload",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1660,
					"name": "d",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Socket.interface.ts",
							"line": 25,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L25"
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 1661,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 1663,
									"name": "channel_id",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "src/interfaces/Socket.interface.ts",
											"line": 27,
											"character": 4,
											"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L27"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1662,
									"name": "guild_id",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "src/interfaces/Socket.interface.ts",
											"line": 26,
											"character": 4,
											"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L26"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1665,
									"name": "self_deaf",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "src/interfaces/Socket.interface.ts",
											"line": 29,
											"character": 4,
											"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L29"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1664,
									"name": "self_mute",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "src/interfaces/Socket.interface.ts",
											"line": 28,
											"character": 4,
											"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L28"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"children": [
										1663,
										1662,
										1665,
										1664
									]
								}
							],
							"sources": [
								{
									"fileName": "src/interfaces/Socket.interface.ts",
									"line": 25,
									"character": 5,
									"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L25"
								}
							]
						}
					}
				},
				{
					"id": 1659,
					"name": "op",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Socket.interface.ts",
							"line": 24,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L24"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1660,
						1659
					]
				}
			],
			"sources": [
				{
					"fileName": "src/interfaces/Socket.interface.ts",
					"line": 23,
					"character": 17,
					"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L23"
				}
			]
		},
		{
			"id": 1676,
			"name": "SocketVoiceState",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1678,
					"name": "connected",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "If Lavalink is connected to the voice gateway"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Socket.interface.ts",
							"line": 56,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L56"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1679,
					"name": "ping",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The ping of the node to the Discord voice server in milliseconds (-1 if not connected)"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Socket.interface.ts",
							"line": 61,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L61"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 1680,
					"name": "position",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The position of the track in milliseconds"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Socket.interface.ts",
							"line": 66,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L66"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 1677,
					"name": "time",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Unix timestamp in milliseconds"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Socket.interface.ts",
							"line": 51,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L51"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1678,
						1679,
						1680,
						1677
					]
				}
			],
			"sources": [
				{
					"fileName": "src/interfaces/Socket.interface.ts",
					"line": 47,
					"character": 17,
					"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L47"
				}
			]
		},
		{
			"id": 1689,
			"name": "StatsPayload",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1700,
					"name": "cpu",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Socket.interface.ts",
							"line": 92,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L92"
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 1701,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 1702,
									"name": "cores",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "src/interfaces/Socket.interface.ts",
											"line": 93,
											"character": 4,
											"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L93"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1704,
									"name": "lavalinkLoad",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "src/interfaces/Socket.interface.ts",
											"line": 95,
											"character": 4,
											"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L95"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1703,
									"name": "systemLoad",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "src/interfaces/Socket.interface.ts",
											"line": 94,
											"character": 4,
											"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L94"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"children": [
										1702,
										1704,
										1703
									]
								}
							],
							"sources": [
								{
									"fileName": "src/interfaces/Socket.interface.ts",
									"line": 92,
									"character": 7,
									"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L92"
								}
							]
						}
					}
				},
				{
					"id": 1705,
					"name": "frameStats",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "src/interfaces/Socket.interface.ts",
							"line": 97,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L97"
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 1706,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 1709,
									"name": "deficit",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "src/interfaces/Socket.interface.ts",
											"line": 100,
											"character": 4,
											"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L100"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1708,
									"name": "nulled",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "src/interfaces/Socket.interface.ts",
											"line": 99,
											"character": 4,
											"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L99"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1707,
									"name": "sent",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "src/interfaces/Socket.interface.ts",
											"line": 98,
											"character": 4,
											"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L98"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"children": [
										1709,
										1708,
										1707
									]
								}
							],
							"sources": [
								{
									"fileName": "src/interfaces/Socket.interface.ts",
									"line": 97,
									"character": 15,
									"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L97"
								}
							]
						}
					}
				},
				{
					"id": 1694,
					"name": "memory",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Socket.interface.ts",
							"line": 86,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L86"
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 1695,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 1698,
									"name": "allocated",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "src/interfaces/Socket.interface.ts",
											"line": 89,
											"character": 4,
											"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L89"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1696,
									"name": "free",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "src/interfaces/Socket.interface.ts",
											"line": 87,
											"character": 4,
											"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L87"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1699,
									"name": "reservable",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "src/interfaces/Socket.interface.ts",
											"line": 90,
											"character": 4,
											"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L90"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1697,
									"name": "used",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "src/interfaces/Socket.interface.ts",
											"line": 88,
											"character": 4,
											"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L88"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"children": [
										1698,
										1696,
										1699,
										1697
									]
								}
							],
							"sources": [
								{
									"fileName": "src/interfaces/Socket.interface.ts",
									"line": 86,
									"character": 10,
									"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L86"
								}
							]
						}
					}
				},
				{
					"id": 1690,
					"name": "op",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Socket.interface.ts",
							"line": 82,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L82"
						}
					],
					"type": {
						"type": "literal",
						"value": "stats"
					}
				},
				{
					"id": 1691,
					"name": "players",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Socket.interface.ts",
							"line": 83,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L83"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 1692,
					"name": "playingPlayers",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Socket.interface.ts",
							"line": 84,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L84"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 1693,
					"name": "uptime",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Socket.interface.ts",
							"line": 85,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L85"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1700,
						1705,
						1694,
						1690,
						1691,
						1692,
						1693
					]
				}
			],
			"sources": [
				{
					"fileName": "src/interfaces/Socket.interface.ts",
					"line": 81,
					"character": 17,
					"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L81"
				}
			]
		},
		{
			"id": 1588,
			"name": "Timescale",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The timescale filter object"
					}
				]
			},
			"children": [
				{
					"id": 1590,
					"name": "pitch",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Set the pitch (0.0 ≤ x)"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 460,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L460"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 1591,
					"name": "rate",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Set the rate (0.0 ≤ x)"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 463,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L463"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 1589,
					"name": "speed",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Set the speed (0.0 ≤ x)"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 457,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L457"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1590,
						1591,
						1589
					]
				}
			],
			"sources": [
				{
					"fileName": "src/interfaces/Rest.interface.ts",
					"line": 455,
					"character": 17,
					"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L455"
				}
			]
		},
		{
			"id": 1720,
			"name": "TrackEndEventPayload",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1725,
					"name": "guildId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Socket.interface.ts",
							"line": 107,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L107"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1713,
						"name": "EventPayload.guildId"
					}
				},
				{
					"id": 1724,
					"name": "op",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Socket.interface.ts",
							"line": 105,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L105"
						}
					],
					"type": {
						"type": "literal",
						"value": "event"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1711,
						"name": "EventPayload.op"
					}
				},
				{
					"id": 1723,
					"name": "reason",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Socket.interface.ts",
							"line": 119,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L119"
						}
					],
					"type": {
						"type": "reference",
						"id": 1666,
						"name": "TrackEndReason"
					}
				},
				{
					"id": 1722,
					"name": "track",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Socket.interface.ts",
							"line": 118,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L118"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1721,
					"name": "type",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Socket.interface.ts",
							"line": 117,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L117"
						}
					],
					"type": {
						"type": "literal",
						"value": "TrackEndEvent"
					},
					"overwrites": {
						"type": "reference",
						"id": 1712,
						"name": "EventPayload.type"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1725,
						1724,
						1723,
						1722,
						1721
					]
				}
			],
			"sources": [
				{
					"fileName": "src/interfaces/Socket.interface.ts",
					"line": 116,
					"character": 17,
					"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L116"
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 1710,
					"name": "EventPayload"
				}
			]
		},
		{
			"id": 1672,
			"name": "TrackException",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1675,
					"name": "cause",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Socket.interface.ts",
							"line": 44,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L44"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1673,
					"name": "message",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Socket.interface.ts",
							"line": 42,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L42"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1674,
					"name": "severity",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Socket.interface.ts",
							"line": 43,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L43"
						}
					],
					"type": {
						"type": "reference",
						"id": 1654,
						"name": "TrackExceptionSeverity"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1675,
						1673,
						1674
					]
				}
			],
			"sources": [
				{
					"fileName": "src/interfaces/Socket.interface.ts",
					"line": 41,
					"character": 17,
					"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L41"
				}
			]
		},
		{
			"id": 1726,
			"name": "TrackExceptionEventPayload",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1729,
					"name": "exception",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Socket.interface.ts",
							"line": 125,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L125"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1731,
					"name": "guildId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Socket.interface.ts",
							"line": 107,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L107"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1713,
						"name": "EventPayload.guildId"
					}
				},
				{
					"id": 1730,
					"name": "op",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Socket.interface.ts",
							"line": 105,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L105"
						}
					],
					"type": {
						"type": "literal",
						"value": "event"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1711,
						"name": "EventPayload.op"
					}
				},
				{
					"id": 1728,
					"name": "track",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Socket.interface.ts",
							"line": 124,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L124"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1727,
					"name": "type",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Socket.interface.ts",
							"line": 123,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L123"
						}
					],
					"type": {
						"type": "literal",
						"value": "TrackExceptionEvent"
					},
					"overwrites": {
						"type": "reference",
						"id": 1712,
						"name": "EventPayload.type"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1729,
						1731,
						1730,
						1728,
						1727
					]
				}
			],
			"sources": [
				{
					"fileName": "src/interfaces/Socket.interface.ts",
					"line": 122,
					"character": 17,
					"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L122"
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 1710,
					"name": "EventPayload"
				}
			]
		},
		{
			"id": 1642,
			"name": "TrackOptions",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The options for the track"
					}
				]
			},
			"children": [
				{
					"id": 1645,
					"name": "author",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The track author"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Player.interface.ts",
							"line": 44,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Player.interface.ts#L44"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1643,
					"name": "identifier",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The track identifier"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Player.interface.ts",
							"line": 38,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Player.interface.ts#L38"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1644,
					"name": "isSeekable",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Whether the track is seekable"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Player.interface.ts",
							"line": 41,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Player.interface.ts#L41"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1647,
					"name": "isStream",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Whether the track is a stream"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Player.interface.ts",
							"line": 50,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Player.interface.ts#L50"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1646,
					"name": "length",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The track length in milliseconds"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Player.interface.ts",
							"line": 47,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Player.interface.ts#L47"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 1648,
					"name": "position",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The track position in milliseconds"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Player.interface.ts",
							"line": 53,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Player.interface.ts#L53"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 1650,
					"name": "sourceName",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The track source name"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Player.interface.ts",
							"line": 59,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Player.interface.ts#L59"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1649,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The track title"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Player.interface.ts",
							"line": 56,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Player.interface.ts#L56"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1651,
					"name": "uri",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The track uri"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Player.interface.ts",
							"line": 62,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Player.interface.ts#L62"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1645,
						1643,
						1644,
						1647,
						1646,
						1648,
						1650,
						1649,
						1651
					]
				}
			],
			"sources": [
				{
					"fileName": "src/interfaces/Player.interface.ts",
					"line": 36,
					"character": 17,
					"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Player.interface.ts#L36"
				}
			]
		},
		{
			"id": 1714,
			"name": "TrackStartEventPayload",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1716,
					"name": "encodedTrack",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Socket.interface.ts",
							"line": 112,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L112"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1719,
					"name": "guildId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Socket.interface.ts",
							"line": 107,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L107"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1713,
						"name": "EventPayload.guildId"
					}
				},
				{
					"id": 1718,
					"name": "op",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Socket.interface.ts",
							"line": 105,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L105"
						}
					],
					"type": {
						"type": "literal",
						"value": "event"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1711,
						"name": "EventPayload.op"
					}
				},
				{
					"id": 1717,
					"name": "track",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Socket.interface.ts",
							"line": 113,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L113"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1715,
					"name": "type",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Socket.interface.ts",
							"line": 111,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L111"
						}
					],
					"type": {
						"type": "literal",
						"value": "TrackStartEvent"
					},
					"overwrites": {
						"type": "reference",
						"id": 1712,
						"name": "EventPayload.type"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1716,
						1719,
						1718,
						1717,
						1715
					]
				}
			],
			"sources": [
				{
					"fileName": "src/interfaces/Socket.interface.ts",
					"line": 110,
					"character": 17,
					"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L110"
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 1710,
					"name": "EventPayload"
				}
			]
		},
		{
			"id": 1732,
			"name": "TrackStuckEventPayload",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1734,
					"name": "encodedTrack",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Socket.interface.ts",
							"line": 130,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L130"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1738,
					"name": "guildId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Socket.interface.ts",
							"line": 107,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L107"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1713,
						"name": "EventPayload.guildId"
					}
				},
				{
					"id": 1737,
					"name": "op",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Socket.interface.ts",
							"line": 105,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L105"
						}
					],
					"type": {
						"type": "literal",
						"value": "event"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1711,
						"name": "EventPayload.op"
					}
				},
				{
					"id": 1736,
					"name": "thresholdMs",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Socket.interface.ts",
							"line": 132,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L132"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 1735,
					"name": "track",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Socket.interface.ts",
							"line": 131,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L131"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1733,
					"name": "type",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Socket.interface.ts",
							"line": 129,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L129"
						}
					],
					"type": {
						"type": "literal",
						"value": "TrackStuckEvent"
					},
					"overwrites": {
						"type": "reference",
						"id": 1712,
						"name": "EventPayload.type"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1734,
						1738,
						1737,
						1736,
						1735,
						1733
					]
				}
			],
			"sources": [
				{
					"fileName": "src/interfaces/Socket.interface.ts",
					"line": 128,
					"character": 17,
					"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L128"
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 1710,
					"name": "EventPayload"
				}
			]
		},
		{
			"id": 1592,
			"name": "Tremolo",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The tremolo filter object"
					}
				]
			},
			"children": [
				{
					"id": 1594,
					"name": "depth",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Set the depth (0.0 ≤ x ≤ 1.0)"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 472,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L472"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 1593,
					"name": "frequency",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Set the frequency (0.0 < x)"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 469,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L469"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1594,
						1593
					]
				}
			],
			"sources": [
				{
					"fileName": "src/interfaces/Rest.interface.ts",
					"line": 467,
					"character": 17,
					"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L467"
				}
			]
		},
		{
			"id": 1595,
			"name": "Vibrato",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The vibrato filter object"
					}
				]
			},
			"children": [
				{
					"id": 1597,
					"name": "depth",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Set the depth (0.0 ≤ x ≤ 1.0)"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 481,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L481"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 1596,
					"name": "frequency",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Set the frequency (0.0 < x ≤ 14.0)"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/Rest.interface.ts",
							"line": 478,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L478"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1597,
						1596
					]
				}
			],
			"sources": [
				{
					"fileName": "src/interfaces/Rest.interface.ts",
					"line": 476,
					"character": 17,
					"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L476"
				}
			]
		},
		{
			"id": 1774,
			"name": "VoicePacket",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1776,
					"name": "d",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Cosmicord.interface.ts",
							"line": 54,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Cosmicord.interface.ts#L54"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"id": 1761,
								"name": "VoiceState"
							},
							{
								"type": "reference",
								"id": 1770,
								"name": "VoiceServer"
							}
						]
					}
				},
				{
					"id": 1775,
					"name": "t",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "src/interfaces/Cosmicord.interface.ts",
							"line": 53,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Cosmicord.interface.ts#L53"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "VOICE_SERVER_UPDATE"
							},
							{
								"type": "literal",
								"value": "VOICE_STATE_UPDATE"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1776,
						1775
					]
				}
			],
			"sources": [
				{
					"fileName": "src/interfaces/Cosmicord.interface.ts",
					"line": 52,
					"character": 17,
					"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Cosmicord.interface.ts#L52"
				}
			]
		},
		{
			"id": 1770,
			"name": "VoiceServer",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1773,
					"name": "endpoint",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Cosmicord.interface.ts",
							"line": 42,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Cosmicord.interface.ts#L42"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1772,
					"name": "guild_id",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Cosmicord.interface.ts",
							"line": 41,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Cosmicord.interface.ts#L41"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1771,
					"name": "token",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Cosmicord.interface.ts",
							"line": 40,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Cosmicord.interface.ts#L40"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1773,
						1772,
						1771
					]
				}
			],
			"sources": [
				{
					"fileName": "src/interfaces/Cosmicord.interface.ts",
					"line": 39,
					"character": 17,
					"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Cosmicord.interface.ts#L39"
				}
			]
		},
		{
			"id": 1761,
			"name": "VoiceState",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1769,
					"name": "channel_id",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Cosmicord.interface.ts",
							"line": 49,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Cosmicord.interface.ts#L49"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1764,
					"name": "event",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Cosmicord.interface.ts",
							"line": 35,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Cosmicord.interface.ts#L35"
						}
					],
					"type": {
						"type": "reference",
						"id": 1770,
						"name": "VoiceServer"
					}
				},
				{
					"id": 1763,
					"name": "guildId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Cosmicord.interface.ts",
							"line": 34,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Cosmicord.interface.ts#L34"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1766,
					"name": "guild_id",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Cosmicord.interface.ts",
							"line": 46,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Cosmicord.interface.ts#L46"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1762,
					"name": "op",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Cosmicord.interface.ts",
							"line": 33,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Cosmicord.interface.ts#L33"
						}
					],
					"type": {
						"type": "literal",
						"value": "voiceUpdate"
					}
				},
				{
					"id": 1765,
					"name": "sessionId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "src/interfaces/Cosmicord.interface.ts",
							"line": 36,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Cosmicord.interface.ts#L36"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1768,
					"name": "session_id",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Cosmicord.interface.ts",
							"line": 48,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Cosmicord.interface.ts#L48"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1767,
					"name": "user_id",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Cosmicord.interface.ts",
							"line": 47,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Cosmicord.interface.ts#L47"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1769,
						1764,
						1763,
						1766,
						1762,
						1765,
						1768,
						1767
					]
				}
			],
			"sources": [
				{
					"fileName": "src/interfaces/Cosmicord.interface.ts",
					"line": 32,
					"character": 17,
					"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Cosmicord.interface.ts#L32"
				},
				{
					"fileName": "src/interfaces/Cosmicord.interface.ts",
					"line": 45,
					"character": 17,
					"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Cosmicord.interface.ts#L45"
				}
			]
		},
		{
			"id": 1739,
			"name": "WebSocketClosedEventPayload",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1743,
					"name": "byRemote",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Socket.interface.ts",
							"line": 139,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L139"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1741,
					"name": "code",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Socket.interface.ts",
							"line": 137,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L137"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 1745,
					"name": "guildId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Socket.interface.ts",
							"line": 107,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L107"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1713,
						"name": "EventPayload.guildId"
					}
				},
				{
					"id": 1744,
					"name": "op",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Socket.interface.ts",
							"line": 105,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L105"
						}
					],
					"type": {
						"type": "literal",
						"value": "event"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1711,
						"name": "EventPayload.op"
					}
				},
				{
					"id": 1742,
					"name": "reason",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Socket.interface.ts",
							"line": 138,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L138"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1740,
					"name": "type",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/interfaces/Socket.interface.ts",
							"line": 136,
							"character": 2,
							"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L136"
						}
					],
					"type": {
						"type": "literal",
						"value": "WebSocketClosedEvent"
					},
					"overwrites": {
						"type": "reference",
						"id": 1712,
						"name": "EventPayload.type"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1743,
						1741,
						1745,
						1744,
						1742,
						1740
					]
				}
			],
			"sources": [
				{
					"fileName": "src/interfaces/Socket.interface.ts",
					"line": 135,
					"character": 17,
					"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L135"
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 1710,
					"name": "EventPayload"
				}
			]
		},
		{
			"id": 1653,
			"name": "EventsPayload",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "src/interfaces/Socket.interface.ts",
					"line": 11,
					"character": 12,
					"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L11"
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "reference",
						"id": 1714,
						"name": "TrackStartEventPayload"
					},
					{
						"type": "reference",
						"id": 1720,
						"name": "TrackEndEventPayload"
					},
					{
						"type": "reference",
						"id": 1726,
						"name": "TrackExceptionEventPayload"
					},
					{
						"type": "reference",
						"id": 1732,
						"name": "TrackStuckEventPayload"
					}
				]
			}
		},
		{
			"id": 1652,
			"name": "MessagePayload",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "src/interfaces/Socket.interface.ts",
					"line": 1,
					"character": 12,
					"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Socket.interface.ts#L1"
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "reference",
						"id": 1681,
						"name": "ReadyPayload"
					},
					{
						"type": "reference",
						"id": 1685,
						"name": "PlayerUpdatePayload"
					},
					{
						"type": "reference",
						"id": 1689,
						"name": "StatsPayload"
					},
					{
						"type": "reference",
						"id": 1714,
						"name": "TrackStartEventPayload"
					},
					{
						"type": "reference",
						"id": 1720,
						"name": "TrackEndEventPayload"
					},
					{
						"type": "reference",
						"id": 1726,
						"name": "TrackExceptionEventPayload"
					},
					{
						"type": "reference",
						"id": 1732,
						"name": "TrackStuckEventPayload"
					},
					{
						"type": "reference",
						"id": 1739,
						"name": "WebSocketClosedEventPayload"
					}
				]
			}
		},
		{
			"id": 1462,
			"name": "RestResult",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "src/interfaces/Rest.interface.ts",
					"line": 1,
					"character": 12,
					"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/interfaces/Rest.interface.ts#L1"
				}
			],
			"typeParameters": [
				{
					"id": 1463,
					"name": "T",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "reference",
						"id": 1463,
						"name": "T"
					},
					{
						"type": "reference",
						"id": 1468,
						"name": "RestError"
					}
				]
			}
		}
	],
	"groups": [
		{
			"title": "Enumerations",
			"children": [
				1635,
				1527,
				1474,
				1464,
				1666,
				1654
			]
		},
		{
			"title": "Classes",
			"children": [
				233,
				904,
				1090,
				148,
				381,
				1068,
				1
			]
		},
		{
			"title": "Interfaces",
			"children": [
				1609,
				1746,
				1796,
				1433,
				1785,
				1627,
				1793,
				1777,
				1600,
				1580,
				1710,
				1616,
				1583,
				1614,
				1427,
				1442,
				1685,
				1681,
				1468,
				1478,
				1511,
				1518,
				1482,
				1541,
				1548,
				1533,
				1515,
				1502,
				1563,
				1577,
				1567,
				1536,
				1505,
				1557,
				1598,
				1658,
				1676,
				1689,
				1588,
				1720,
				1672,
				1726,
				1642,
				1714,
				1732,
				1592,
				1595,
				1774,
				1770,
				1761,
				1739
			]
		},
		{
			"title": "Type Aliases",
			"children": [
				1653,
				1652,
				1462
			]
		}
	],
	"sources": [
		{
			"fileName": "src/index.ts",
			"line": 1,
			"character": 0,
			"url": "https://github.com/SudhanPlayz/Cosmicord.js/blob/d9a55b0/src/index.ts#L1"
		}
	]
}